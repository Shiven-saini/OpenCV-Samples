/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/fz-search/dist/FuzzySearch.min.js
var require_FuzzySearch_min = __commonJS({
  "node_modules/fz-search/dist/FuzzySearch.min.js"(exports, module2) {
    !function() {
      "use strict";
      function a(b2) {
        return void 0 === b2 && (b2 = {}), this instanceof a ? void a.setOptions(this, b2, a.defaultOptions, F, true, this._optionsHook) : new a(b2);
      }
      function b(a2, b2) {
        for (var c2 in a2)
          a2.hasOwnProperty(c2) && (this[c2] = b2.hasOwnProperty(c2) && void 0 !== b2[c2] ? b2[c2] : a2[c2]);
      }
      function c(a2, b2) {
        for (var c2 in b2)
          b2.hasOwnProperty(c2) && (a2[c2] = b2[c2]);
      }
      function d(a2, b2) {
        for (var c2 = b2.length, d2 = 0, e2 = -1; ++e2 < c2; ) {
          var f2 = b2[e2], g2 = f2.length;
          a2.substr(d2, g2) === f2 && (d2 += g2);
        }
        return d2 > 0 ? a2.substr(d2) : a2;
      }
      function e(a2) {
        var b2 = a2.length;
        if (!b2)
          return null;
        for (var c2 = g(a2[0]), d2 = 0; ++d2 < b2; )
          c2 += "|" + g(a2[d2]);
        return new RegExp("(?:^|\\s)\\s*(" + c2 + "):\\s*", "g");
      }
      function f(a2) {
        var b2 = a2.length;
        if (!b2)
          return null;
        var c2 = g(a2);
        return new RegExp("(?:^|[" + c2 + "])+([^" + c2 + "])[^" + c2 + "]*", "g");
      }
      function g(a2) {
        var b2 = /[\-\[\]\/\{}\(\)\*\+\?\.\\\^\$\|]/g;
        return a2.replace(b2, "\\$&");
      }
      function h(a2, b2, c2, d2, e2, f2) {
        this.item = a2, this.fields = b2, this.score = c2, this.matchIndex = d2, this.subIndex = e2, this.sortKey = f2;
      }
      function i(a2, b2) {
        var c2 = b2.score - a2.score;
        if (0 !== c2)
          return c2;
        var d2 = a2.sortKey, e2 = b2.sortKey;
        return d2 > e2 ? 1 : e2 > d2 ? -1 : 0;
      }
      function j(a2, b2, c2, d2, e2, f2, g2) {
        this.normalized = a2, this.words = b2, this.tokens_groups = c2, this.fused_str = d2, this.fused_map = e2, this.fused_score = 0, this.has_children = f2, this.children = g2;
      }
      function k(a2, b2, c2) {
        this.tokens = a2, this.map = b2, this.gate = c2;
        for (var d2 = a2.length, e2 = -1, f2 = new Array(d2); ++e2 < d2; )
          f2[e2] = 0;
        this.score_item = f2.slice(), this.score_field = f2.slice(), this.field_pos = f2;
      }
      function l(a2, b2) {
        this.start = a2, this.end = b2;
      }
      function m(a2, b2) {
        this.item = a2, this.fields = b2;
      }
      function n(a2, b2, c2, d2) {
        for (var e2, f2, g2, h2 = b2.length; h2 > d2 && (e2 = b2[d2++], "*" !== e2 && "" !== e2); ) {
          if (null == a2 || !(e2 in a2))
            return c2;
          a2 = a2[e2];
        }
        if (null == a2)
          return c2;
        var i2 = Object.prototype.toString.call(a2), j2 = "[object Array]" === i2, k2 = "[object Object]" === i2;
        if (d2 === h2)
          if (j2)
            for (f2 = -1, g2 = a2.length; ++f2 < g2; )
              c2.push(o(a2[f2], ""));
          else if (k2)
            for (e2 in a2)
              a2.hasOwnProperty(e2) && c2.push(o(a2[e2], ""));
          else
            c2.push(o(a2, ""));
        else if ("*" === e2) {
          if (j2)
            for (f2 = -1, g2 = a2.length; ++f2 < g2; )
              n(a2[f2], b2, c2, d2);
          else if (k2)
            for (e2 in a2)
              a2.hasOwnProperty(e2) && n(a2[e2], b2, c2, d2);
        }
        return c2;
      }
      function o(a2, b2) {
        return null == a2 ? b2 : a2.toString();
      }
      function p(a2) {
        for (var b2 = [], c2 = {}, d2 = a2.fields, e2 = 0; e2 < d2.length; e2++)
          for (var f2 = d2[e2], g2 = 0; g2 < f2.length; g2++)
            for (var h2 = f2[g2], i2 = 0; i2 < h2.length; i2++)
              r(h2[i2], b2, c2);
        return b2;
      }
      function q(a2) {
        var b2, c2, d2 = [], e2 = {}, f2 = a2.words;
        for (b2 = 0; b2 < f2.length; b2++)
          r(f2[b2], d2, e2);
        var g2 = a2.children;
        for (b2 = 0; b2 < g2.length; b2++)
          for (f2 = g2[b2].words, c2 = 0; f2 > c2; c2++)
            r(f2[c2], d2, e2);
        return d2;
      }
      function r(a2, b2, c2) {
        var d2 = a2.length;
        0 != d2 && (d2 >= 3 && t(a2, 6, b2, c2), d2 >= 2 && s(a2, 4, b2, c2), u(a2[0], b2, c2));
      }
      function s(a2, b2, c2, d2) {
        for (var e2 = Math.min(a2.length, b2), f2 = 0; e2 - 1 > f2; f2++)
          for (var g2 = f2 + 1; e2 > g2; g2++)
            u(a2[f2] + a2[g2], c2, d2);
        return c2;
      }
      function t(a2, b2, c2, d2) {
        for (var e2 = Math.min(a2.length, b2), f2 = 0; e2 - 2 > f2; f2++)
          for (var g2 = f2 + 1; e2 - 1 > g2; g2++)
            for (var h2 = g2 + 1; e2 > h2; h2++)
              u(a2[f2] + a2[g2] + a2[h2], c2, d2);
        return c2;
      }
      function u(a2, b2, c2) {
        a2 in c2 || (c2[a2] = true, b2.push(a2));
      }
      function v(a2, b2) {
        var c2 = {};
        if (0 == a2.length)
          return [];
        for (var d2 = 0; d2 < a2.length; d2++) {
          var e2 = a2[d2];
          if (e2 in b2)
            for (var f2 = b2[e2], g2 = 0; g2 < f2.length; g2++) {
              var h2 = f2[g2];
              h2 in c2 ? c2[h2]++ : c2[h2] = 1;
            }
        }
        var i2 = [];
        for (var j2 in c2)
          c2.hasOwnProperty(j2) && i2.push(new w(j2, c2[j2]));
        return i2 = i2.sort(function(a3, b3) {
          return b3.count - a3.count;
        });
      }
      function w(a2, b2) {
        this.id = a2, this.count = b2;
      }
      function x(a2) {
        return a2 ? a2.toLowerCase().replace(/[^\u0000-\u007E]/g, function(a3) {
          return H[a3] || a3;
        }) : "";
      }
      function y() {
        for (var a2 = "\xE3\xE0\xE1\xE4\xE2\xE6\u1EBD\xE8\xE9\xEB\xEA\xEC\xED\xEF\xEE\xF5\xF2\xF3\xF6\xF4\u0153\xF9\xFA\xFC\xFB\xF1\xE7", b2 = "aaaaaaeeeeeiiiioooooouuuunc", c2 = {}, d2 = 0; d2 < a2.length; d2++)
          c2[a2[d2]] = b2[d2];
        return c2;
      }
      function z(a2, b2, c2, d2) {
        var e2 = c2.length, f2 = b2.exec(a2);
        if (null === f2)
          return c2[e2] = a2, void (d2[e2] = "");
        for (var g2, h2, i2 = 0; null !== f2; )
          g2 = f2.index, h2 = f2[0].length, c2[e2] = a2.substring(i2, g2), d2[e2] = a2.substr(g2, h2), i2 = g2 + h2, e2++, f2 = b2.exec(a2);
        c2[e2] = a2.substring(i2), d2[e2] = "";
      }
      function A(a2, b2, c2, d2) {
        var e2, f2, g2 = a2.length, h2 = [];
        for (e2 = 0; g2 > e2; e2++)
          h2[e2] = {};
        var i2, j2 = new D(a2, h2, c2, d2), k2 = B(j2, 0, 0).score, l2 = 0;
        for (e2 = 0; g2 > e2 && (i2 = h2[e2][l2], i2); e2++)
          b2[e2] = f2 = i2.index, f2 > -1 && (l2 |= 1 << f2);
        return k2;
      }
      function B(a2, b2, c2) {
        var d2 = a2.score_grid, e2 = a2.cache_tree, f2 = a2.score_thresholds, g2 = a2.order_bonus, h2 = d2.length, i2 = d2[c2].length;
        i2 > G && (i2 = G);
        var j2, k2, l2, m2 = f2[c2], n2 = 0, o2 = -1, p2 = h2 - 1 > c2, q2 = e2[c2 + 1];
        for (j2 = 0; i2 > j2; j2++) {
          var r2 = 1 << j2;
          if (!(b2 & r2 || (k2 = d2[c2][j2], m2 > k2))) {
            if (p2) {
              l2 = b2 | r2;
              var s2 = l2 in q2 ? q2[l2] : B(a2, l2, c2 + 1);
              k2 += s2.score, j2 < s2.index && (k2 += g2);
            }
            k2 >= n2 && (n2 = k2, o2 = j2);
          }
        }
        p2 && (l2 = b2, k2 = l2 in q2 ? q2[l2].score : B(a2, l2, c2 + 1).score, k2 > n2 && (n2 = k2, o2 = -1));
        var t2 = new C(n2, o2);
        return e2[c2][b2] = t2, t2;
      }
      function C(a2, b2) {
        this.score = a2, this.index = b2;
      }
      function D(a2, b2, c2, d2) {
        this.score_grid = a2, this.cache_tree = b2, this.score_thresholds = c2, this.order_bonus = d2;
      }
      function E(a2, b2) {
        var c2, d2, e2 = a2.slice();
        for (a2.length = b2, c2 = 0; b2 > c2; c2++)
          a2[c2] = -1;
        for (c2 = 0; c2 < e2.length; c2++)
          d2 = e2[c2], d2 > -1 && b2 > d2 && (a2[d2] = c2);
      }
      a.defaultOptions = { minimum_match: 1, thresh_include: 2, thresh_relative_to_best: 0.5, field_good_enough: 20, bonus_match_start: 0.5, bonus_token_order: 2, bonus_position_decay: 0.7, score_per_token: true, score_test_fused: false, score_acronym: false, token_sep: " .,-:", score_round: 0.1, output_limit: 0, sorter: i, normalize: x, filter: null, output_map: "item", join_str: ", ", token_query_min_length: 2, token_field_min_length: 3, token_query_max_length: 64, token_field_max_length: 64, token_fused_max_length: 64, token_min_rel_size: 0.6, token_max_rel_size: 10, interactive_debounce: 150, interactive_mult: 1.2, interactive_burst: 3, source: [], keys: [], lazy: false, token_re: /\s+/g, identify_item: null, use_index_store: false, store_thresh: 0.7, store_max_results: 1500 };
      var F = { keys: [], tags: [], index: [], index_map: {}, nb_indexed: 0, store: {}, tags_re: null, acro_re: null, token_re: null, options: null, dirty: false, query: null, results: [], start_time: 0, search_time: 0 }, G = 32;
      b.update = function(a2, b2, c2) {
        for (var d2 in c2)
          c2.hasOwnProperty(d2) && b2.hasOwnProperty(d2) && (a2[d2] = void 0 === c2[d2] ? b2[d2] : c2[d2]);
      }, a.setOptions = function(a2, d2, e2, f2, g2, h2) {
        g2 ? (c(a2, f2), a2.options = new b(e2, d2)) : b.update(a2.options, e2, d2), h2.call(a2, d2);
      }, c(a.prototype, { setOptions: function(b2, c2) {
        void 0 === c2 && (c2 = b2.reset || false), a.setOptions(this, b2, a.defaultOptions, F, c2, this._optionsHook);
      }, _optionsHook: function(a2) {
        var b2 = this.options;
        "output_map" in a2 && "string" == typeof a2.output_map && ("alias" === b2.output_map ? b2.output_map = this.aliasResult : b2.output_map = d(b2.output_map, ["root", "."])), this.source = b2.source;
        var c2;
        if ("keys" in a2 && void 0 !== (c2 = a2.keys)) {
          var h2, i2, j2 = Object.prototype.toString.call(c2);
          if (this.tags = null, "[object String]" === j2)
            this.keys = c2.length ? [c2] : [];
          else if ("[object Object]" === j2) {
            this.keys = [], this.tags = [], h2 = 0;
            for (var k2 in c2)
              c2.hasOwnProperty(k2) && (this.tags[h2] = k2, this.keys[h2] = c2[k2], h2++);
          } else
            this.keys = c2;
          for (c2 = this.keys, i2 = c2.length, h2 = -1; ++h2 < i2; )
            c2[h2] = d(c2[h2], ["item", "."]);
          this.tags || (this.tags = c2), this.tags_re = e(this.tags);
        }
        (null === this.acro_re || "acronym_tok" in a2) && (this.acro_re = f(b2.token_sep)), (null === this.token_re || "token_sep" in a2) && (this.token_re = b2.token_re = new RegExp("[" + g(b2.token_sep) + "]+", "g")), (a2.dirty || "source" in a2 || "keys" in a2 || "use_index_store" in a2) && (b2.lazy ? this.dirty = true : (this._buildIndexFromSource(), this.dirty = false));
      } }), c(a.prototype, { getMatchingField: function(b2) {
        var c2 = a.generateFields(b2.item, [this.keys[b2.matchIndex]]);
        return c2[0][b2.subIndex];
      }, aliasResult: function(b2) {
        for (var c2 = this.options, d2 = a.generateFields(b2.item, this.keys), e2 = {}, f2 = this.tags, g2 = c2.join_str, h2 = -1, i2 = d2.length; ++h2 < i2; )
          e2[f2[h2]] = d2[h2].join(g2);
        return e2._item = b2.item, e2._score = b2.score, e2._match = d2[b2.matchIndex][b2.subIndex], e2;
      } }), a.map = function(a2, b2, c2, d2) {
        var e2 = a2.length;
        if (d2 > 0 && e2 > d2 && (e2 = d2), "function" != typeof b2)
          return a2.slice(0, e2);
        for (var f2 = new Array(e2), g2 = -1; ++g2 < e2; )
          f2[g2] = b2.call(c2, a2[g2], g2, a2);
        return f2;
      }, a.mapField = function(a2, b2, c2) {
        var d2 = a2.length;
        if (c2 > 0 && d2 > c2 && (d2 = c2), "" === b2)
          return a2.slice(0, d2);
        var e2, f2, g2 = new Array(d2);
        if (-1 === b2.indexOf("."))
          for (f2 = -1; ++f2 < d2; )
            e2 = a2[f2], b2 in e2 && (g2[f2] = e2[b2]);
        else {
          var h2 = b2.split("."), i2 = h2.length;
          for (f2 = -1; ++f2 < d2; ) {
            e2 = a2[f2];
            for (var j2 = -1; ++j2 < i2; ) {
              var k2 = h2[j2];
              if (!(k2 in e2))
                break;
              e2 = e2[k2];
            }
            g2[f2] = e2;
          }
        }
        return g2;
      }, a.filterGTE = function(a2, b2, c2) {
        for (var d2, e2 = -1, f2 = -1, g2 = a2.length, h2 = []; ++e2 < g2; )
          d2 = a2[e2], d2[b2] >= c2 && (h2[++f2] = d2);
        return h2;
      }, c(a.prototype, { _prepQuery: function(b2) {
        var c2, d2, e2, f2, g2, h2, i2, k2 = this.options, l2 = k2.score_per_token, m2 = k2.score_test_fused, n2 = k2.token_fused_max_length, o2 = k2.token_field_min_length, p2 = k2.token_field_max_length, q2 = this.tags, r2 = this.tags_re, s2 = q2.length, t2 = this.token_re;
        if (l2 && s2 && r2) {
          var u2, v2 = 0, w2 = 0, x2 = new Array(s2 + 1), y2 = r2.exec(b2);
          for (g2 = null !== y2; null !== y2; )
            u2 = y2.index, x2[w2] = b2.substring(v2, u2), v2 = u2 + y2[0].length, w2 = q2.indexOf(y2[1]) + 1, y2 = r2.exec(b2);
          x2[w2] = b2.substring(v2), f2 = [];
          for (var z2 = -1; ++z2 < s2; ) {
            var A2 = x2[z2 + 1];
            A2 && A2.length && (c2 = k2.normalize(A2), d2 = c2.substring(0, n2), e2 = m2 || !l2 ? a.alphabet(d2) : {}, i2 = a.filterSize(c2.split(t2), o2, p2), h2 = a.pack_tokens(i2), f2[z2] = new j(c2, i2, h2, d2, e2, false, []));
          }
          c2 = k2.normalize(x2[0]), i2 = a.filterSize(c2.split(t2), o2, p2), h2 = a.pack_tokens(i2);
        } else
          c2 = k2.normalize(b2), i2 = a.filterSize(c2.split(t2), o2, p2), h2 = l2 ? a.pack_tokens(i2) : [], g2 = false, f2 = new Array(s2);
        return d2 = c2.substring(0, n2), e2 = m2 || !l2 ? a.alphabet(d2) : {}, new j(c2, i2, h2, d2, e2, g2, f2);
      } }), j.prototype.resetItem = function() {
        for (var a2 = this.tokens_groups, b2 = -1, c2 = a2.length; ++b2 < c2; )
          for (var d2 = a2[b2].score_item, e2 = -1, f2 = d2.length; ++e2 < f2; )
            d2[e2] = 0;
        if (this.fused_score = 0, this.has_children)
          for (var g2 = this.children, h2 = -1, i2 = g2.length; ++h2 < i2; ) {
            var j2 = g2[h2];
            j2 && j2.resetItem();
          }
      }, j.prototype.scoreItem = function() {
        for (var a2 = 0, b2 = this.tokens_groups, c2 = -1, d2 = b2.length; ++c2 < d2; )
          for (var e2 = b2[c2].score_item, f2 = -1, g2 = e2.length; ++f2 < g2; )
            a2 += e2[f2];
        if (this.fused_score > a2 && (a2 = this.fused_score), this.has_children)
          for (var h2 = this.children, i2 = -1, j2 = h2.length; ++i2 < j2; ) {
            var k2 = h2[i2];
            k2 && (a2 += k2.scoreItem());
          }
        return a2;
      }, a.alphabet = function(b2) {
        var c2 = b2.length;
        return c2 > G ? a.posVector(b2) : a.bitVector(b2, {}, 0);
      }, a.mapAlphabet = function(b2) {
        for (var c2 = b2.length, d2 = new Array(c2), e2 = -1; ++e2 < c2; ) {
          var f2 = b2[e2];
          f2.length > G ? d2[e2] = a.posVector(f2) : d2[e2] = a.bitVector(f2, {}, 0);
        }
        return d2;
      }, a.bitVector = function(a2, b2, c2) {
        for (var d2, e2 = a2.length, f2 = -1, g2 = c2; ++f2 < e2; )
          d2 = a2[f2], d2 in b2 ? b2[d2] |= 1 << g2++ : b2[d2] = 1 << g2++;
        return b2;
      }, a.posVector = function(a2) {
        for (var b2, c2 = {}, d2 = a2.length, e2 = -1; ++e2 < d2; )
          b2 = a2[e2], b2 in c2 ? c2[b2].push(e2) : c2[b2] = [e2];
        for (b2 in c2)
          c2.hasOwnProperty(b2) && c2[b2].push(1 / 0);
        return c2;
      }, a.pack_tokens = function(b2) {
        for (var c2, d2 = -1, e2 = b2.length, f2 = []; e2 > d2; ) {
          for (var g2 = [], h2 = {}, i2 = 0, j2 = 0; ++d2 < e2; ) {
            var l2 = b2[d2], m2 = l2.length;
            if (m2 >= G) {
              c2 = new k([l2], a.posVector(l2), 4294967295);
              break;
            }
            if (m2 + i2 >= G) {
              d2--;
              break;
            }
            g2.push(l2), a.bitVector(l2, h2, i2), j2 |= (1 << l2.length - 1) - 1 << i2, i2 += m2;
          }
          g2.length > 0 && f2.push(new k(g2, h2, j2)), c2 && (f2.push(c2), c2 = null);
        }
        return f2;
      }, a.prototype.score = function(b2, c2) {
        var d2 = a.alphabet(b2);
        return a.score_map(b2, c2, d2, this.options);
      }, a.score_map = function(b2, c2, d2, e2) {
        var f2, g2, h2 = b2.length, i2 = c2.length, j2 = e2.bonus_match_start, k2 = i2 > h2 ? h2 : i2;
        if (0 === k2)
          return 0;
        var l2 = (h2 + i2) / (2 * h2 * i2), m2 = 0;
        if (b2 === c2)
          m2 = k2;
        else
          for (; b2[m2] === c2[m2] && ++m2 < k2; )
            ;
        if (m2 === k2)
          return g2 = m2, l2 * g2 * g2 + j2 * m2;
        if (h2 > G)
          return g2 = a.llcs_large(b2, c2, d2, m2), l2 * g2 * g2 + j2 * m2;
        var n2, o2, p2 = (1 << h2) - 1, q2 = p2;
        for (f2 = m2 - 1; ++f2 < i2; )
          o2 = c2[f2], o2 in d2 && (n2 = q2 & d2[o2], q2 = q2 + n2 | q2 - n2);
        return p2 &= ~((1 << m2) - 1), q2 = ~q2 & p2, q2 -= q2 >> 1 & 1431655765, q2 = (858993459 & q2) + (q2 >> 2 & 858993459), g2 = 16843009 * (q2 + (q2 >> 4) & 252645135) >> 24, g2 += m2, l2 * g2 * g2 + j2 * m2;
      }, a.score_single = function(b2, c2, d2) {
        var e2 = b2.tokens[0], f2 = e2.length, g2 = c2.length;
        return g2 < d2.token_min_rel_size * f2 || g2 > d2.token_max_rel_size * f2 ? [0] : [a.score_map(e2, c2, b2.map, d2)];
      }, a.score_pack = function(b2, c2, d2) {
        var e2 = b2.tokens, f2 = e2.length;
        if (1 == f2)
          return a.score_single(b2, c2, d2);
        for (var g2, h2, i2 = 4294967295, j2 = 0 | b2.gate, k2 = b2.map, l2 = -1, m2 = c2.length; ++l2 < m2; )
          h2 = c2[l2], h2 in k2 && (g2 = i2 & k2[h2], i2 = (i2 & j2) + (g2 & j2) | i2 - g2);
        i2 = ~i2;
        for (var n2 = d2.bonus_match_start, o2 = d2.token_min_rel_size, p2 = d2.token_max_rel_size, q2 = new Array(f2), r2 = 0, s2 = -1; ++s2 < f2; ) {
          var t2, u2, v2 = e2[s2], w2 = v2.length;
          if (o2 * w2 > m2 || m2 > p2 * w2)
            q2[s2] = 0, r2 += w2;
          else {
            if (v2 === c2)
              u2 = t2 = w2;
            else {
              var x2 = m2 > w2 ? w2 : m2;
              for (u2 = 0; v2[u2] === c2[u2] && ++u2 < x2; )
                ;
              t2 = u2;
              for (var y2 = (i2 >>> r2 & (1 << w2) - 1) >>> u2; y2; )
                y2 &= y2 - 1, t2++;
            }
            r2 += w2;
            var z2 = (w2 + m2) / (2 * w2 * m2);
            q2[s2] = z2 * t2 * t2 + n2 * u2;
          }
        }
        return q2;
      }, a.llcs_large = function(a2, b2, c2, d2) {
        var e2, f2, g2, h2, i2, j2;
        void 0 === d2 && (d2 = 0), g2 = d2 ? [new l(0, d2), new l(1 / 0, 1 / 0)] : [new l(1 / 0, 1 / 0)];
        var k2, m2, n2, o2, p2, q2, r2 = d2, s2 = g2.length, t2 = b2.length;
        for (q2 = d2; t2 > q2; q2++) {
          var u2 = b2[q2];
          if (u2 in c2) {
            k2 = c2[u2];
            var v2 = new Array(Math.min(2 * s2, r2 + 2));
            for (h2 = -1, m2 = 0, f2 = k2[0], j2 = -1, o2 = -1; ++o2 < s2; ) {
              for (i2 = j2, n2 = g2[o2], e2 = n2.start, j2 = n2.end, p2 = j2 - e2; i2 > f2; )
                f2 = k2[++m2];
              f2 >= e2 ? v2[++h2] = n2 : (f2 === i2 ? v2[h2].end++ : 1 === p2 ? (n2.start = f2, n2.end = f2 + 1, v2[++h2] = n2) : v2[++h2] = new l(f2, f2 + 1), p2 > 1 && (n2.start++, v2[++h2] = n2));
            }
            e2 > f2 && (v2[++h2] = n2, r2++), g2 = v2, s2 = ++h2;
          }
        }
        return r2;
      }, c(a.prototype, { search: function(b2) {
        var c2 = Date.now();
        this.start_time = c2;
        var d2 = this.options;
        this.dirty && d2.lazy && (this._buildIndexFromSource(), this.dirty = false);
        var e2 = this.query = this._prepQuery(b2), f2 = this.index, g2 = [];
        d2.use_index_store && (f2 = this._storeSearch(e2, f2)), d2.filter && (f2 = d2.filter.call(this, f2));
        var h2 = this._searchIndex(e2, f2, g2);
        g2 = a.filterGTE(g2, "score", h2), "function" == typeof d2.sorter && (g2 = g2.sort(d2.sorter)), (d2.output_map || d2.output_limit > 0) && (g2 = "function" == typeof d2.output_map ? a.map(g2, d2.output_map, this, d2.output_limit) : a.mapField(g2, d2.output_map, d2.output_limit));
        var i2 = Date.now();
        return this.search_time = i2 - c2, this.results = g2, g2;
      }, _searchIndex: function(b2, c2, d2) {
        for (var e2 = this.options, f2 = e2.bonus_position_decay, g2 = e2.field_good_enough, i2 = e2.thresh_relative_to_best, j2 = e2.score_per_token, k2 = e2.score_round, l2 = e2.thresh_include, m2 = 0, n2 = b2.children, o2 = -1, p2 = c2.length; ++o2 < p2; ) {
          var q2 = c2[o2], r2 = q2.fields;
          b2.resetItem();
          for (var s2 = 0, t2 = -1, u2 = -1, v2 = 1, w2 = -1, x2 = r2.length; ++w2 < x2; ) {
            for (var y2 = 0, z2 = -1, A2 = r2[w2], B2 = n2[w2], C2 = !!B2, D2 = -1, E2 = A2.length; ++D2 < E2; ) {
              var F2, G2 = A2[D2];
              j2 ? (F2 = this._scoreField(G2, b2), C2 && (F2 += this._scoreField(G2, B2))) : F2 = a.score_map(b2.fused_str, G2.join(" "), b2.fused_map, e2), F2 > y2 && (y2 = F2, z2 = D2);
            }
            if (y2 *= 1 + v2, v2 *= f2, y2 > s2 && (s2 = y2, t2 = w2, u2 = z2, y2 > g2))
              break;
          }
          if (j2) {
            var H2 = b2.scoreItem();
            s2 = 0.5 * s2 + 0.5 * H2;
          }
          if (s2 > m2) {
            m2 = s2;
            var I = s2 * i2;
            I > l2 && (l2 = I);
          }
          s2 > l2 && (s2 = Math.round(s2 / k2) * k2, d2.push(new h(q2.item, r2, s2, t2, u2, r2[0][0].join(" "))));
        }
        return l2;
      }, _scoreField: function(b2, c2) {
        var d2 = c2.tokens_groups, e2 = d2.length, f2 = b2.length;
        if (!e2 || !f2)
          return 0;
        for (var g2, h2, i2, j2, k2, l2 = 0, m2 = -1, n2 = this.options, o2 = n2.bonus_token_order, p2 = n2.minimum_match, q2 = -1; ++q2 < e2; ) {
          var r2 = d2[q2], s2 = r2.tokens.length, t2 = r2.score_field;
          for (k2 = -1; ++k2 < s2; )
            t2[k2] = 0;
          var u2 = r2.field_pos;
          for (k2 = -1; ++k2 < s2; )
            u2[k2] = 0;
          for (var v2 = -1; ++v2 < f2; )
            for (i2 = b2[v2], j2 = a.score_pack(r2, i2, n2), k2 = -1; ++k2 < s2; )
              g2 = j2[k2], h2 = t2[k2], (g2 > h2 || o2 > h2 - g2 && k2 > 0 && u2[k2] <= u2[k2 - 1]) && (t2[k2] = g2, u2[k2] = v2);
          var w2 = r2.score_item;
          for (k2 = -1; ++k2 < s2; ) {
            if (g2 = t2[k2], l2 += g2, g2 > p2) {
              var x2 = u2[k2], y2 = x2 - m2, z2 = o2 * (1 / (1 + Math.abs(y2)));
              y2 > 0 && (z2 *= 2), l2 += z2, g2 += z2, m2 = x2;
            }
            g2 > w2[k2] && (w2[k2] = g2);
          }
        }
        if (n2.score_test_fused) {
          for (var A2 = n2.score_acronym ? f2 - 1 : f2, B2 = b2[0], C2 = 0; ++C2 < A2; )
            B2 += " " + b2[C2];
          var D2 = a.score_map(c2.fused_str, B2, c2.fused_map, n2);
          D2 += o2, l2 = D2 > l2 ? D2 : l2, D2 > c2.fused_score && (c2.fused_score = D2);
        }
        return l2;
      } }), c(a.prototype, { _prepItem: function(b2, c2) {
        for (var d2 = a.generateFields(b2, c2), e2 = d2.length, f2 = -1; ++f2 < e2; )
          for (var g2 = d2[f2], h2 = -1, i2 = g2.length; ++h2 < i2; ) {
            var j2 = this.options.normalize(g2[h2]), k2 = j2.split(this.token_re);
            j2.length > 2 * this.options.token_field_min_length && (k2 = a.filterSize(k2, this.options.token_field_min_length, this.options.token_field_max_length)), this.options.score_acronym && k2.push(j2.replace(this.acro_re, "$1")), g2[h2] = k2;
          }
        return new m(b2, d2);
      }, add: function(a2, b2) {
        void 0 === b2 && (b2 = true);
        var c2, d2 = "function" == typeof this.options.identify_item ? this.options.identify_item(a2) : null;
        null === d2 ? (c2 = this.nb_indexed, this.nb_indexed++) : d2 in this.index_map ? c2 = this.index_map[d2] : (this.index_map[d2] = this.nb_indexed, c2 = this.nb_indexed, this.nb_indexed++);
        var e2 = this._prepItem(a2, this.keys);
        this.index[c2] = e2, b2 && (this.source[c2] = a2), this.options.use_index_store && this._storeAdd(e2, c2);
      }, _buildIndexFromSource: function() {
        var a2 = this.source.length;
        this.index = new Array(a2), this.index_map = {}, this.nb_indexed = 0;
        for (var b2 = -1; ++b2 < a2; ) {
          var c2 = this.source[b2];
          this.add(c2, false);
        }
      } }), a.generateFields = function(a2, b2) {
        if (!b2 || !b2.length)
          return [[a2.toString()]];
        for (var c2 = b2.length, d2 = new Array(c2), e2 = -1; ++e2 < c2; )
          d2[e2] = n(a2, b2[e2].split("."), [], 0);
        return d2;
      }, c(a.prototype, { _storeAdd: function(a2, b2) {
        var c2 = p(a2);
        if (0 != c2.length)
          for (var d2 = 0; d2 < c2.length; d2++) {
            var e2 = c2[d2];
            e2 in this.store ? this.store[e2].push(b2) : this.store[e2] = [b2];
          }
      }, _storeSearch: function(b2, c2) {
        var d2 = q(b2);
        if (0 == d2.length)
          return [];
        var e2 = v(d2, this.store);
        if (0 == e2.length)
          return [];
        var f2 = e2[0].count * this.options.store_thresh;
        return e2 = a.filterGTE(e2, "count", f2), a.map(e2, function(a2) {
          return c2[a2.id];
        }, this, this.options.store_max_results);
      } });
      var H = y();
      return a.filterSize = function(a2, b2, c2) {
        for (var d2, e2, f2 = -1, g2 = -1, h2 = a2.length, i2 = []; ++f2 < h2; )
          d2 = a2[f2], e2 = d2.length, e2 >= b2 && (i2[++g2] = c2 > e2 ? d2 : d2.substr(0, c2));
        return i2;
      }, c(a.defaultOptions, { highlight_prefix: false, highlight_bridge_gap: 2, highlight_before: '<strong class="highlight">', highlight_after: "</strong>" }), a.prototype.highlight = function(b2, c2) {
        var d2, e2, f2 = this.query.normalized;
        return c2 && c2.length && (d2 = this.tags.indexOf(c2)) > -1 && (e2 = this.query.children[d2]) && (f2 += (f2.length ? " " : "") + e2.normalized), a.highlight(f2, b2, this.options);
      }, a.highlight = function(b2, c2, d2) {
        if (void 0 === d2 && (d2 = a.defaultOptions), !c2)
          return "";
        var e2 = d2.highlight_before, f2 = d2.highlight_after, g2 = d2.score_per_token, h2 = d2.score_test_fused, i2 = d2.score_acronym, j2 = d2.token_re, k2 = d2.normalize(b2), l2 = d2.normalize(c2), m2 = k2.split(j2), n2 = l2.split(j2), o2 = [], p2 = [];
        z(c2, j2, o2, p2);
        var q2 = [], r2 = [], s2 = 0, t2 = 0;
        if (g2 && (t2 = a.matchTokens(n2, m2, r2, d2, false)), (h2 || !g2 || i2) && (s2 = a.score_map(k2, l2, a.alphabet(k2), d2) + d2.bonus_token_order), 0 === t2 && 0 === s2)
          return c2;
        (!g2 || s2 > t2) && (m2 = [k2], n2 = [l2], o2 = [c2], r2 = [0]);
        for (var u2 = o2.length, v2 = -1; ++v2 < u2; ) {
          var w2 = r2[v2];
          if (-1 !== w2) {
            var x2 = m2[w2], y2 = n2[v2], A2 = o2[v2], B2 = 0, C2 = [], D2 = [];
            a.align(x2, y2, C2, D2);
            for (var E2 = C2.length, F2 = -1; ++F2 < E2; ) {
              var G2 = C2[F2], H2 = D2[F2];
              G2 > B2 && q2.push(A2.substring(B2, G2)), q2.push(e2 + A2.substring(G2, H2) + f2), B2 = H2;
            }
            q2.push(A2.substring(B2) + p2[v2]);
          } else
            q2.push(o2[v2] + p2[v2]);
        }
        return q2.join("");
      }, a.align = function(b2, c2, d2, e2, f2) {
        void 0 === f2 && (f2 = a.defaultOptions);
        var g2, h2, i2 = 100, j2 = -10, k2 = -1, l2 = 0, m2 = 1, n2 = 2, o2 = 3, p2 = f2.score_acronym, q2 = f2.token_sep, r2 = Math.min(b2.length + 1, f2.token_query_max_length), s2 = Math.min(c2.length + 1, f2.token_field_max_length), t2 = s2 > r2 ? r2 : s2, u2 = 0;
        if (b2 === c2)
          u2 = r2, r2 = 0;
        else if (f2.highlight_prefix) {
          for (g2 = 0; t2 > g2 && b2[g2] === c2[g2]; g2++)
            u2++;
          u2 && (b2 = b2.substring(u2), c2 = c2.substring(u2), r2 -= u2, s2 -= u2);
        }
        var v2 = 0, w2 = 0, x2 = 0, y2 = new Array(r2 * s2), z2 = s2 - 1;
        if (r2 > 1 && s2 > 1) {
          var A2, B2, C2, D2, E2 = new Array(s2), F2 = new Array(s2), G2 = 0;
          for (h2 = 0; s2 > h2; h2++)
            F2[h2] = 0, E2[h2] = 0, y2[h2] = l2;
          for (g2 = 1; r2 > g2; g2++)
            for (G2 = 0, A2 = E2[0], z2++, y2[z2] = l2, h2 = 1; s2 > h2; h2++)
              switch (D2 = F2[h2] = Math.max(F2[h2] + k2, E2[h2] + j2), G2 = Math.max(G2 + k2, E2[h2 - 1] + j2), C2 = p2 ? b2[g2 - 1] !== c2[h2 - 1] ? -(1 / 0) : A2 + i2 + (2 > g2 || q2.indexOf(b2[g2 - 2]) > -1 ? i2 : 0) + (2 > h2 || q2.indexOf(c2[h2 - 2]) > -1 ? i2 : 0) : b2[g2 - 1] === c2[h2 - 1] ? A2 + i2 : -(1 / 0), A2 = E2[h2], B2 = E2[h2] = Math.max(C2, D2, G2, 0), z2++, B2) {
                case G2:
                  y2[z2] = n2;
                  break;
                case C2:
                  y2[z2] = o2, B2 > v2 && (v2 = B2, w2 = g2, x2 = h2);
                  break;
                case D2:
                  y2[z2] = m2;
                  break;
                default:
                  y2[z2] = l2;
              }
        }
        var H2 = f2.highlight_bridge_gap, I = 0;
        if (v2 > 0) {
          g2 = w2, h2 = x2, z2 = g2 * s2 + h2, I = x2, e2.push(x2 + u2);
          for (var J = true; J; )
            switch (y2[z2]) {
              case m2:
                g2--, z2 -= s2;
                break;
              case n2:
                h2--, z2--;
                break;
              case o2:
                I - h2 > H2 && (d2.push(I + u2), e2.push(h2 + u2)), h2--, g2--, I = h2, z2 -= s2 + 1;
                break;
              case l2:
              default:
                J = false;
            }
          d2.push(I + u2);
        }
        return u2 && (I > 0 && H2 >= I ? d2[d2.length - 1] = 0 : (d2.push(0), e2.push(u2))), d2.reverse(), e2.reverse(), v2 + u2;
      }, a.matchTokens = function(b2, c2, d2, e2, f2) {
        void 0 === e2 && (e2 = a.defaultOptions), void 0 === f2 && (f2 = false);
        var g2, h2, i2, j2, k2, l2, m2, n2 = e2.minimum_match, o2 = e2.thresh_relative_to_best, p2 = [], q2 = b2.length, r2 = c2.length, s2 = a.mapAlphabet(b2), t2 = n2, u2 = -1, v2 = -1, w2 = 0, x2 = [];
        for (g2 = 0; q2 > g2; g2++)
          if (i2 = [], d2[g2] = -1, t2 = n2, j2 = b2[g2], j2.length) {
            for (l2 = s2[g2], h2 = 0; r2 > h2; h2++)
              k2 = c2[h2], k2.length ? (m2 = a.score_map(j2, k2, l2, e2), i2[h2] = m2, m2 > n2 && w2++, m2 > t2 && (t2 = m2, u2 = g2, v2 = h2)) : i2[h2] = 0;
            x2[g2] = t2, p2[g2] = i2;
          } else {
            for (h2 = 0; r2 > h2; h2++)
              i2[h2] = 0;
            p2[g2] = i2;
          }
        if (0 === w2)
          return 0;
        if (1 === w2)
          return d2[u2] = v2, f2 && E(d2, r2), t2;
        for (g2 = 0; g2 < b2.length; g2++)
          x2[g2] = Math.max(o2 * x2[g2], n2);
        var y2 = A(p2, d2, x2, e2.bonus_token_order);
        return f2 && E(d2, r2), y2;
      }, c(a.prototype, { getInteractive: function() {
        var a2 = this, b2 = this.options, c2 = b2.interactive_debounce, d2 = b2.interactive_mult, e2 = b2.interactive_burst;
        if (0 === c2)
          return function(b3, c3, d3, e3) {
            return c3(a2.search(b3));
          };
        var f2, g2, h2 = window.performance && window.performance.now ? window.performance : Date, i2 = 0, j2 = false;
        return function(b3, k2, l2, m2) {
          var n2 = function() {
            f2 = null, j2 && (g2 = a2.search(b3), m2(g2)), i2 = 0, j2 = false;
          };
          if (clearTimeout(f2), f2 = setTimeout(n2, c2), ++i2 < e2) {
            j2 = false;
            var o2 = h2.now();
            g2 = a2.search(b3);
            var p2 = k2(g2), q2 = h2.now();
            return c2 = 0.5 * c2 + 0.5 * d2 * (q2 - o2), p2;
          }
          return j2 = true, l2(g2);
        };
      }, __ttAdapter: function() {
        var a2 = this.getInteractive(), b2 = function(a3) {
        };
        return function(c2, d2, e2) {
          a2(c2, d2, b2, e2);
        };
      }, $uiSource: function() {
        var a2 = this.getInteractive(), b2 = function(a3) {
        };
        return function(c2, d2) {
          a2(c2.term, d2, b2, d2);
        };
      } }), "function" == typeof require && "undefined" != typeof module2 && module2.exports ? module2.exports = a : "function" == typeof define && define.amd ? define(function() {
        return a;
      }) : window.FuzzySearch = a, a;
    }();
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => BetterMathjaxPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/mathjax-suggest.ts
var import_obsidian2 = require("obsidian");

// src/logger.ts
var Logger = class {
  constructor() {
  }
  static get instance() {
    if (!Logger._instance) {
      Logger._instance = new Logger();
    }
    return Logger._instance;
  }
  setConsoleLogEnabled(enabled) {
    this.consoleLogEnabled = enabled;
    this.info("BetterMathjax Debug Log Enabled:", enabled);
  }
  log(...args) {
    console.log("[DEBUG]", new Date().toLocaleTimeString(), ...args);
  }
  info(...args) {
    if (this.consoleLogEnabled) {
      this.log("INFO:", ...args);
    }
  }
  error(...args) {
    this.log("ERROR: ", ...args);
  }
};

// src/commands.ts
var import_obsidian = require("obsidian");
function selectNextSuggestCommand(latexSuggest) {
  return {
    id: "select-next-suggestion",
    name: "Select next suggestion",
    hotkeys: [],
    repeatable: true,
    editorCallback: (_) => {
      latexSuggest.selectNextSuggestion();
    }
  };
}
function selectPreviousSuggestCommand(latexSuggest) {
  return {
    id: "select-previous-suggestion",
    name: "Select previous suggestion",
    hotkeys: [],
    repeatable: true,
    editorCallback: (_) => {
      latexSuggest.selectPreviousSuggestion();
    }
  };
}
function selectNextPlaceholderCommand(latexSuggest) {
  return {
    id: "better-mathjax-select-next-placeholder",
    name: "Select next placeholder",
    repeatable: true,
    editorCallback: (_) => {
      latexSuggest.selectNextPlaceholder();
    }
  };
}
function selectPreviousPlaceholderCommand(latexSuggest) {
  return {
    id: "better-mathjax-select-previous-placeholder",
    name: "Select previous placeholder",
    repeatable: true,
    editorCallback: (_) => {
      latexSuggest.selectPreviousPlaceholder();
    }
  };
}
function showMathjaxHelperOnCurrentSelection(latexSuggestions) {
  return {
    id: "better-mathjax-show-mathjax-helper-on-current-selection",
    name: "Show mathjax helper on current selection",
    repeatable: true,
    editorCallback: (_) => {
      latexSuggestions.showMathjaxHelperOnCurrentSelection();
    }
  };
}
function insertSubscriptPlaceholder(mathjaxSuggest, settings) {
  return {
    id: "better-mathjax-insert-subscript-placeholder-bracket",
    name: "Insert subscript",
    repeatable: true,
    editorCallback: (editor, view) => {
      const cursor = editor.getCursor();
      if (settings.matchingSubScript && mathjaxSuggest.enabled) {
        editor.replaceRange("_{@1@}", cursor);
        mathjaxSuggest.selectNextPlaceholder();
      }
    }
  };
}
function insertSuperscriptPlaceholder(mathjaxSuggest, settings) {
  return {
    id: "better-mathjax-insert-superscript-placeholder-bracket",
    name: "Insert superscript",
    repeatable: true,
    editorCallback: (editor, view) => {
      Logger.instance.info("Inserting superscript");
      const cursor = editor.getCursor();
      if (settings.matchingSuperScript && mathjaxSuggest.enabled) {
        editor.replaceRange("^{@1@}", cursor);
        mathjaxSuggest.selectNextPlaceholder();
      }
    }
  };
}
function reloadUserDefinedFile(mathjaxHelper) {
  return {
    id: "better-mathjax-reload-user-defined-file",
    name: "Reload user defined file",
    repeatable: true,
    editorCallback: (editor, view) => {
      mathjaxHelper.readUserDefinedSymbols().then(() => {
        new import_obsidian.Notice("User defined file reloaded");
      });
    }
  };
}
function addSubSuperScriptCommand(plugin, mathjaxSuggest, settings) {
  plugin.addCommand(insertSubscriptPlaceholder(mathjaxSuggest, settings));
  plugin.addCommand(insertSuperscriptPlaceholder(mathjaxSuggest, settings));
}
function removeSubSuperScriptCommand(plugin) {
  plugin.app.commands.removeCommand("better-mathjax:better-mathjax-insert-superscript-placeholder-bracket");
  plugin.app.commands.removeCommand("better-mathjax:better-mathjax-insert-subscript-placeholder-bracket");
}

// src/priority-queue.ts
var top = 0;
var parent = (i) => (i + 1 >>> 1) - 1;
var left = (i) => (i << 1) + 1;
var right = (i) => i + 1 << 1;
var PriorityQueue = class {
  constructor(comparator = (a, b) => a > b) {
    this._heap = [];
    this._comparator = comparator;
  }
  size() {
    return this._heap.length;
  }
  isEmpty() {
    return this.size() == 0;
  }
  peek() {
    return this._heap[top];
  }
  push(...values) {
    values.forEach((value) => {
      this._heap.push(value);
      this._siftUp();
    });
    return this.size();
  }
  pop() {
    const poppedValue = this.peek();
    const bottom = this.size() - 1;
    if (bottom > top) {
      this._swap(top, bottom);
    }
    this._heap.pop();
    this._siftDown();
    return poppedValue;
  }
  replace(value) {
    const replacedValue = this.peek();
    this._heap[top] = value;
    this._siftDown();
    return replacedValue;
  }
  _greater(i, j) {
    return this._comparator(this._heap[i], this._heap[j]);
  }
  _swap(i, j) {
    [this._heap[i], this._heap[j]] = [this._heap[j], this._heap[i]];
  }
  _siftUp() {
    let node = this.size() - 1;
    while (node > top && this._greater(node, parent(node))) {
      this._swap(node, parent(node));
      node = parent(node);
    }
  }
  _siftDown() {
    let node = top;
    while (left(node) < this.size() && this._greater(left(node), node) || right(node) < this.size() && this._greater(right(node), node)) {
      const maxChild = right(node) < this.size() && this._greater(right(node), left(node)) ? right(node) : left(node);
      this._swap(node, maxChild);
      node = maxChild;
    }
  }
};

// src/fuzzy-search-dld.ts
function damerauLevenshteinDistance(source, target) {
  if (!source || source.length === 0) {
    if (!target || target.length === 0) {
      return 0;
    } else {
      return target.length;
    }
  } else if (!target) {
    return source.length;
  }
  const sourceLength = source.length;
  const targetLength = target.length;
  const distanceMatrix = [];
  const INF = sourceLength + targetLength;
  distanceMatrix[0] = [INF];
  for (let i = 0; i <= sourceLength; i++) {
    distanceMatrix[i + 1] = [];
    distanceMatrix[i + 1][1] = i;
    distanceMatrix[i + 1][0] = INF;
  }
  for (let j = 0; j <= targetLength; j++) {
    distanceMatrix[1][j + 1] = j;
    distanceMatrix[0][j + 1] = INF;
  }
  const lastMatchedRowOfTheCharacter = {};
  for (let row = 1; row <= sourceLength; row++) {
    const sourceChar = source[row - 1];
    let lastMatchedColumnIndex = 0;
    for (let col = 1; col <= targetLength; col++) {
      const targetChar = target[col - 1];
      if (lastMatchedRowOfTheCharacter[targetChar] === void 0) {
        lastMatchedRowOfTheCharacter[targetChar] = 0;
      }
      const lastMatchedRow = lastMatchedRowOfTheCharacter[targetChar];
      const cost = sourceChar === targetChar ? 0 : 1;
      const distaneAdding = distanceMatrix[row][col + 1] + 1;
      const distanceRemoving = distanceMatrix[row + 1][col] + 1;
      const distanceSubstitution = distanceMatrix[row][col] + cost;
      const distanceTransposition = distanceMatrix[lastMatchedRow][lastMatchedColumnIndex] + (row - lastMatchedRow - 1) + 1 + (col - lastMatchedColumnIndex - 1);
      distanceMatrix[row + 1][col + 1] = Math.min(distaneAdding, distanceRemoving, distanceSubstitution, distanceTransposition);
      if (cost === 0) {
        lastMatchedColumnIndex = col;
      }
    }
    lastMatchedRowOfTheCharacter[sourceChar] = row;
  }
  return distanceMatrix[sourceLength + 1][targetLength + 1];
}
function dld(source, target) {
  const distance = damerauLevenshteinDistance(source, target);
  const ratio = 1 - distance / (source.length + target.length);
  return ratio;
}

// src/mathjax-search.ts
var import_fz_search = __toESM(require_FuzzySearch_min());
function getSymbolFromQuery(pair) {
  const newSymbol = JSON.parse(JSON.stringify(pair.originalSymbol));
  if (newSymbol == null) {
    if (pair.userSymbol == null) {
      throw new Error("Both symbols are null");
    }
    return pair.userSymbol;
  }
  if (pair.userSymbol) {
    if (pair.userSymbol.description !== "") {
      newSymbol.description = pair.userSymbol.description;
    }
    if (String.isString(pair.userSymbol.examples) && pair.userSymbol.examples !== "" || Array.isArray(pair.userSymbol.examples) && pair.userSymbol.examples.length > 0) {
      newSymbol.examples = pair.userSymbol.examples;
    }
    if (Array.isArray(pair.userSymbol.see_also) && pair.userSymbol.see_also.length > 0) {
      newSymbol.see_also = pair.userSymbol.see_also;
    }
    if (pair.userSymbol.snippet !== "") {
      newSymbol.snippet = pair.userSymbol.snippet;
    }
  }
  return newSymbol;
}
var MathjaxSearch = class {
  constructor(settings) {
    this.data = /* @__PURE__ */ new Map();
    this.settings = settings;
  }
  load(data) {
    this.data = new Map(data.map((item) => [item.name, { name: item.name, originalSymbol: item, userSymbol: null }]));
    Logger.instance.info("Loaded Mathjax symbols. Size: ", this.data.size);
  }
  update(newData) {
    newData.forEach((newSymbol, key) => {
      if (this.data.has(key)) {
        const symbolQuery = this.data.get(key);
        if (symbolQuery) {
          symbolQuery.userSymbol = newSymbol;
        }
      } else {
        this.data.set(key, { name: key, originalSymbol: null, userSymbol: newSymbol });
      }
    });
  }
  search(query, limit = 5) {
    switch (this.settings.fuzzySearchType) {
      case "DLD":
        return this.searchDld(query, limit);
      case "LCS":
        return this.searchLcs(query, limit);
      default:
        return this.searchLcs(query, limit);
    }
  }
  searchDld(query, limit = 5) {
    const queue = new PriorityQueue((a, b) => a.distance > b.distance);
    this.data.forEach((item) => {
      queue.push({
        item,
        distance: dld(query, item.name)
      });
    });
    const result = [];
    while (!queue.isEmpty() && limit > 0) {
      const symbol = queue.pop().item;
      result.push(symbol);
      limit--;
    }
    return result;
  }
  searchLcs(query, limit = 5) {
    const values = Array.from(this.data.values());
    const searcher = new import_fz_search.default({ source: values, keys: ["name"], output_limit: limit, normalize: (string) => {
      return string;
    } });
    return searcher.search(query);
  }
};

// src/mathjax-suggest.ts
var MathjaxSuggest = class extends import_obsidian2.EditorSuggest {
  constructor(plugin, settings, mathjaxHelper) {
    super(plugin.app);
    this.plugin = plugin;
    this.mathjaxHelper = mathjaxHelper;
    this.settings = settings;
    this.startup = true;
  }
  getSuggestions(context) {
    return this.mathjaxHelper.search(context.query, this.settings.maxSuggestionNumber);
  }
  onTrigger(cursor, editor, file) {
    if (this.startup) {
      this.mathjaxHelper.readUserDefinedSymbols().then(() => {
        Logger.instance.info("Startup finished");
        this.startup = false;
      });
    }
    if (this.suggestionTired) {
      this.suggestionTired = false;
      return null;
    }
    this.editor = editor;
    this.enabled = false;
    if (this.settings.forceEnabling) {
      this.enabled = true;
    } else {
      if (this.settings.autoEnabling) {
        const text = this.getTextBeforeCursor(cursor);
        this.enabled = this.checkMathjaxEnvironment(text);
      }
      if (!this.enabled) {
        removeSubSuperScriptCommand(this.plugin);
        return null;
      }
    }
    addSubSuperScriptCommand(this.plugin, this, this.settings);
    const word = this.getWord(this.getCurrentLineBeforeCursor(cursor));
    this.startPos = { line: cursor.line, ch: cursor.ch - word.length };
    this.endPos = cursor;
    if (word !== "") {
      return { start: this.startPos, end: cursor, query: word };
    }
    return null;
  }
  async renderSuggestion(suggestion, el) {
    const symbol = getSymbolFromQuery(suggestion);
    el.setText(symbol.name);
    const mathSpan = el.createSpan();
    try {
      let example = symbol.name;
      if (typeof symbol.examples === "string" && symbol.examples !== "") {
        example = symbol.examples;
      } else if (Array.isArray(symbol.examples) && symbol.examples.length > 0) {
        example = symbol.examples[0];
      }
      const mathEl = (0, import_obsidian2.renderMath)(example, false);
      await (0, import_obsidian2.finishRenderMath)();
      mathSpan.addClass("better-mathjax-suggestion-math-entry");
      mathSpan.appendChild(mathEl);
    } catch (ReferenceError) {
      new import_obsidian2.Notice("Error rendering mathjax");
      Logger.instance.error("Error rendering mathjax");
    }
  }
  selectSuggestion(suggestion, evt) {
    const symbol = getSymbolFromQuery(suggestion);
    const pos = this.startPos;
    if (this.settings.useSnippetFirst && symbol.snippet !== void 0 && symbol.snippet !== "") {
      this.editor.replaceRange(symbol.snippet, this.startPos, this.endPos);
      this.editor.setCursor(pos);
      this.selectNextPlaceholder();
    } else {
      this.editor.replaceRange(symbol.name, pos, this.endPos);
    }
    this.close();
    this.suggestionTired = true;
  }
  getCurrentLineBeforeCursor(pos) {
    return this.editor.getLine(pos.line).slice(0, pos.ch);
  }
  // Function to get the text before the cursor and after a backslash
  // if there is one space before the cursor and after the backslash
  // then return ""
  getWord(text) {
    const regex = /(\\\w+)$/;
    const match = text.match(regex);
    if (!match) {
      return "";
    }
    return match[1];
  }
  getTextBeforeCursor(pos) {
    let text = "";
    for (let i = 0; i < pos.line; i++) {
      text += this.editor.getLine(i) + " ";
    }
    text += this.getCurrentLineBeforeCursor(pos);
    return text;
  }
  checkMathjaxEnvironment(text) {
    const stack = [];
    const regex = /(\$\$|\$)/g;
    let match;
    while ((match = regex.exec(text)) !== null) {
      if (stack.length === 0) {
        stack.push(match[1]);
      } else {
        if (stack[stack.length - 1] === match[1]) {
          stack.pop();
        } else {
          stack.push(match[1]);
        }
      }
    }
    return stack.length !== 0;
  }
  selectNextSuggestion() {
    this.suggestions.setSelectedItem(this.suggestions.selectedItem + 1, new KeyboardEvent("keydown"));
  }
  selectPreviousSuggestion() {
    this.suggestions.setSelectedItem(this.suggestions.selectedItem - 1, new KeyboardEvent("keydown"));
  }
  selectNextPlaceholder() {
    const pos = this.editor.getCursor();
    if (this.editor.somethingSelected()) {
      const selectedText = this.editor.getSelection();
      pos.ch += selectedText.length - 1;
    }
    const currentLineNumber = pos.line;
    const maxLineNumber = this.editor.lastLine();
    let bracketPositions;
    let firstBracketPosition = true;
    for (let lineNumber = currentLineNumber; lineNumber <= maxLineNumber; lineNumber++) {
      let line = "";
      if (lineNumber !== currentLineNumber) {
        line = this.editor.getLine(lineNumber);
      } else {
        line = this.editor.getLine(lineNumber).slice(pos.ch);
      }
      Logger.instance.info("lineNumber:", lineNumber);
      Logger.instance.info("currentLineNumber:", currentLineNumber);
      Logger.instance.info("pos.ch:", pos.ch);
      const placeHolderRegex = /@(\S)@/g;
      let match;
      if ((match = placeHolderRegex.exec(line)) !== null) {
        Logger.instance.info("Placeholder found");
        const placeholderStartPos = { line: lineNumber, ch: pos.ch + match.index };
        const placeholderEndPos = { line: lineNumber, ch: pos.ch + match.index + match[0].length };
        this.editor.setSelection(placeholderStartPos, placeholderEndPos);
        return;
      }
      const endBracketRegex = /}/g;
      while ((match = endBracketRegex.exec(line)) !== null && firstBracketPosition) {
        Logger.instance.info("End bracket found");
        bracketPositions = { line: lineNumber, ch: pos.ch + match.index + 1 };
        firstBracketPosition = false;
      }
      pos.ch = 0;
    }
    if (bracketPositions) {
      this.editor.setCursor(bracketPositions);
    }
  }
  selectPreviousPlaceholder() {
    const pos = this.editor.getCursor();
    if (this.editor.somethingSelected()) {
      const selectedText = this.editor.getSelection();
      pos.ch -= selectedText.length - 1;
    }
    const currentLineNumber = pos.line;
    const minLineNumber = 0;
    for (let lineNumber = currentLineNumber; lineNumber >= minLineNumber; lineNumber--) {
      let line = "";
      if (lineNumber !== currentLineNumber) {
        line = this.editor.getLine(lineNumber);
      } else {
        line = this.editor.getLine(lineNumber).slice(0, pos.ch);
      }
      const regex = /@(\d+)@/g;
      let match;
      let lastMatch;
      while ((match = regex.exec(line)) !== null) {
        lastMatch = match;
      }
      if (lastMatch !== void 0) {
        const placeholderStartPos = { line: lineNumber, ch: lastMatch.index };
        const placeholderEndPos = { line: lineNumber, ch: lastMatch.index + lastMatch[0].length };
        this.editor.setSelection(placeholderStartPos, placeholderEndPos);
        return;
      }
    }
  }
  showMathjaxHelperOnCurrentSelection() {
    const selectedIndex = this.suggestions.selectedItem;
    this.mathjaxHelper.showHelperBySelectedItemIndex(selectedIndex);
  }
};

// src/settings.ts
var import_obsidian3 = require("obsidian");
var DEFAULT_SETTINGS = {
  //auto suggestion settings
  useSnippetFirst: true,
  maxSuggestionNumber: 5,
  alwaysShowExamples: true,
  autoEnabling: true,
  forceEnabling: false,
  // quick pairing
  matchingSubScript: true,
  matchingSuperScript: true,
  // user defined symbols
  userDefinedSymbols: /* @__PURE__ */ new Map(),
  userDefineSymbolFilePath: "symbols.md",
  // fuzzy search type
  fuzzySearchType: "LCS",
  // misc
  debugMode: false
};
var BetterMathjaxSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
    this.lastNoticeTime = 0;
  }
  showNotice(message, timeout = 3e3) {
    if (Date.now() - this.lastNoticeTime > timeout) {
      new import_obsidian3.Notice(message);
      this.lastNoticeTime = Date.now();
    }
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for BetterMathjax." });
    new import_obsidian3.Setting(containerEl).setName("Use snippet first").setDesc("Snippet will always be used for autocompletion instead of the symbol name unless the snippet is not provided.").addToggle((toggle) => toggle.setValue(this.plugin.settings.useSnippetFirst).onChange(
      async (value) => {
        this.plugin.settings.useSnippetFirst = value;
        await this.plugin.saveSettings();
      }
    ));
    new import_obsidian3.Setting(containerEl).setName("Max suggestion number").setDesc("Maximum number of suggestions to show").addText((text) => text.setValue(this.plugin.settings.maxSuggestionNumber.toString()).onChange(async (value) => {
      this.plugin.settings.maxSuggestionNumber = parseInt(value);
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Always show examples").setDesc("Always show example even when not provided, this may lead to mathjax rendering issues").addToggle((toggle) => toggle.setValue(this.plugin.settings.alwaysShowExamples).onChange(async (value) => {
      this.plugin.settings.alwaysShowExamples = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Auto enabling").setDesc("Enable the autocompletion automatically when inside $ (inline) or $$ (multiple lines)").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoEnabling).onChange(async (value) => {
      this.plugin.settings.autoEnabling = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Force enabling").setDesc("Always enable the autocompletion (even when not inside $ or $$)").addToggle((toggle) => toggle.setValue(this.plugin.settings.forceEnabling).onChange(async (value) => {
      this.plugin.settings.forceEnabling = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Matching super script").setDesc("Match the super script when typing").addToggle((toggle) => toggle.setValue(this.plugin.settings.matchingSuperScript).onChange(async (value) => {
      this.plugin.settings.matchingSuperScript = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Matching sub script").setDesc("Match the sub script when typing").addToggle((toggle) => toggle.setValue(this.plugin.settings.matchingSubScript).onChange(async (value) => {
      this.plugin.settings.matchingSubScript = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("User defined symbols filepath").setDesc("The file that contains the user defined symbols (must be markdown file)").addText((text) => text.setValue(this.plugin.settings.userDefineSymbolFilePath).setPlaceholder("user-defined-symbols.md").onChange(async (value) => {
      if (value.match(/.*\.md$/)) {
        this.plugin.settings.userDefineSymbolFilePath = value;
        await this.plugin.saveSettings();
      } else {
        this.showNotice("The file should be a markdown file, otherwise it may not appear in the Obsidian file explorer.", 3e3);
      }
    })).addButton((button) => button.setButtonText("Generate").onClick(async () => {
      const file = this.app.vault.getAbstractFileByPath(this.plugin.settings.userDefineSymbolFilePath);
      if (file instanceof import_obsidian3.TFile) {
        const content = await this.app.vault.read(file);
        if (content && content.trim() === "") {
          new import_obsidian3.Notice("Generating default user defined symbols", 3e3);
          await this.app.vault.modify(file, generateDefaultUserDefinedSymbols());
        } else {
          new import_obsidian3.Notice("User defined symbols already exists, if you still want the sample code, delete the file", 3e3);
        }
      } else {
        this.app.vault.create(this.plugin.settings.userDefineSymbolFilePath, generateDefaultUserDefinedSymbols()).then((file2) => {
          if (file2 === null) {
            new import_obsidian3.Notice("Failed to create the file, make sure the path is correct.", 3e3);
          }
          this.plugin.mathjaxHelper.readUserDefinedSymbols();
        });
      }
    })).addButton(
      (button) => button.setButtonText("Open").onClick(async () => {
        const file = this.app.vault.getAbstractFileByPath(this.plugin.settings.userDefineSymbolFilePath);
        if (file instanceof import_obsidian3.TFile) {
          await this.app.workspace.getLeaf("split", "vertical").openFile(file);
        } else {
          new import_obsidian3.Notice("The file does not exist", 3e3);
        }
      })
    ).addButton((button) => button.setButtonText("Reload").onClick(async () => {
      this.plugin.mathjaxHelper.readUserDefinedSymbols().then(() => {
        new import_obsidian3.Notice("Reloaded user defined symbols", 3e3);
      });
    }));
    new import_obsidian3.Setting(containerEl).setName("Fuzzy search type").setDesc("Select the fuzzy search algorithm").addDropdown((dropdown) => {
      dropdown.addOption("LCS", "Longest common subsequence");
      dropdown.addOption("DLD", "Damerau-Levenshtein distance");
      dropdown.setValue(this.plugin.settings.fuzzySearchType);
      dropdown.onChange(async (value) => {
        switch (value) {
          case "LCS":
            this.plugin.settings.fuzzySearchType = "LCS";
            break;
          case "DLD":
            this.plugin.settings.fuzzySearchType = "DLD";
            break;
        }
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian3.Setting(containerEl).setName("Debug mode").setDesc("Enable debug mode to see the console log").addToggle((toggle) => toggle.setValue(this.plugin.settings.debugMode).onChange(
      async (value) => {
        Logger.instance.setConsoleLogEnabled(value);
        this.plugin.settings.debugMode = value;
        await this.plugin.saveSettings();
      }
    ));
  }
};
function userDefinedFileChanged(file) {
  if (file.path === this.settings.userDefineSymbolFilePath) {
    this.mathjaxHelper.readUserDefinedSymbols().then((status) => {
      if (status) {
        new import_obsidian3.Notice("User defined file successful reloaded", 3e3);
        Logger.instance.info("User defined file successful reloaded");
      } else {
        new import_obsidian3.Notice("User defined file reload failed, check your format!!", 6e3);
        Logger.instance.error("User defined file reload failed");
      }
    });
  }
}
function generateDefaultUserDefinedSymbols() {
  return '```note\n- Use can use either json or yaml to customize your snippets (but be careful with "" and indent when using yaml\n- If any of the field (e.g. description) is set to empty "" or [], then the default value will be used\n- Everything in the note section will be saved\n- Avoid putting a comma in the end of the json file\n```\n\n```json\n[\n  {\n    "name": "\\\\int",\n    "snippet": "\\\\int_{@1@}^{@2@}",\n    "description": "",\n    "examples": "",\n    "see_also": []\n  },\n  {\n    "name": "\\\\sum",\n    "snippet": "\\\\sum_{@1@}^{@2@}",\n    "description": "",\n    "examples": "",\n    "see_also": []\n  }\n]\n';
}

// src/mathjax-helper.ts
var import_obsidian4 = require("obsidian");

// src/mathjax-symbols.ts
var LATEX_SYMBOLS = [
  {
    "name": "\\!",
    "description": "negative thin space; \xA0i.e., it \u2018back ups\u2019 a thin space amount",
    "examples": [
      "\\rm IR",
      "\\rm I\\! R"
    ],
    "see_also": [
      "\\negthinspace"
    ],
    "snippet": ""
  },
  {
    "name": "\\,",
    "description": "\\,thin space (normally $\\frac 16 = \\frac{3}{18}$ of a quad)\n\\:medium space (normally $\\frac 29 = \\frac{4}{18}$ of a quad)\n\\>alternate medium space\n\\;thick space (normally $\\frac 5{18}$ of a quad)",
    "examples": "",
    "see_also": [
      "\\thinspace"
    ],
    "snippet": ""
  },
  {
    "name": "\\ ",
    "description": "control space;\n$\\rm\\TeX$ often ignores spaces, or collapses multiple spaces to a single space.\nA control space is used to force $\\rm\\TeX$ to typeset a space.\n\nclass ORD",
    "examples": [
      "\\rm This is a sentence.",
      "\\rm This\\ is\\ a\\ sentence.",
      "\\rm This~is~a~sentence.",
      "\\text{This is a sentence.}"
    ],
    "see_also": [
      "\\text"
    ],
    "snippet": ""
  },
  {
    "name": "~",
    "description": "In $\\rm\\TeX$ this is a non-breaking space\u2014i.e.,\na blank space where $\\rm\\TeX$ is not allowed to break between lines.\nMathJax (unlike $\\rm\\TeX$) doesn't do any automatic breaking of lines,\nso MathJax will not break at any space.\nThe tilde is useful to force a space where MathJax would otherwise collapse or ignore spaces,\nas illustrated in the",
    "examples": [
      "\\rm Dr. Carol J.V. Fisher",
      "\\rm Dr.~Carol~J.V.~Fisher",
      "\\text{Dr. Carol J.V. Fisher}",
      "a b\xA0\xA0\xA0\xA0\xA0\xA0c d",
      "a~b~~~~~~c~d"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\#",
    "description": "literal number sign; literal pound sign;\nneeded since \xA0 # \xA0 is used to indicate arguments in definitions\n\n&#x0023; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\\\$",
    "description": "literal dollar sign;\nneeded since \xA0 $ \xA0 may (optionally) be used to delimit math mode\n\nDollar sign outside of math mode: \n\nThe configuration information below enables dollar signs as inline math delimiters;\nsetting \xA0 processEscapes: \xA0 to \xA0 true \xA0 allows use of \xA0 \\$ \xA0 outside of math mode, as a literal dollar sign:\n\nMathJax.Hub.Config({\ntex2jax: {\ninlineMath: [['$','$'],['\\\\(','\\\\)']],\nprocessEscapes: true\n}\n});\n\n&#x0024; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\%",
    "description": "literal percent sign;\nneeded since \xA0 % \xA0 is used to begin a single-line comment\n\n&#x0025; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\&",
    "description": "literal ampersand;\nneeded since ampersands are used as separators in alignment environments\nand for HTML entity references inside math mode\n\n&#x0026; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "<code>\\And</code>"
    ],
    "snippet": ""
  },
  {
    "name": "\\\\",
    "description": "line separator in alignment modes and environments",
    "examples": [
      "\\begin{gather}a\\\\a+b\\\\a+b+c\\end{gather}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\_",
    "description": "literal underscore;\nneeded since underscores are used for subscripts\n\n&#x005F; \xA0 class ORD",
    "examples": [
      "a_2",
      "a\\_2"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\{  \\}",
    "description": "literal braces;\nneeded since braces are used for grouping in math mode;\nnon-stretchy when used alone; stretchy when used with \xA0 \\left \xA0 or \xA0 \\right\n\n\\{ is class OPEN\n\\} is class CLOSE",
    "examples": [
      "{1,2,3}",
      "\\{1,2,3\\}",
      "\\left\\{\\frac ab,c\\right\\}"
    ],
    "see_also": [
      "\\brace",
      "\\lbrace",
      "\\rbrace"
    ],
    "snippet": ""
  },
  {
    "name": "|",
    "description": "pipe character; vertical bar; absolute value;\nnon-stretchy when used alone; stretchy when used with \xA0 \\left \xA0 or \xA0 \\right\n\nclass ORD",
    "examples": [
      "|x|",
      "|\\frac ab|",
      "\\left|\\frac ab\\right|",
      "\\{x | x\\in\\Bbb Z\\}",
      "\\{x\\,|\\,x\\in\\Bbb Z\\}"
    ],
    "see_also": [
      "\\lvert",
      "\\rvert",
      "\\vert"
    ],
    "snippet": ""
  },
  {
    "name": "\\|",
    "description": "double pipe character; double vertical bar; norm;\nnon-stretchy when used alone; stretchy when used with \xA0 \\left \xA0 or \xA0 \\right\n\n&#x2225; \xA0 class ORD",
    "examples": [
      "\\|x\\|",
      "\\|\\frac ab\\|",
      "\\left\\|\\frac ab\\right\\|"
    ],
    "see_also": [
      "\\lVert",
      "\\rVert",
      "\\Vert"
    ],
    "snippet": ""
  },
  {
    "name": "( )",
    "description": "parentheses;\nnon-stretchy when used alone; stretchy when used with \xA0 \\left \xA0 or \xA0 \\right\n\n( is class OPEN;\n) is class CLOSE",
    "examples": [
      "(\\frac ab,c)",
      "\\left(\\frac ab,c\\right)"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": ".",
    "description": "period; decimal point\n\nclass PUNCT\n\nIn some math environments (but not all):\n\nWith numbers on either side, there is no surrounding space:\n\n3.14\nyields\n$3.14$\n\nWith non-numeric characters, there is a slight amount of space on right:\na.b\nyields\n$a.b$\n\nTo suppress this space, enclose the \u2018.\u2019 in braces:\na{.}b\nyields\n$a{.}b$",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "/",
    "description": "forward slash;\ncan be used to denote division\n\nclass ORD",
    "examples": [
      "a/b"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "+",
    "description": "plus symbol;\ne.g., used for addition\n\nclass BIN",
    "examples": [
      "a+b"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "-",
    "description": "minus symbol;\ne.g., used for subtraction\n\nclass BIN",
    "examples": [
      "a-b",
      "-b",
      "\\text{first: } -a\\star b",
      "\\text{first: } {-}a\\star b",
      "-a"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "[ ]",
    "description": "(square) brackets;\nnon-stretchy when used alone; stretchy when used with \xA0 \\left \xA0 or \xA0 \\right\n\n[ is class OPEN;\n] is class CLOSE",
    "examples": [
      "[\\frac ab,c]",
      "\\left[\\frac ab,c\\right]"
    ],
    "see_also": [
      "\\brack",
      "\\lbrack",
      "\\rbrack"
    ],
    "snippet": ""
  },
  {
    "name": "=",
    "description": "equal; equals\n\nclass REL",
    "examples": "",
    "see_also": [
      "\\ne",
      "\\neq"
    ],
    "snippet": ""
  },
  {
    "name": "'",
    "description": "prime symbol\n\nclass ORD",
    "examples": [
      "f(x) = x^2,\\ \nf'(x) = 2x,\\ \nf''(x) = 2"
    ],
    "see_also": [
      "\\prime"
    ],
    "snippet": ""
  },
  {
    "name": "\\above",
    "description": "general command for making fractions;\ngives control over thickness of horizontal fraction bar\n{ <subformula1> \\above <dimen> <subformula2> }\nCreates a fraction:\nnumerator: \xA0 subformula1\ndenominator: \xA0 subformula2\nfraction bar has thickness: \xA0 dimen\n\nThere are separate local groups for \xA0subformula1\xA0 and \xA0subformula2\xA0;\nif these local groups are not explicit, then unexpected results may occur, as illustrated in the\nchoose discussion.",
    "examples": [
      "a+1 \\above 1pt b",
      "a \\above 1pt b+2",
      "{a+1 \\above 1.5pt b+2}+c"
    ],
    "see_also": [
      "\\abovewithdelims",
      "\\atop",
      "\\atopwithdelims",
      "\\cfrac",
      "\\dfrac",
      "\\frac",
      "\\genfrac",
      "\\over",
      "\\overwithdelims"
    ],
    "snippet": ""
  },
  {
    "name": "\\abovewithdelims",
    "description": "general command for making fractions;\ngives control over thickness of horizontal fraction bar;\nspecifies left and right enclosing\ndelimiters\n\n{ <subformula1> \\abovewithdelims <delim1> <delim2> <dimen> <subformula2> }\n\nCreates a fraction:\nnumerator: \xA0 subformula1\ndenominator: \xA0 subformula2\nfraction bar has thickness: \xA0 dimen\ndelim1 \xA0 is put before the fraction\ndelim2 \xA0 is put after the fraction\nFor an empty delimiter, use \u2018.\u2019 in place of the delimiter.\n\nThere are separate local groups for \xA0subformula1\xA0 and \xA0subformula2\xA0;\nif these local groups are not explicit, then unexpected results may occur, as illustrated in the\nchoose discussion.",
    "examples": [
      "a+1 \\abovewithdelims [ ] 1pt b",
      "{a \\abovewithdelims . | 1.5pt b+2}_{a=3}",
      "{a+1 \\abovewithdelims \\{ \\} 1pt b+2}+c"
    ],
    "see_also": [
      "\\above",
      "\\atop",
      "\\atopwithdelims",
      "\\cfrac",
      "\\dfrac",
      "\\frac",
      "\\genfrac",
      "\\over",
      "\\overwithdelims"
    ],
    "snippet": ""
  },
  {
    "name": "\\acute",
    "description": "&#x02CA;\nacute accent\n\\acute #1\nUsually, #1 is a single letter; \xA0otherwise, accent is centered over argument.",
    "examples": [
      "\\acute e",
      "\\acute E",
      "\\acute eu",
      "\\acute{eu}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\aleph",
    "description": "Hebrew letter aleph;\ncommonly used for the cardinality of the real numbers\n\n&#x2135; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\alpha",
    "description": "lowercase Greek letter alpha\n\n&#x03B1; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\amalg",
    "description": "this symbol is often used for co-products\n\n&#x2A3F; \xA0 class BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\And",
    "description": "ampersand\n\n&#x0026; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\&"
    ],
    "snippet": ""
  },
  {
    "name": "\\angle",
    "description": "&#x2220; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\approx",
    "description": "&#x2248; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\approxeq",
    "description": "&#x224A; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\arccos",
    "description": "does not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for examples\n\nIf alternate notation is desired, define:\n\\def\\arccosAlt{\\cos^{-1}} \xA0 so that \xA0\n$\\arccosAlt(x)$ \xA0 yields \xA0\n$\\def\\arccosAlt{\\cos^{-1}} \\arccosAlt(x)$\n\nclass OP",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\arcsin",
    "description": "does not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for examples\n\nIf alternate notation is desired, define:\n\\def\\arcsinAlt{\\sin^{-1}} \xA0 so that \xA0\n$\\arcsinAlt(x)$ \xA0 yields \xA0\n$\\def\\arcsinAlt{\\sin^{-1}} \\arcsinAlt(x)$\n\nclass OP",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\arctan",
    "description": "does not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for examples\n\nIf alternate notation is desired, define:\n\\def\\arctanAlt{\\tan^{-1}} \xA0 so that \xA0\n$\\arctanAlt(x)$ \xA0 yields \xA0\n$\\def\\arctanAlt{\\tan^{-1}} \\arctanAlt(x)$\n\nclass OP",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\arg",
    "description": "the complex argument function;\ndoes not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for examples\n\nclass OP",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\array",
    "description": "a synonym for \xA0\\matrix\xA0\n\\array{ <math> & <math> ... \\cr <repeat as needed> }\nalignment occurs at the ampersands;\na double-backslash can be used in place of the \xA0\\cr\xA0;\nthe final \xA0 \\\\ \xA0 or \xA0 \\cr \xA0 is optional",
    "examples": [
      "\\array{ a & b+1 \\cr c+1 & d }"
    ],
    "see_also": [
      "\\matrix"
    ],
    "snippet": "\\array{ @1@ & @2@ \\cr @3@ & @4@ }"
  },
  {
    "name": "\\arrowvert",
    "description": "not intended for direct use;\nused internally to create stretchy delimiters\n\n&#x23D0; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "|",
      "\\vert",
      "\\lvert",
      "\\rvert"
    ],
    "snippet": ""
  },
  {
    "name": "\\Arrowvert",
    "description": "not intended for direct use;\nused internally to create stretchy delimiters\n\n&#x2016; \xA0 class PUNCT",
    "examples": "",
    "see_also": [
      "\\|",
      "\\Vert",
      "\\lVert",
      "\\rVert"
    ],
    "snippet": ""
  },
  {
    "name": "\\ast",
    "description": "asterisk\n\n&#x2217; \xA0 class BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\asymp",
    "description": "asymptotic\n\n&#x224D; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\atop",
    "description": "general command for making a fraction-like structure, but without the horizontal fraction bar\n{ <subformula1> \\atop <subformula2> }\nCreates a fraction-like structure:\n\u2018numerator\u2019 \xA0 subformula1\n\u2019denominator\u2019 \xA0 subformula2\n\nThere are separate local groups for \xA0subformula1\xA0 and \xA0subformula2\xA0;\nif these local groups are not explicit, then unexpected results may occur, as illustrated in the\nchoose discussion.",
    "examples": [
      "a \\atop b",
      "a+1 \\atop b+2",
      "{a+1 \\atop b+2}+c"
    ],
    "see_also": [
      "\\above",
      "\\abovewithdelims",
      "\\atopwithdelims",
      "\\cfrac",
      "\\dfrac",
      "\\frac",
      "\\genfrac",
      "\\over",
      "\\overwithdelims"
    ],
    "snippet": "@1@ \\atop @2@"
  },
  {
    "name": "\\atopwithdelims",
    "description": "general command for making a fraction-like structure, but without the horizontal fraction bar;\nspecifies left and right enclosing delimiters\n\n{ <subformula1> \\atopwithdelims <delim1> <delim2> <subformula2> }\n\nCreates a fraction-like structure:\n\u2018numerator\u2019 \xA0 subformula1\n\u2018denominator\u2019 \xA0 subformula2\ndelim1 \xA0 is put before the structure\ndelim2 \xA0 is put after the structure\nFor an empty delimiter, use \u2018.\u2019 in place of the delimiter.\n\nThere are separate local groups for \xA0subformula1\xA0 and \xA0subformula2\xA0;\nif these local groups are not explicit, then unexpected results may occur, as illustrated in the\nchoose discussion.",
    "examples": [
      "a \\atopwithdelims [ ] b",
      "a+1 \\atopwithdelims . | b+2",
      "{a+1 \\atopwithdelims \\{ \\} b+2}+c"
    ],
    "see_also": [
      "\\above",
      "\\abovewithdelims",
      "\\atop",
      "\\cfrac",
      "\\dfrac",
      "\\frac",
      "\\genfrac",
      "\\over",
      "\\overwithdelims"
    ],
    "snippet": "@1@ \\atopwithdelims @2@ @3@ @4@"
  },
  {
    "name": "\\backepsilon",
    "description": "&#x220D; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\backprime",
    "description": "",
    "examples": "",
    "see_also": [
      "\\prime",
      "ORD"
    ],
    "snippet": ""
  },
  {
    "name": "\\backsim",
    "description": "&#x223D; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\backsimeq",
    "description": "&#x22CD; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\backslash",
    "description": "",
    "examples": "",
    "see_also": [
      "\\setminus"
    ],
    "snippet": ""
  },
  {
    "name": "\\bar",
    "description": "bar accent (non-stretchy)\n\n&#x02C9;\n\n\\bar #1\nUsually, #1 is a single letter; \xA0otherwise, bar is centered over argument.",
    "examples": [
      "\\bar x",
      "\\bar X",
      "\\bar xy",
      "\\bar{xy}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\barwedge",
    "description": "&#x22BC; \xA0 class BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\Bbb",
    "description": "blackboard-bold for uppercase letters and lowercase \u2018k\u2019;\nif lowercase blackboard-bold letters are not available, then they are typeset in a roman font\n\nclass ORD\n\n\\Bbb #1\nWhether lower-case letters are displayed in blackboard-bold, or not, depends on the fonts being used.\nThe MathJax web-based fonts don't have lowercase blackboard-bold, but the STIX fonts do;\nso users with the STIX fonts installed will be able to display lowercase blackboard-bold letters.",
    "examples": [
      "\\Bbb R",
      "\\Bbb ZR",
      "\\Bbb{AaBbKk}Cc",
      "\\Bbb{ABCDEFGHIJKLMNOPQRSTUVWXYZ}"
    ],
    "see_also": [
      "\\mathbb"
    ],
    "snippet": ""
  },
  {
    "name": "\\Bbbk",
    "description": "blackboard-bold lowercase k\n\n&#x006B; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\because",
    "description": "&#x2235; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\begin",
    "description": "used in \xA0\n\\begin{xxx} ... \\end{xxx} \xA0 environments",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\beta",
    "description": "lowercase Greek letter beta\n\n&#x03B2; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\beth",
    "description": "Hebrew letter beth\n\n&#x2136; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\between",
    "description": "&#x226C; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\bf",
    "description": "turns on boldface; \xA0affects uppercase and lowercase letters, and digits\n\nclass ORD\n\n{\\bf ... }",
    "examples": [
      "\\bf AaBb\\alpha\\beta123",
      "{\\bf A B} A B",
      "\\bf AB \\rm CD",
      "\\bf{AB}CD"
    ],
    "see_also": [
      "\\mathbf",
      "\\boldsymbol"
    ],
    "snippet": ""
  },
  {
    "name": "\\Bigg",
    "description": "used to obtain various-sized delimiters;\nmay be followed by any of these Variable-Sized Delimiters",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\Biggl",
    "description": "Used to obtain various-sized delimiters, with a left/right/middle context;\nmay be followed by any of these Variable-Sized Delimiters.\n\nThe \u2018l\u2019 (left), \u2019m\u2019 (middle), and \u2018r\u2019 (right) specifications\nmay make reading the source code more meaningful,\nespecially when there are delimiters inside delimiters.\n\nWhereas (say) \xA0\\Bigg\xA0 produces results of class ORD, we have:\n\n\xA0\\Biggl\xA0 produces results of class OPEN\n\xA0\\Biggr\xA0 produces results of class CLOSE\n\xA0\\Biggm\xA0 produces results of class REL\n\nThe spacing for these differ (but may not always be apparent, as it depends on the class of what is next to it).\nFor example, \xA0$x\\big| y$\xA0 ($\\,x\\big| y\\,$)\nhas less space than \xA0$x\\bigm| y$\xA0 ($\\,x\\bigm| y\\,$).\nTherefore, these commands affect typeset results in a fundamental way;\nit is best to use the form appropriate for the position of the desired delimiter.",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\bigcap",
    "description": "changes size;\ncan change limit placement using \\limits and  \\nolimits;\nsee the Big Operators Table for examples\n\n&#x22C2; \xA0 class OP",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\bigcirc",
    "description": "&#x25EF; \xA0 class BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\bigcup",
    "description": "changes size;\ncan change limit placement using \\limits and  \\nolimits;\nsee the Big Operators Table for examples\n\n&#x22C3; \xA0 class OP",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\bigodot",
    "description": "all change size;\ncan change limit placement using \\limits and  \\nolimits;\nsee the Big Operators Table for examples\n\n&#x2A00; \xA0 class OP\n\n&#x2A01; \xA0 class OP\n&#x2A02; \xA0 class OP",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\bigsqcup",
    "description": "changes size;\ncan change limit placement using \\limits and  \\nolimits;\nsee the Big Operators Table for examples\n\n&#x2A06; \xA0 class OP",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\bigstar",
    "description": "&#x2605; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\bigtriangledown",
    "description": "&#x25BD; \xA0 class BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\bigtriangleup",
    "description": "&#x25B3; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\biguplus",
    "description": "changes size;\ncan change limit placement using \\limits and  \\nolimits;\nsee the Big Operators Table for examples\n\n&#x2A04; \xA0 class OP",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\bigvee",
    "description": "changes size;\ncan change limit placement using \\limits and  \\nolimits;\nsee the Big Operators Table for examples\n\n&#x22C1; \xA0 class OP",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\bigwedge",
    "description": "changes size;\ncan change limit placement using \\limits and  \\nolimits;\nsee the Big Operators Table for examples\n\n&#x22C0; \xA0 class OP",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\binom",
    "description": "notation commonly used for binomial coefficients\n\\binom #1 #2",
    "examples": [
      "\\binom n k",
      "\\binom n k",
      "\\binom{n-1}k-1",
      "\\binom{n-1}{k-1}"
    ],
    "see_also": [
      "\\binom",
      "\\choose",
      "\\dbinom",
      "\\tbinom"
    ],
    "snippet": "\\binom{@1@}{@2@}"
  },
  {
    "name": "\\blacklozenge",
    "description": "&#x29EB; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\blacksquare",
    "description": "&#x25A0; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\blacktriangle",
    "description": "&#x25B2; \xA0\nclass ORD\n\n&#x25BC; \xA0\nclass ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\blacktriangleleft",
    "description": "&#x25C0; \xA0\nclass BIN\n\n&#x25B6; \xA0\nclass BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\bmod",
    "description": "properly spaced as a binary operator\n\nclass BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\boldsymbol",
    "description": "as opposed to \xA0\\bf\xA0 and \xA0\\mathbf\xA0,\n\\boldsymbol\xA0 applies to nearly all symbols, not just letters and numbers\n\nclass ORD\n\n\\boldsymbol #1",
    "examples": [
      "\\boldsymbol aa",
      "\\boldsymbol \\alpha\\alpha",
      "\\boldsymbol{a\\alpha}a\\alpha",
      "\\boldsymbol{a+2+\\alpha+\\frac{x+3}{\\beta+4}}",
      "\\mathbf{a+2+\\alpha+\\frac{x+3}{\\beta+4}}"
    ],
    "see_also": [
      "\\bf",
      "\\mathbf"
    ],
    "snippet": ""
  },
  {
    "name": "\\bot",
    "description": "&#x22A5; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\bowtie",
    "description": "&#x22C8; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\Box",
    "description": "&#x25A1; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\boxdot",
    "description": "&#x22A1; \xA0 class BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\boxed",
    "description": "puts a box around argument; argument is in math mode\n\\boxed #1",
    "examples": [
      "\\boxed ab",
      "\\boxed{ab}",
      "\\boxed{ab\\strut}",
      "\\boxed{\\text{boxed text}}"
    ],
    "see_also": [
      "\\fbox"
    ],
    "snippet": "\\boxed{@1@}"
  },
  {
    "name": "\\boxminus",
    "description": "&#x229F; \xA0\nclass BIN\n\n&#x229E; \xA0\nclass BIN\n\n&#x22A0; \xA0\nclass BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\brace",
    "description": "creates a braced structure\n{ <subformula1> \\brace <subformula2> }",
    "examples": [
      "\\brace",
      "a\\brace b",
      "a+b+c\\brace d+e+f",
      "a+{b+c\\brace d+e}+f"
    ],
    "see_also": [],
    "snippet": "@1@ \\brace @2@"
  },
  {
    "name": "\\bracevert",
    "description": "not intended for direct use;\nused internally to create stretchy delimiters\n\n&#x23AA; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\brack",
    "description": "creates a bracketed structure\n{ <subformula1> \\brack <subformula2> }",
    "examples": [
      "\\brack",
      "a\\brack b",
      "a+b+c\\brack d+e+f",
      "a+{b+c\\brack d+e}+f"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\breve",
    "description": "breve accent\n\n&#x02D8;\n\n\\breve #1\nUsually, #1 is a single letter; \xA0otherwise, accent is centered over argument.",
    "examples": [
      "\\breve e",
      "\\breve E",
      "\\breve eu",
      "\\breve{eu}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\buildrel",
    "description": "\\buildrel <subformula1> \\over #1\nThe result is of class \xA0REL\xA0 (binary relation), so it has the\nspacing of a relation.",
    "examples": [
      "\\buildrel \\alpha\\beta \\over \\longrightarrow",
      "\\buildrel \\rm def \\over {:=}"
    ],
    "see_also": [],
    "snippet": "\\buildrel @1@ \\over @2@"
  },
  {
    "name": "\\bullet",
    "description": "&#x2219; \xA0 class BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\Bumpeq",
    "description": "&#x224E; \xA0\nclass REL\n\n&#x224F; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\cal",
    "description": "class ORD\nturns on calligraphic mode; \xA0only affects uppercase letters and digits\n{\\cal ... }",
    "examples": [
      "\\cal ABCDEFGHIJKLMNOPQRSTUVWXYZ",
      "\\cal 0123456789",
      "\\cal abcdefghijklmnopqrstuvwxyz",
      "abcdefghijklmnopqrstuvwxyz",
      "{\\cal AB}AB",
      "\\cal AB \\rm AB",
      "\\cal{AB}CD"
    ],
    "see_also": [
      "\\oldstyle",
      "\\mathcal"
    ],
    "snippet": ""
  },
  {
    "name": "\\cancel",
    "description": "Used to \u2018cancel\u2019 (strikeout).\n\n\\cancel #1\n\\bcancel #1",
    "examples": [
      "\\frac{(x+1)\\cancel{(x+2)}}{3\\cancel{(x+2)}}",
      "\\frac{\\bcancel{\\frac13}}{\\bcancel{\\frac13}} = 1"
    ],
    "see_also": [],
    "snippet": "\\cancel{@1@}"
  },
  {
    "name": "\\Cap",
    "description": "&#x22D2; \xA0\nclass BIN",
    "examples": "",
    "see_also": [
      "\\bigcap",
      "\\cap",
      "\\Cup",
      "\\cup",
      "\\doublecap",
      "\\doublecup"
    ],
    "snippet": ""
  },
  {
    "name": "\\cap",
    "description": "&#x2229; \xA0\nclass BIN",
    "examples": "",
    "see_also": [
      "\\bigcap",
      "\\Cap",
      "\\Cup",
      "\\cup",
      "\\doublecap",
      "\\doublecup"
    ],
    "snippet": ""
  },
  {
    "name": "\\cases",
    "description": "class OPEN\nfor piecewise-defined functions\n\\cases{ <math> & <math> \\cr <repeat as needed> }\na double-backslash can be used in place of \xA0 \\cr\xA0;\nthe final \xA0 \\\\ \xA0 or \xA0 \\cr \xA0 is optional\n\nIn $\\,\\rm\\TeX\\,$, the second column is automatically in text-mode, while in MathJax it is in math-mode.\nThis behavior will be changed to be consistent with $\\,\\rm\\TeX\\,$ in a future release of MathJax.",
    "examples": [
      "\n|x| = \n\\cases{\nx  & \\text{if } x\\ge 0\\cr\n-x & \\text{if } x\\lt 0\n}\n"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\cdot",
    "description": "&#x22C5; \xA0\nclass BIN\ncentered dot",
    "examples": [
      "a\\cdot b",
      "a\\cdotp b",
      "a\\centerdot b"
    ],
    "see_also": [
      "\\cdotp",
      "\\cdots",
      "\\centerdot"
    ],
    "snippet": ""
  },
  {
    "name": "\\cdotp",
    "description": "&#x22C5; \xA0\nclass PUNCT\ncentered dot, punctuation symbol",
    "examples": [
      "\\rm s \\cdot h",
      "\\rm s \\cdotp h"
    ],
    "see_also": [
      "\\cdot",
      "\\centerdot"
    ],
    "snippet": ""
  },
  {
    "name": "\\cdots",
    "description": "&#x22EF; \xA0\nclass INNER\ncentered dots; \xA0 dot dot dot",
    "examples": "",
    "see_also": [
      "\\dots",
      "\\ldots"
    ],
    "snippet": ""
  },
  {
    "name": "\\centerdot",
    "description": "&#x22C5; \xA0\nclass BIN\ncentered dot",
    "examples": [
      "a\\cdot b",
      "a\\cdotp b",
      "a\\centerdot b"
    ],
    "see_also": [
      "\\cdot",
      "\\cdotp"
    ],
    "snippet": ""
  },
  {
    "name": "\\cfrac",
    "description": "use for continued fractions\n\\cfrac #1 #2",
    "examples": [
      "\\frac{2}{1+\\frac{2}{1+\\frac{2}{1}}}",
      "\\cfrac{2}{1+\\cfrac{2}{1+\\cfrac{2}{1}}}"
    ],
    "see_also": [
      "\\above",
      "\\abovewithdelims",
      "\\atop",
      "\\atopwithdelims",
      "\\dfrac",
      "\\frac",
      "\\genfrac",
      "\\over",
      "\\overwithdelims"
    ],
    "snippet": "\\cfrac{@1@}{@2@}"
  },
  {
    "name": "\\check",
    "description": "&#x02C7;\ncheck accent\n\\check #1\nUsually, #1 is a single letter; \xA0otherwise, accent is centered over argument.",
    "examples": [
      "\\check o",
      "\\check O",
      "\\check oe",
      "\\check{oe}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\checkmark",
    "description": "#x2713; \xA0\nclass ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\chi",
    "description": "&#x03C7; \xA0\nclass ORD\nlowercase Greek letter chi",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\choose",
    "description": "notation commonly used for binomial coefficients;\ndifferent versions for inline and display modes\n{ <subformula1> \\choose <subformula2> }\nThere are separate local groups for \xA0subformula1\xA0\nand \xA0subformula2\xA0;\nif these local groups are not explicit, then unexpected results may occur,\nas illustrated next.",
    "examples": [
      "3 \\choose 2"
    ],
    "see_also": [
      "\\binom",
      "\\dbinom",
      "\\tbinom"
    ],
    "snippet": "@1@ \\choose @2@"
  },
  {
    "name": "\\circ",
    "description": "&#x2218; \xA0\nclass BIN",
    "examples": [
      "(f\\circ g)(x) = f(g(x))",
      "45^\\circ"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\circeq",
    "description": "&#x2257; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\circlearrowleft",
    "description": "&#x21BA;\ncounterclockwise\nclass REL\n\n&#x21BB;\nclockwise\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\circledast",
    "description": "&#x229B;circled asteriskclass BIN\n&#x229A;circled circleclass BIN\n&#x229D;circled dashclass BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\circledR",
    "description": "&#x00AE;circled Rclass ORD\n&#x24C8;circled Sclass ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\class",
    "description": "non-standard; extension is loaded automatically when used;\nused to specify a CSS class for styling mathematics\n\\class #1 #2\nwhere:\n\n#1\xA0 is a CSS class name (without quotes)\n#2\xA0 is the mathematics to be styled",
    "examples": [
      "ab\\class{smHighlightRed}{cdef}gh"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\clubsuit",
    "description": "&#x2663; \xA0\nclass ORD",
    "examples": "",
    "see_also": [
      "\\diamondsuit",
      "\\heartsuit",
      "\\spadesuit"
    ],
    "snippet": ""
  },
  {
    "name": "\\colon",
    "description": "&#x003A; \xA0\nclass PUNCT\n\na colon, treated as a punctuation mark (instead of a relation)",
    "examples": [
      "f:A\\to B",
      "f\\colon A\\to B"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\color",
    "description": "used to specify a color in mathematics\n\\color #1 #2\nwhere:\n#1 \xA0 is the desired color\n#2 \xA0 is the mathematics to be colored\n\nThis works differently from standard $\\,\\rm\\LaTeX\\,$ (where \xA0\\color\xA0 is a switch).\nIn a future version of MathJax, it will be possible to load an extension\nto make the command behave like the $\\,\\rm\\LaTeX\\,$ version.",
    "examples": [
      "\\color{red}{ \\frac{1+\\sqrt{5}}{2} }",
      "\\color{#0000FF}AB"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\complement",
    "description": "&#x2201; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\cong",
    "description": "&#x2245; \xA0\nclass REL\n\ncongruent",
    "examples": "",
    "see_also": [
      "\\ncong"
    ],
    "snippet": ""
  },
  {
    "name": "\\coprod",
    "description": "&#x2210; \xA0\nclass OP\n\ncoproduct",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\cos",
    "description": "class OP\ncosine;\ndoes not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for more examples",
    "examples": [
      "\\cos x",
      "\\cos(2x-1)"
    ],
    "see_also": [
      "\\sin"
    ],
    "snippet": ""
  },
  {
    "name": "\\cosh",
    "description": "class OP\nhyperbolic cosine;\ndoes not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for more examples\nhyperbolic cosine",
    "examples": [
      "\\cosh x",
      "\\cosh(2x-1)"
    ],
    "see_also": [
      "\\sinh"
    ],
    "snippet": ""
  },
  {
    "name": "\\cot",
    "description": "class OP\ncotangent;\ndoes not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for more examples",
    "examples": [
      "\\cot x",
      "\\cot(2x-1)"
    ],
    "see_also": [
      "\\tan"
    ],
    "snippet": ""
  },
  {
    "name": "\\coth",
    "description": "class OP\nhyperbolic cotangent;\ndoes not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for more examples",
    "examples": [
      "\\coth x",
      "\\coth(2x-1)"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\cr",
    "description": "carriage return;\nline separator in alignment modes and environments\n\nin MathJax, these are essentially the same: \xA0 \\\\,\n\xA0 \\newline",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\csc",
    "description": "class OP\ncosecant\ndoes not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for more examples",
    "examples": [
      "\\csc x",
      "\\csc(2x-1)"
    ],
    "see_also": [
      "\\sec"
    ],
    "snippet": ""
  },
  {
    "name": "\\cssId",
    "description": "non-standard; \xA0 class ORD; \xA0\nextension is loaded automatically when used;\n\nused to set a MathML element's ID attribute, so it can be accessed dynamically\n(e.g., to add an event handler, add CSS styling, or set display status)\n\n\\cssId #1 #2\n\nwhere:\n\n#1\xA0 is an ID attribute (without quotes)\n#2\xA0 is the mathematics to be identified by the ID",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\Cup",
    "description": "&#x22D3; \xA0\nclass BIN",
    "examples": "",
    "see_also": [
      "\\bigcup",
      "\\Cap",
      "\\cap",
      "\\cup",
      "\\doublecap",
      "\\doublecup"
    ],
    "snippet": ""
  },
  {
    "name": "\\cup",
    "description": "&#x222A; \xA0\nclass BIN",
    "examples": "",
    "see_also": [
      "\\bigcup",
      "\\Cap",
      "\\cap",
      "\\Cup",
      "\\doublecap",
      "\\doublecup"
    ],
    "snippet": ""
  },
  {
    "name": "\\curlyeqprec",
    "description": "&#x22DE;class REL\n&#x22DF;class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\curlyvee",
    "description": "&#x22CE;class BIN \n&#x22CF;class BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\curvearrowleft",
    "description": "&#x21B6;counterclockwiseclass REL\n&#x21B7;clockwiseclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\dagger",
    "description": "&#x2020;daggerclass BIN\n&#x2021;double daggerclass BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\daleth",
    "description": "&#x2138; \xA0 class ORD \nHebrew letter daleth",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\dashleftarrow",
    "description": "&#x21E0;dashed left arrow; non-stretchyclass REL\n&#x21E2;dashed right arrow; non-stretchyclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\dashv",
    "description": "&#x22A3; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\dbinom",
    "description": "notation commonly used for binomial coefficients;\ndisplay version (in both inline and display modes)\n\\dbinom #1 #2",
    "examples": [
      "\\dbinom n k",
      "\\dbinom n k",
      "\\dbinom{n-1}k-1",
      "\\dbinom{n-1}{k-1}"
    ],
    "see_also": [
      "\\binom",
      "\\choose",
      "\\tbinom"
    ],
    "snippet": "\\dbinom{@1@}{@2@}"
  },
  {
    "name": "\\dot",
    "description": "&#x02D9;dot accent\n&#x00A8;double dot accent\ntriple dot accent\nquadruple dot accent\n\n\\dot #1\n\\ddot #1\n\\dddot #1\n\\ddddot #1\nUsually, #1 is a single letter; \xA0otherwise, accent is centered over argument.",
    "examples": [
      "\\dot x",
      "\\ddot x",
      "\\dddot x",
      "\\ddddot x",
      "\\ddot x(t)",
      "\\ddddot{y(x)}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\ddots",
    "description": "&#x22F1; \xA0 class INNER\nthree diagonal dots",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\DeclareMathOperator",
    "description": "Multi-letter operator names (like $\\,\\log\\,$,\n$\\,\\sin\\,$, and $\\,\\lim\\,$) are traditionally typeset in a roman font.\n\\DeclareMathOperator\xA0 allows you to define your own\noperator names;\nthey are subsequently typeset using the proper font and spacing;\nyou can control the way that limits appear (see",
    "examples": [
      "myOp(x)",
      "\\text{myOp}(x)",
      "\\myOp_a^b(x)",
      "\\myOp_a^b(x)",
      "\n                                    \\DeclareMathOperator*\n                                    {\\myOP}{myOP}\n                                    \\myOP_a^b(x)\n                                ",
      "\\myOp",
      "\\myOP",
      "DeclareMathOperator*",
      "DeclareMathOperator"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\def",
    "description": "for defining your own commands (control sequences, macros, definitions);\nmust appear (within math delimiters) before it is used;\nalternatively, you can\ndefine macros using the MathJax configuration\noptions in the \xA0<head>\n\\def\\myCommandName{ <replacement text> }",
    "examples": "",
    "see_also": [
      "\\newcommand"
    ],
    "snippet": ""
  },
  {
    "name": "\\deg",
    "description": "class OP\ndegree;\ndoes not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for examples",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\Delta",
    "description": "&#x0394;uppercase Greek letter deltaclass ORD\n&#x03B4;lowercase Greek letter deltaclass ORD",
    "examples": "",
    "see_also": [
      "\\varDelta"
    ],
    "snippet": ""
  },
  {
    "name": "\\det",
    "description": "class OP\ndeterminant;\ndoes not change size;\ndefault limit placement can be changed using \xA0\\limits\xA0 and  \xA0\\nolimits;\ndoes not change size;\nsee the Big Operators Table for more examples",
    "examples": [
      "\\det_{\\rm sub}",
      "\\det_{\\rm sub}",
      "\\det\\limits_{\\rm sub}",
      "\\det\\nolimits_{\\rm sub}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\dfrac",
    "description": "fractions;\ndisplay version (in both inline and display modes)\n\\dfrac #1 #2",
    "examples": [
      "\\dfrac a b",
      "\\dfrac a b",
      "\\frac a b",
      "\\dfrac{a-1}b-1",
      "\\dfrac{a-1}{b-1}"
    ],
    "see_also": [
      "\\above",
      "\\abovewithdelims",
      "\\atop",
      "\\atopwithdelims",
      "\\cfrac",
      "\\frac",
      "\\genfrac",
      "\\over",
      "\\overwithdelims"
    ],
    "snippet": "\\dfrac{@1@}{@2@}"
  },
  {
    "name": "\\diagdown",
    "description": "&#x2572;diagonal down (from left to right)class ORD\n&#x2571;diagonal up (from left to right)class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\Diamond",
    "description": "&#x25CA;large diamondclass ORD\n&#x22C4;small diamondclass BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\diamondsuit",
    "description": "&#x2662; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\clubsuit",
      "\\heartsuit",
      "\\spadesuit"
    ],
    "snippet": ""
  },
  {
    "name": "\\digamma",
    "description": "&#x03DD; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\dim",
    "description": "class OP\ndimension;\ndoes not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using  \\limits;\nsee the Big Operators Table for examples",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\displaylines",
    "description": "to display any number of centered formulas (without any alignment)\n\\displaylines{ <math> \\cr <repeat as needed> }\na double-backslash can be used in place of the \\cr;\nthe final \xA0 \\\\ \xA0 or \xA0 \\cr \xA0 is optional",
    "examples": [
      "\n\\displaylines{\na = a\\\\\n\\text{if } a=b \\text{ then } b=a\\\\\n\\text{if } a=b \\text{ and } b=c \\text{ then } a=c\n}\n"
    ],
    "see_also": [
      "gather"
    ],
    "snippet": ""
  },
  {
    "name": "\\displaystyle",
    "description": "class ORD\nused to over-ride automatic style rules and force display style;\nstays in force until the end of math mode or the braced group, or until another style is selected\n{ \\displaystyle ... }",
    "examples": "",
    "see_also": [
      "\\textstyle",
      "\\scriptstyle",
      "\\scriptscriptstyle"
    ],
    "snippet": ""
  },
  {
    "name": "\\div",
    "description": "&#x00F7; \xA0 class BIN\ndivision symbol",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\divideontimes",
    "description": "&#x22C7; \xA0 class BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\Doteq",
    "description": "&#x2251;class REL\n&#x2250;class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\dotplus",
    "description": "&#x2214; \xA0 class BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\dots",
    "description": "&#x2026; \xA0 class INNER\nlower dots; \xA0 ellipsis; \xA0 ellipses; \xA0 dot dot dot\n\nIn $\\,\\rm\\LaTeX\\,$, \xA0\\dots\xA0 chooses either\n\xA0\\cdots\xA0 or \xA0\\ldots\xA0\ndepending on the context;\nMathJax, however, always gives lower dots.",
    "examples": [
      "x_1, \\dots, x_n",
      "x_1 + \\dots + x_n",
      "x_1 + \\dotsb + x_n",
      "x_1 + \\cdots + x_n"
    ],
    "see_also": [
      "\\cdots",
      "\\ldots",
      "\\dotsb",
      "\\dotsc",
      "\\dotsi",
      "\\dotsm",
      "\\dotso"
    ],
    "snippet": ""
  },
  {
    "name": "\\dotsb",
    "description": "&#x22EF;\\dotsbclass INNERdots with binary operations and relations$x_1 + x_2 +\\dotsb + x_n$\n&#x2026;\\dotscclass INNERdots with commas$x_1,x_2,\\dotsc,x_n$\n&#x22EF;\\dotsiclass INNERdots with integrals$\\int_{A_1}\\int_{A_2}\\dotsi\\int_{A_n}$\n&#x22EF;\\dotsmclass INNERdots with multiplication$x_1x_2\\dotsm x_n$\n&#x2026;\\dotsoclass INNERother dots$A_1\\dotso A_n$",
    "examples": "",
    "see_also": [
      "\\cdots",
      "\\dots",
      "\\ldots"
    ],
    "snippet": ""
  },
  {
    "name": "\\doublebarwedge",
    "description": "&#x2A5E; \xA0 BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\doublecap",
    "description": "&#x22D2;class BIN\n&#x22D3;class BIN",
    "examples": "",
    "see_also": [
      "\\Cap",
      "\\Cup",
      "\\cap",
      "\\cup"
    ],
    "snippet": ""
  },
  {
    "name": "\\downarrow",
    "description": "&#x2193;down arrow; non-stretchyclass REL\n&#x21D3;double down arrow; non-stretchyclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\downdownarrows",
    "description": "&#x21CA; \xA0 class REL\ndown down arrows; non-stretchy",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\downharpoonleft",
    "description": "&#x21C3;down harpoon left; non-stretchyclass REL\n&#x21C2;down harpoon right; non-stretchyclass REL",
    "examples": "",
    "see_also": [
      "\\leftharpoondown",
      "\\leftharpoonup"
    ],
    "snippet": ""
  },
  {
    "name": "\\ell",
    "description": "&#x2113; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\emptyset",
    "description": "&#x2205; \xA0 class ORD\nempty set",
    "examples": "",
    "see_also": [
      "\\varnothing"
    ],
    "snippet": ""
  },
  {
    "name": "\\end",
    "description": "used in \xA0\n\\begin{xxx} ... \\end{xxx} \xA0 environments",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\enspace",
    "description": "\\enspace \xA0 is a 0.5em space",
    "examples": [
      "|\\enspace|\\enspace|"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\epsilon",
    "description": "&#x03F5; \xA0 class ORD\nlowercase Greek letter epsilon",
    "examples": "",
    "see_also": [
      "\\varepsilon"
    ],
    "snippet": ""
  },
  {
    "name": "\\eqalign",
    "description": "equation alignment;\nfor aligning multi-line displays at a single place\n\\eqalign{ <math> & <math> \\cr <repeat as needed> }\nthe ampersand is placed where alignment is desired;\na double-backslash can be used in place of the \xA0\\cr\xA0;\nthe final \xA0 \\\\ \xA0 or \xA0 \\cr \xA0 is optional;\nsupports only a single \\tag, which is vertically centered",
    "examples": "",
    "see_also": [
      "\\eqalignno",
      "align environment",
      "\\tag"
    ],
    "snippet": ""
  },
  {
    "name": "\\eqalignno",
    "description": "equation alignment with optionally numbered (tagged) lines\n\\eqalignno{ <math> & <math> & <equation tag> \\cr <repeat as needed> }\nthe first ampersand is placed where alignment is desired;\nthe second ampersand is used just before a tag;\nif there is no tag, then the final  \xA0 & <equation tag> \xA0 is omitted;\na double-backslash can be used in place of the \xA0\\cr\xA0;\nthe final \xA0 \\\\ \xA0 or \xA0 \\cr \xA0 is optional",
    "examples": "",
    "see_also": [
      "\\eqalign",
      "\\leqalignno",
      "align environment"
    ],
    "snippet": ""
  },
  {
    "name": "\\eqcirc",
    "description": "&#x2256; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\eqsim",
    "description": "&#x2242; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\eqslantgtr",
    "description": "&##x2A96;\n\nclass REL\n\n&##x2A95;class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\equiv",
    "description": "&#x2261; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\eta",
    "description": "&#x03B7; \xA0\nclass ORD\nlowercase Greek letter eta",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\eth",
    "description": "&#x00F0; \xA0\nclass ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\exists",
    "description": "&#x2203; \xA0\nclass ORD\nthere exists",
    "examples": "",
    "see_also": [
      "\\nexists"
    ],
    "snippet": ""
  },
  {
    "name": "\\exp",
    "description": "class OP\nexponential function;\ndoes not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for examples",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\fallingdotseq",
    "description": "&#x2252; \xA0\nclass REL\nfalling dot sequence;",
    "examples": "",
    "see_also": [
      "\\risingdotseq"
    ],
    "snippet": ""
  },
  {
    "name": "\\fbox",
    "description": "puts a box around argument; argument is in text mode\nequivalent to: \\boxed{\\text{#1}}\n\\fbox #1\nwhere #1 is rendered as text",
    "examples": [
      "\\boxed{Hi there!}",
      "\\fbox{Hi there!}"
    ],
    "see_also": [
      "\\boxed"
    ],
    "snippet": ""
  },
  {
    "name": "\\Finv",
    "description": "&#x2132; \xA0\nclass ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\flat",
    "description": "&#x266D; \xA0\nclass ORD\nmusical flat symbol",
    "examples": "",
    "see_also": [
      "\\natural",
      "\\sharp"
    ],
    "snippet": ""
  },
  {
    "name": "\\forall",
    "description": "&#x2200; \xA0\nclass ORD\nuniversal quantifier; for all; for every; for each",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\frac",
    "description": "fractions;\ndisplays differently in inline and display modes\n\\frac #1 #2",
    "examples": [
      "\\frac a b",
      "\\frac a b",
      "\\frac{a-1}b-1",
      "\\frac{a-1}{b-1}"
    ],
    "see_also": [
      "\\above",
      "\\abovewithdelims",
      "\\atop",
      "\\atopwithdelims",
      "\\cfrac",
      "\\dfrac",
      "\\genfrac",
      "\\over",
      "\\overwithdelims"
    ],
    "snippet": "\\frac{@1@}{@2@}"
  },
  {
    "name": "\\frak",
    "description": "class ORD\nturns on fraktur; \xA0affects uppercase and lowercase letters, and digits\n{\\frak ... }",
    "examples": [
      "\\frak ABCDEFGHIJKLMNOPQRSTUVWXYZ",
      "\\frak 0123456789",
      "\\frak abcdefghijklmnopqrstuvwxyz",
      "{\\frak AB}AB",
      "\\frak AB \\rm AB",
      "{\\frak AB \\cal AB} AB"
    ],
    "see_also": [
      "\\mathfrak"
    ],
    "snippet": ""
  },
  {
    "name": "\\frown",
    "description": "&#x2322; \xA0\nclass REL",
    "examples": "",
    "see_also": [
      "\\smallfrown",
      "\\smallsmile",
      "\\smile"
    ],
    "snippet": ""
  },
  {
    "name": "\\Game",
    "description": "&#x2141; \xA0\nclass ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\Gamma",
    "description": "&#x0393; \xA0\nclass ORD\nuppercase Greek letter gamma",
    "examples": "",
    "see_also": [
      "\\varGamma"
    ],
    "snippet": ""
  },
  {
    "name": "\\gamma",
    "description": "&#x03B3; \xA0\nclass ORD\nlowercase Greek letter gamma",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\gcd",
    "description": "class OP\ngreatest common divisor;\ndoes not change size;\ncan change limit placement using \\limits and  \\nolimits;\nsee the Big Operators Table for examples",
    "examples": [
      "\\gcd_{\\rm sub}^{\\rm sup}",
      "\\gcd_{\\rm sub}^{\\rm sup}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\ge",
    "description": "&#x2265; \xA0 \\ge\n&#x2265; \xA0 \\geq\n&#x2267; \xA0 \\geqq\n&#x2A7E; \xA0 \\geqslant\n\nall class REL\ngreater than or equal to",
    "examples": "",
    "see_also": [
      "\\ngeq",
      "\\ngeqq",
      "\\ngeqslant"
    ],
    "snippet": ""
  },
  {
    "name": "\\genfrac",
    "description": "the most general command for defining fractions with optional delimiters,\nline thickness, and specified style\n\\genfrac #1 #2 #3 #4 #5 #6\nwhere:\n\n#1 is the left delimiter (empty, for no left delimiter)\n#2 is the right delimiter (empty, for no right delimiter)\n#3 is the fraction bar thickness (set to 0pt to make it disappear)\n\n#4 is either 0, 1, 2, or 3, where:\n\n0 denotes \\displaystyle\n1 denotes \\textstyle\n2 denotes \\scriptstyle\n3 denotes \\scriptscriptstyle\n\n#5 is the numerator\n#6 is the denominator",
    "examples": [
      "\\genfrac(]{0pt}{2}{a+b}{c+d}"
    ],
    "see_also": [
      "\\above",
      "\\abovewithdelims",
      "\\atop",
      "\\atopwithdelims",
      "\\cfrac",
      "\\dfrac",
      "\\frac",
      "\\over",
      "\\overwithdelims"
    ],
    "snippet": ""
  },
  {
    "name": "\\gets",
    "description": "&#x2190; \xA0\nclass REL\nleft arrow;\nnon-stretchy",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\gg",
    "description": "&#x226B; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\ggg",
    "description": "&#x22D9;\n\nclass REL\n\n&#x22D9;class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\gimel",
    "description": "&#x2137; \xA0\nclass ORD\nHebrew letter gimel",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\gtrapprox",
    "description": "&#x2A86;class REL\n&#x2A8A;class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\gneq",
    "description": "&#x2A88;class REL\n&#x2269;class REL\n&#x2269;class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\gtrsim",
    "description": "&#x2273;class REL\n&#x22E7;class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\grave",
    "description": "&#x02CB;\ngrave accent\n\\grave #1\nUsually, #1 is a single letter; \xA0otherwise, accent is centered over argument.",
    "examples": [
      "\\grave e",
      "\\grave E",
      "\\grave eu",
      "\\grave{eu}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\gt",
    "description": "&#x003E; \xA0 class REL\ngreater than",
    "examples": "",
    "see_also": [
      "\\ngtr"
    ],
    "snippet": ""
  },
  {
    "name": "\\gtrdot",
    "description": "&#x22D7; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\gtreqless",
    "description": "&#x22DB;class REL\n&#x2A8C;class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\gtrless",
    "description": "&#x2277; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\hat",
    "description": "&#x02CA;\nnon-stretchy hat accent\n\\hat #1\nUsually, #1 is a single letter; \xA0otherwise, accent is centered over argument.",
    "examples": [
      "\\hat\\imath",
      "\\hat\\jmath",
      "\\hat ab",
      "\\hat{ab}"
    ],
    "see_also": [
      "\\widehat"
    ],
    "snippet": ""
  },
  {
    "name": "\\hbar",
    "description": "&#x210F; \xA0\nclass ORD\nPlanck's constant",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\hbox",
    "description": "class ORD\nhorizontal box;\ncontents are treated as text, but you can switch to math mode inside;\ntext appears in \xA0\\rm\xA0\n\\hbox #1",
    "examples": [
      "\\hbox{\\alpha a }\\alpha a",
      "\\hbox{This is a sentence.}",
      "\\hbox{for all $x > 0$}"
    ],
    "see_also": [
      "\\rm"
    ],
    "snippet": ""
  },
  {
    "name": "\\hdashline",
    "description": "works in many of the environments\nto create a horizontal line (\\hline), or a horizontal dashed line (\\hdashline)\n\nPutting \xA0 \\hdashline \xA0 or \xA0 \\hline \xA0 first or last encases the entire structure\n(which is different from standard $\\,\\rm\\LaTeX\\,$ behavior):\n\n\\begin{matrix}\n\\hdashline\nx_{11} & x_{12} \\\\\nx_{21} & x_{22} \\\\\nx_{31} & x_{32}\n\\end{matrix}\n\nyields\n\n$\n\\begin{matrix}\n\\hdashline\nx_{11} & x_{12} \\\\\nx_{21} & x_{22} \\\\\nx_{31} & x_{32}\n\\end{matrix}\n$\n\n\\begin{matrix}\nx_{11} & x_{12} \\\\\nx_{21} & x_{22} \\\\\nx_{31} & x_{32} \\\\\n\\hline\n\\end{matrix}\n\nyields\n\n$\n\\begin{matrix}\nx_{11} & x_{12} \\\\\nx_{21} & x_{22} \\\\\nx_{31} & x_{32} \\\\\n\\hline\n\\end{matrix}\n$\n\nPutting \xA0 \\hdashline \xA0 or \xA0 \\hline \xA0 at the beginning of any subsequent row puts a line over that row:\n\n\\begin{matrix}\nx_{11} & x_{12} \\\\\nx_{21} & x_{22} \\\\\n\\hline\nx_{31} & x_{32}\n\\end{matrix}\n\nyields\n\n$\n\\begin{matrix}\nx_{11} & x_{12} \\\\\nx_{21} & x_{22} \\\\\n\\hline\nx_{31} & x_{32}\n\\end{matrix}\n$\n\nYou can combine effects, and put in struts (as desired) for additional vertical spacing:\n\n\\begin{matrix}\n\\hline\nx_{11} & x_{12} \\\\\nx_{21} & x_{22} \\strut \\\\\n\\hdashline\nx_{31} & x_{32} \\strut\n\\end{matrix}\n\nyields\n\n$\n\\begin{matrix}\n\\hline\nx_{11} & x_{12} \\\\\nx_{21} & x_{22} \\strut \\\\\n\\hdashline\nx_{31} & x_{32} \\strut\n\\end{matrix}\n$",
    "examples": [
      "\n\\begin{matrix}\n\\hdashline\nx_{11} & x_{12} \\\\\nx_{21} & x_{22} \\\\\nx_{31} & x_{32}\n\\end{matrix}\n",
      "\n\\begin{matrix}\nx_{11} & x_{12} \\\\\nx_{21} & x_{22} \\\\\nx_{31} & x_{32} \\\\\n\\hline\n\\end{matrix}\n"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\heartsuit",
    "description": "&#x2661; \xA0\nclass ORD",
    "examples": "",
    "see_also": [
      "\\clubsuit",
      "\\diamondsuit",
      "\\spadesuit"
    ],
    "snippet": ""
  },
  {
    "name": "\\hfil",
    "description": "horizontal glue; horizontal fill (added in MathJax 2.5);\ncan be used to set horizontal alignment in matrices and arrays (as in old-fashioned $\\,\\TeX\\,$ layout);\nit \u2018expands\u2019 to fill available horizontal space, pushing contents on right or left to the boundary",
    "examples": "",
    "see_also": [
      "\\hskip",
      "\\hspace",
      "\\kern",
      "\\mkern",
      "\\mskip",
      "\\mspace"
    ],
    "snippet": ""
  },
  {
    "name": "\\hom",
    "description": "class OP\nhomomorphism;\ndoes not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for examples",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\hookleftarrow",
    "description": "&#x21A9;non-stretchy\n&#x21AA;non-stretchy\n\nboth class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\hphantom",
    "description": "class ORD\nhorizontal phantom\n\nSometimes you want to pretend that something is there, for spacing reasons,\nbut you don't want it to appear\u2014you want it to be invisible\u2014you want it to be a phantom.\n\nThe box created by \xA0 \\hphantom \xA0 has the width of its argument,\nbut its height and depth are zero (so it doesn't contribute to any vertical spacing issues).\nIn other words, \\hphantom \xA0 creates horizontal space equal to that produced by its argument,\nbut doesn't create any vertical space.\n\\hphantom #1",
    "examples": "",
    "see_also": [
      "\\phantom",
      "\\vphantom"
    ],
    "snippet": ""
  },
  {
    "name": "\\href",
    "description": "used to make a math object into a link\n\\href{ <url> } #1\nwhere the argument (#1) is the clickable area",
    "examples": [
      "\\href{http://www.onemathematicalcat.org}{M^{A^{T^H}}}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\hskip",
    "description": "horizontal glue; horizontal space; horizontal skipping;\n\\hskip <dimen>",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\hslash",
    "description": "&#x210F; \xA0\nclass ORD\nperhaps an alternative form of Planck's constant",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\hspace",
    "description": "horizontal glue; horizontal space; horizontal skipping\n\\hspace <dimen>",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\Huge",
    "description": "both class ORD\nturns on huge mode and an even bigger Huge mode\n\n{\\Huge ... }\n{\\huge ... }",
    "examples": [
      "\\huge AaBb\\alpha\\beta123\\frac ab\\sqrt x",
      "{\\huge A B} A B",
      "A\\alpha\\huge A\\alpha \\Huge A\\alpha"
    ],
    "see_also": [
      "\\LARGE, \\Large, \\large"
    ],
    "snippet": ""
  },
  {
    "name": "\\iddots",
    "description": 'inner diagonal dots;\n\nThis macro must be supplied by the user, if desired.\nDavide Cervone provided the code (given here) in the\nMathJax User Group.\n\nTo use this macro, put the following definition in either inline or display mathematics:\n\n$\n\\def\\iddots{\n{\\kern3mu\\raise1mu{.}\\kern3mu\\raise6mu{.}\\kern3mu\\raise12mu{.}}}\n$ \n\nThen, in any subsequent mathematics:\n\n\\iddots\nyields\n\n$\\iddots$\n\nInstead of providing the definition inside math delimiters in the body,\nyou can add the definition to your configuration using the \xA0Macros\xA0 property of\nthe \xA0TeX\xA0 block:\n\n<script type="text/x-mathjax-config">\nMathJax.Hub.Config({\nTeX: {\nMacros: {\niddots: "{\\\\kern3mu\\\\raise1mu{.}\\\\kern3mu\\\\raise6mu{.}\\\\kern3mu\\\\raise12mu{.}}"\n}}});\n<\/script>',
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\idotsint",
    "description": "class OP\nchanges size;\ncan change limit placement using \\limits;\nsee the Big Operators Table for examples",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\iff",
    "description": "&#x27FA; \xA0 with a thick space on both sides\nif and only if; \xA0 is equivalent to;\nnon-stretchy",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\iiiint",
    "description": "four occurrences of &#x222B;\xA0\n&#x222D;\n&#x222C;\n&#x222B;\n\nall class OP;\nsee the Big Operators Table for examples\n\nCompare the different limit placements (both in display mode):\n\n\\int_a^byields$$\\int_a^b$$\n\\intop_a^byields$$\\intop_a^b$$",
    "examples": [
      "\\int_a^b",
      "\\intop_a^b"
    ],
    "see_also": [
      "\\intop"
    ],
    "snippet": ""
  },
  {
    "name": "\\intop",
    "description": "&#x222B; (with movable limits) \xA0\nclass OP\n\nSee the Big Operators Table for examples.",
    "examples": "",
    "see_also": [
      "\\iiiint, \\iiint, \\iint, \\int"
    ],
    "snippet": ""
  },
  {
    "name": "\\Im",
    "description": "&#x2111; \xA0\nclass ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\imath",
    "description": "&#x0131; \xA0\nclass ORD\n\na dotless \u2018i\u2019;\nbetter to use when accented",
    "examples": [
      "\\hat i",
      "\\hat\\imath"
    ],
    "see_also": [
      "\\jmath"
    ],
    "snippet": ""
  },
  {
    "name": "\\impliedby",
    "description": "&#x27F8; \xA0 with a thick space on both sides\nnon-stretchy",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\implies",
    "description": "&#x27F9; \xA0 with a thick space on both sides\nnon-stretchy",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\in",
    "description": "&#x2208; \xA0\nclass REL\nis in; \xA0 is an element of; \xA0 indicates membership in a set;",
    "examples": "",
    "see_also": [
      "\\ni",
      "\\notin",
      "\\owns"
    ],
    "snippet": ""
  },
  {
    "name": "\\inf",
    "description": "class OP\ninfimum; \xA0\ngreatest lower bound;\ndoes not change size;\ncan change limit placement using \\limits and  \\nolimits;\nsee the Big Operators Table for examples",
    "examples": [
      "\\inf_{\\rm limit}",
      "\\inf_{\\rm limit}"
    ],
    "see_also": [
      "\\sup"
    ],
    "snippet": ""
  },
  {
    "name": "\\infty",
    "description": "&#x221E; \xA0\nclass ORD\ninfinity",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\injlim",
    "description": "class OP\ninjective limit;\ndoes not change size;\ncan change limit placement using \\limits and  \\nolimits;\nsee the Big Operators Table for examples",
    "examples": "",
    "see_also": [
      "\\varinjlim"
    ],
    "snippet": ""
  },
  {
    "name": "\\intercal",
    "description": "&#x22BA; \xA0\nclass BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\iota",
    "description": "&#x03B9; \xA0\nclass ORD\nlowercase Greek letter iota",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\it",
    "description": "class ORD\nturns on math italic mode;\nto return to math italic mode if it had been turned off\n{\\it ... }",
    "examples": [
      "{\\bf ab \\it ab} ab",
      "\\rm for\\ all\\ {\\it x}\\ in\\ \\Bbb R",
      "\\Delta\\Gamma\\Lambda{\\it \\Delta\\Gamma\\Lambda}"
    ],
    "see_also": [
      "\\mathit",
      "\\mit"
    ],
    "snippet": ""
  },
  {
    "name": "\\jmath",
    "description": "&#x0237; \xA0\nclass ORD\na dotless \u2018j\u2019;\nbetter to use when accented",
    "examples": [
      "\\hat j",
      "\\hat\\jmath"
    ],
    "see_also": [
      "\\imath"
    ],
    "snippet": ""
  },
  {
    "name": "\\Join",
    "description": "&#x22C8; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\kappa",
    "description": "&#x03BA; \xA0\nclass ORD\n\nlowercase Greek letter kappa",
    "examples": "",
    "see_also": [
      "\\varkappa"
    ],
    "snippet": ""
  },
  {
    "name": "\\ker",
    "description": "class OP\nkernel;\ndoes not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for examples",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\kern",
    "description": "to get a specified amount of horizontal space;\na negative argument forces \u2018backing up\u2019, so items can overlap\n\\kern <dimen>",
    "examples": [
      "|\\kern 2ex|\\kern 2em|\\kern 2pt|",
      "\\rm I\\kern-2.5pt R"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\Lambda",
    "description": "uppercase Greek letter lambda\n\n&#x039B; \xA0\nclass ORD\n\nlowercase Greek letter lambda\n\n&#x03BB; \xA0\nclass ORD",
    "examples": "",
    "see_also": [
      "\\varLambda"
    ],
    "snippet": ""
  },
  {
    "name": "\\lambda",
    "description": "uppercase Greek letter lambda\n\n&#x039B; \xA0\nclass ORD\n\nlowercase Greek letter lambda\n\n&#x03BB; \xA0\nclass ORD",
    "examples": "",
    "see_also": [
      "\\varLambda"
    ],
    "snippet": ""
  },
  {
    "name": "\\land",
    "description": "logical AND\n\n&#x2227; \xA0\nclass BIN",
    "examples": "",
    "see_also": [
      "\\lor",
      "\\wedge"
    ],
    "snippet": ""
  },
  {
    "name": "\\langle",
    "description": "left angle bracket;\nnon-stretchy when used alone;\nstretchy when used with \xA0 \\left \xA0 or \xA0 \\right \xA0 (see below)\n\n&#x27E8; \xA0\nclass OPEN",
    "examples": [
      "\n\\left\\langle\n\\matrix{a & b\\cr c & d}\n\\right\\rangle\n"
    ],
    "see_also": [
      "\\rangle"
    ],
    "snippet": ""
  },
  {
    "name": "\\LARGE",
    "description": "turns on large typestyles; affects all math\n\nall class ORD\n\n{\\LARGE ... }\n{\\Large ... }\n{\\large ... }",
    "examples": [
      "\\Large AaBb\\alpha\\beta123\\frac ab",
      "{\\Large A B} A B",
      "AB \\large AB \\Large AB \\LARGE AB",
      "\\Large{AB}CD"
    ],
    "see_also": [
      "\\huge, \\Huge"
    ],
    "snippet": ""
  },
  {
    "name": "\\LaTeX",
    "description": "the LaTeX logo\n\nclass ORD",
    "examples": "",
    "see_also": [
      "\\TeX"
    ],
    "snippet": ""
  },
  {
    "name": "\\lbrace",
    "description": "left brace:\nnon-stretchy when used alone;\nstretchy when used with \xA0 \\left \xA0 or \xA0 \\right \xA0 (see below)\n\nclass OPEN",
    "examples": [
      "\\lbrace \\frac ab, c \\rbrace",
      "\\left\\lbrace \\frac ab, c \\right\\rbrace"
    ],
    "see_also": [
      "\\rbrace",
      "\\{ \\}"
    ],
    "snippet": ""
  },
  {
    "name": "\\lbrack",
    "description": "left bracket:\nnon-stretchy when used alone;\nstretchy when used with \xA0 \\left \xA0 or \xA0 \\right \xA0 (see below);\n\nclass OPEN",
    "examples": [
      "\\lbrack \\frac ab, c \\rbrack",
      "\\left\\lbrack \\frac ab, c \\right\\rbrack"
    ],
    "see_also": [
      "\\rbrack",
      "[\xA0]"
    ],
    "snippet": ""
  },
  {
    "name": "\\lceil",
    "description": "left ceiling;\nnon-stretchy when used alone;\nstretchy when used with \xA0 \\left \xA0 or \xA0 \\right \xA0 (see below)\n\n&#x2308; \xA0\nclass OPEN",
    "examples": [
      "\n\\left\\lceil\n\\matrix{a & b\\cr c & d}\n\\right\\rceil\n"
    ],
    "see_also": [
      "\\rceil",
      "\\lfloor",
      "\\rfloor"
    ],
    "snippet": ""
  },
  {
    "name": "\\ldotp",
    "description": "lower dot, punctuation symbol\n\n&#x002E; \xA0\nclass PUNCT",
    "examples": [
      "\\rm s \\ldotp h",
      "\\rm s.h"
    ],
    "see_also": [
      "\\cdotp"
    ],
    "snippet": ""
  },
  {
    "name": "\\ldots",
    "description": "lower dots; \xA0 ellipsis; \xA0 ellipses; \xA0 dot dot dot\n\n&#x2026; \xA0\nclass INNER",
    "examples": "",
    "see_also": [
      "\\cdots",
      "\\dots"
    ],
    "snippet": ""
  },
  {
    "name": "\\le",
    "description": "less than or equal to&#x2264; \xA0 class REL\nless than or equal to&#x2264; \xA0 class REL\nless than or equal to&#x2266; \xA0 class REL\nless than or equal to&#x2A7D; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\nleq",
      "\\nleqq",
      "\\nleqslant"
    ],
    "snippet": ""
  },
  {
    "name": "\\leadsto",
    "description": "&#x21DD; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\left",
    "description": "used for stretchy delimiters;\nsee the Variable-Sized Delimiters Table for details",
    "examples": [
      "\\left( \\frac12 \\right)",
      "\\left\\updownarrow \\phantom{\\frac12} \\right\\Updownarrow"
    ],
    "see_also": [
      "\\right"
    ],
    "snippet": ""
  },
  {
    "name": "\\leftarrow",
    "description": "left arrow; non-stretchy\n\n&#x2190; \xA0\nclass REL\n\nleft arrow; non-stretchy\n\n&#x21D0; \xA0\nclass REL",
    "examples": "",
    "see_also": [
      "\\nleftarrow",
      "\\nLeftarrow"
    ],
    "snippet": ""
  },
  {
    "name": "\\leftarrowtail",
    "description": "left arrow tail; non-stretchy\n\n&#x21A2; \xA0\nclass REL",
    "examples": "",
    "see_also": [
      "\\rightarrowtail"
    ],
    "snippet": ""
  },
  {
    "name": "\\leftharpoondown",
    "description": "left harpoon arrow; non-stretchy\n\n&#x21BD; \xA0\nclass REL\n\nleft harpoon arrow; non-stretchy\n\n&#x21BC; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\leftleftarrows",
    "description": "left left arrows; non-stretchy\n\n&#x21C7; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\leftrightarrow",
    "description": "left right arrow; non-stretchy\n\n&#x2194; \xA0\nclass REL\n\nleft right arrow; non-stretchy\n\n&#x21D4; \xA0\nclass REL",
    "examples": "",
    "see_also": [
      "\\nleftrightarrow",
      "\\nLeftrightarrow"
    ],
    "snippet": ""
  },
  {
    "name": "\\leftrightarrows",
    "description": "left right arrows; non-stretchy\n\n&#x21C6; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\leftrightharpoons",
    "description": "left right harpoons; non-stretchy\n\n&#x21CB; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\leftrightsquigarrow",
    "description": "left right squiqqle arrow; non-stretchy\n\n&#x21AD; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\leftroot",
    "description": "used to fine-tune the placement of the index inside\n\xA0 \\sqrt \xA0 or \xA0 \\root \xA0 (see examples)\n\n\\sqrt[... \\leftroot #1 ...]{...}\n\\root ... \\leftroot #1 ... \\of {...}\n\nwhere the argument is a small integer:\na positive integer moves the index to the left;\na negative integer moves the index to the right",
    "examples": [
      "\\sqrt[3]{x}",
      "\\sqrt[3\\leftroot1]{x}",
      "\\root 3 \\of x",
      "\\root 3\\leftroot{-1} \\of x",
      "\\root 3\\leftroot{-1}\\uproot2 \\of x"
    ],
    "see_also": [
      "\\uproot",
      "\\root"
    ],
    "snippet": ""
  },
  {
    "name": "\\leftthreetimes",
    "description": "&#x22CB; \xA0\nclass BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\leqalignno",
    "description": "equation alignment with optionally numbered (tagged) lines;\nin $\\rm\\TeX$, \xA0\\leqalignno\xA0 puts the tags on the left, but MathJax\ndoesn't implement this behavior;\ncurrently, tags appear in a column on the\nright separated from the equations by a fixed amount of space (so they\ndon't work like tags in the AMS math environments);\nthis may be fixed in a future version of MathJax\n\\leqalignno{ <math> & <math> & <equation tag> \\cr <repeat as needed> }\nthe first ampersand is placed where alignment is desired;\nthe second ampersand is used just before a tag;\nif there is no tag, then the final  \xA0 & <equation tag> \xA0 is omitted;\na double-backslash can be used in place of the \xA0\\cr\xA0;\nthe final \xA0 \\\\ \xA0 or \xA0 \\cr \xA0 is optional;\noutput is the same in both inline and display modes\n(except for the amount of vertical space before and after);",
    "examples": "",
    "see_also": [
      "\\eqalignno",
      "align environment"
    ],
    "snippet": ""
  },
  {
    "name": "\\lessapprox",
    "description": "",
    "examples": "",
    "see_also": [
      "\\lnapprox",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\lessdot",
    "description": "&#x22D6; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\lesseqgtr",
    "description": "&#x22DA; \xA0\nclass REL\n\n&#x2A8B; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\lessgtr",
    "description": "&#x2276; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\lesssim",
    "description": "",
    "examples": "",
    "see_also": [
      "\\lnsim",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\lfloor",
    "description": "left floor;\nnon-stretchy when used alone;\nstretchy when used with \xA0 \\left \xA0 or \xA0 \\right\n\n&#x230A; \xA0\nclass OPEN",
    "examples": "",
    "see_also": [
      "\\rfloor",
      "\\lceil",
      "\\rceil"
    ],
    "snippet": ""
  },
  {
    "name": "\\lg",
    "description": "does not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for examples\n\nclass OP",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\lgroup",
    "description": "left group;\nnon-stretchy when used alone;\nstretchy when used with \xA0 \\left \xA0 or \xA0 \\right\n\n&#x27EE; \xA0\nclass OPEN",
    "examples": [
      "\n\\left\\lgroup\n\\matrix{a & b\\cr c & d}\n\\right\\rgroup\n"
    ],
    "see_also": [
      "\\rgroup"
    ],
    "snippet": ""
  },
  {
    "name": "\\lhd",
    "description": "left-hand diamond\n\n&#x22B2; \xA0\nclass REL",
    "examples": "",
    "see_also": [
      "\\rhd"
    ],
    "snippet": ""
  },
  {
    "name": "\\lim",
    "description": "limit;\ndoes not change size;\ncan change limit placement using \xA0\\limits\xA0 and\n\xA0\\nolimits;\nsee the Big Operators Table for examples\n\nclass OP",
    "examples": [
      "\\lim_{n\\rightarrow\\infty} f(x) = \\ell",
      "\\lim_{n\\rightarrow\\infty} f(x) = \\ell"
    ],
    "see_also": [],
    "snippet": "\\lim_{@1@ \\rightarrow @2@} @3@ = @4@"
  },
  {
    "name": "\\liminf",
    "description": "limit inferior;\ndoes not change size;\ncan change limit placement using \xA0\\limits\xA0 and\n\xA0\\nolimits;\nsee the Big Operators Table for examples\n\nclass OP",
    "examples": [
      "\\liminf_{n\\rightarrow\\infty} x_n = \\ell",
      "\\liminf_{n\\rightarrow\\infty}\\ x_n = \\ell"
    ],
    "see_also": [
      "\\varliminf"
    ],
    "snippet": ""
  },
  {
    "name": "\\limits",
    "description": "used to set limits above/below any token of class OP;\nsee the Big Operators table for more information and examples",
    "examples": [
      "\\int_a^b f(x)\\,dx",
      "\\int\\limits_a^b f(x)\\,dx",
      "\\int_a^b f(x)\\,dx",
      "\\int\\limits_a^b f(x)\\,dx",
      "\\mathop{x}\\limits_0^1"
    ],
    "see_also": [
      "\\nolimits"
    ],
    "snippet": ""
  },
  {
    "name": "\\limsup",
    "description": "limit superior;\ndoes not change size;\ncan change limit placement using \xA0\\limits\xA0 and\n\xA0\\nolimits;\nsee the Big Operators Table for examples\n\nclass OP",
    "examples": [
      "\\limsup_{n\\rightarrow\\infty} x_n",
      "\\limsup_{n\\rightarrow\\infty}\\ x_n"
    ],
    "see_also": [
      "\\varlimsup"
    ],
    "snippet": ""
  },
  {
    "name": "\\ll",
    "description": "&x226A; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\llap",
    "description": "left overlap\n\nclass ORD\n\n\\llap #1\n\ncreates a box of width zero;\nthe argument is then placed just to the left of this zero-width box\n(and hence will overlap whatever lies to the left);\nproper use of \xA0\\llap\xA0 and \xA0\\rlap\xA0 in math expressions is somewhat delicate",
    "examples": [
      "a\\mathrel{{=}\\llap{/}}b",
      "{=}",
      "REL",
      "ORD",
      "REL",
      "a\\mathrel{{=}\\llap{/\\,}}b",
      "\\,",
      "a=\\mathrel{\\llap{/\\,}}b",
      "REL"
    ],
    "see_also": [
      "\\rlap"
    ],
    "snippet": ""
  },
  {
    "name": "\\llcorner",
    "description": "lower left corner&#x2514; \xA0 class REL\nlower right corner&#x2518; \xA0 class REL\n\nThese are technically delimiters, but MathJax doesn't stretch them like it should.",
    "examples": "",
    "see_also": [
      "\\ulcorner",
      "\\urcorner"
    ],
    "snippet": ""
  },
  {
    "name": "\\Lleftarrow",
    "description": "non-stretchy\n\n&#x21DA; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\lll",
    "description": "&#x22D8; \xA0\nclass REL\n\n&#x22D8; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\lmoustache",
    "description": "left moustache;\nnon-stretchy when used alone;\nstretchy when used with \xA0 \\left \xA0 or \xA0 \\right \xA0 (see below)\n\n&#x23B0; \xA0\nclass OPEN",
    "examples": [
      "\n\\left\\lmoustache\n\\phantom{\\matrix{a & b\\cr c & d}}\n\\right\\rmoustache\n"
    ],
    "see_also": [
      "\\rmoustache"
    ],
    "snippet": ""
  },
  {
    "name": "\\ln",
    "description": "natural logarithm;\ndoes not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for examples\n\nclass OP",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\lnapprox",
    "description": "",
    "examples": "",
    "see_also": [
      "\\lessapprox",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\lneq",
    "description": "",
    "examples": "",
    "see_also": [
      "\\leq",
      "REL",
      "\\leqq",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\lnot",
    "description": "logical not\n\n&#x00AC; \xA0\nclass ORD",
    "examples": "",
    "see_also": [
      "\\neg"
    ],
    "snippet": ""
  },
  {
    "name": "\\lnsim",
    "description": "",
    "examples": "",
    "see_also": [
      "\\lesssim",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\log",
    "description": "logarithm;\ndoes not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for examples\n\nclass OP",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\longleftarrow",
    "description": "non-stretchy\n\n&#x27F5; \xA0\nclass REL\n\nnon-stretchy\n\n&#x27F8; \xA0\nclass REL\n\nnon-stretchy\n\n&#x27F6; \xA0\nclass REL\n\nnon-stretchy\n\n&#x27F9; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\longleftrightarrow",
    "description": "non-stretchy\n\n&#x27F7; \xA0\nclass REL\n\nnon-stretchy\n\n&#x27FA; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\longmapsto",
    "description": "long maps to\n\n&#x27FC; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\mapsto"
    ],
    "snippet": ""
  },
  {
    "name": "\\looparrowleft",
    "description": "non-stretchy\n\n&#x21AB; \xA0\nclass REL\n\nnon-stretchy\n\n&#x21AC; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\lor",
    "description": "logical OR\n\n&#x2228; \xA0\nclass BIN",
    "examples": "",
    "see_also": [
      "\\land",
      "\\vee"
    ],
    "snippet": ""
  },
  {
    "name": "\\lower",
    "description": "\\lower <dimen> #1\nlowers the argument by the amount specified in <dimen>;\nin actual $\\rm\\TeX$, the argument to \xA0\\lower\xA0 (and \xA0\\raise\xA0) must be an\n\xA0\\hbox\xA0,\nbut in MathJax it can be any expression (using an \\hbox is allowed, but not required)",
    "examples": [
      "l\\lower 2pt {owe} r"
    ],
    "see_also": [
      "\\raise"
    ],
    "snippet": ""
  },
  {
    "name": "\\lozenge",
    "description": "&#x25CA; \xA0\nclass ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\Lsh",
    "description": "left shift; non-stretchy\n\n&#x21B0; \xA0\nclass REL",
    "examples": "",
    "see_also": [
      "\\Rsh"
    ],
    "snippet": ""
  },
  {
    "name": "\\lt",
    "description": "less than\n\n&#x003C; \xA0\nclass REL",
    "examples": "",
    "see_also": [
      "\\nless"
    ],
    "snippet": ""
  },
  {
    "name": "\\ltimes",
    "description": "",
    "examples": "",
    "see_also": [
      "\\rtimes",
      "BIN"
    ],
    "snippet": ""
  },
  {
    "name": "\\lvert",
    "description": "both non-stretchy when used alone;\n\n&#x2223; \xA0\nclass OPEN\n\nstretchy when used with \xA0 \\left \xA0 or \xA0 \\right\n\n&#x2225; \xA0\nclass OPEN",
    "examples": [
      "\\left\\lvert\\frac{\\frac ab}{\\frac cd}\\right\\rvert"
    ],
    "see_also": [
      "\\rvert",
      "\\rVert",
      "|",
      "\\|"
    ],
    "snippet": ""
  },
  {
    "name": "\\lvertneqq",
    "description": "&#x2268; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\maltese",
    "description": "&#x2720; \xA0\nclass ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\mapsto",
    "description": "maps to; non-stretchy math operator\n\n&#x21A6; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\longmapsto"
    ],
    "snippet": ""
  },
  {
    "name": "\\mathbb",
    "description": "blackboard-bold for uppercase letters and lowercase \u2018k\u2019;\nif lowercase blackboard-bold letters are not available, then they are typeset in a roman font\n\nclass ORD\n\n\\mathbb #1\nWhether lower-case letters are displayed in blackboard-bold, or not, depends on the fonts being used.\nThe MathJax web-based fonts don't have lowercase blackboard-bold, but the STIX fonts do;\nso users with the STIX fonts installed will be able to display lowercase blackboard-bold letters.",
    "examples": [
      "\\mathbb R",
      "\\mathbb ZR",
      "\\mathbb{AaBbKk}Cc",
      "\\mathbb{ABCDEFGHIJKLMNOPQRSTUVWXYZ}"
    ],
    "see_also": [
      "\\Bbb"
    ],
    "snippet": ""
  },
  {
    "name": "\\mathbf",
    "description": "boldface for uppercase and lowercase letters and digits\n\nclass ORD\n\n\\mathbf #1",
    "examples": [
      "\\mathbf{AaBb\\alpha\\beta123}",
      "\\mathbf ZR",
      "\\mathbf{uvw}xyz"
    ],
    "see_also": [
      "\\bf",
      "\\boldsymbol"
    ],
    "snippet": ""
  },
  {
    "name": "\\mathbin",
    "description": "gives the correct spacing to make an object into a binary operator;\nbinary operators have some extra space around them;\ncreates an element of class BIN\n\nclass BIN\n\n\\mathbin #1",
    "examples": [
      "a\\text{op} b",
      "a\\mathbin{\\text{op}} b",
      "a\\Diamond b",
      "a\\mathbin{\\Diamond}b"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\mathcal",
    "description": "calligraphic font for uppercase letters and digits\n\nclass ORD\n\n\\mathcal #1",
    "examples": [
      "\\mathcal{ABCDEFGHIJKLMNOPQRSTUVWXYZ}",
      "\\mathcal{0123456789}",
      "\\mathcal{abcdefghijklmnopqrstuvwxyz}",
      "abcdefghijklmnopqrstuvwxyz",
      "\\mathcal{AB}AB"
    ],
    "see_also": [
      "\\cal",
      "\\oldstyle"
    ],
    "snippet": ""
  },
  {
    "name": "\\mathchoice",
    "description": "provides content that is dependent on the current style (display, text, script, or scriptscript);\ncan be used in defining a macro for general use\n\\mathchoice #1 #2 #3 #4\nwhere:\n\n#1 is rendered when the \xA0\\mathchoice\xA0 appears in display style\n#2 is rendered when the \xA0\\mathchoice\xA0 appears in text style\n#3 is rendered when the \xA0\\mathchoice\xA0 appears in script style\n#4 is rendered when the \xA0\\mathchoice\xA0 appears in scriptscript style",
    "examples": [
      "\\mathchoice{D}{T}{S}{SS} \xA0 (in display style)",
      "\\mathchoice{D}{T}{S}{SS} \xA0 (in text style)",
      "\\mathchoice{D}{T}{S}{SS} \xA0 (in script style)",
      "\\mathchoice{D}{T}{S}{SS} \xA0 (in scriptscript style)"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\mathclose",
    "description": "forces the argument to be treated in the \u2018closing\u2019 class; \xA0 for example, like \u2018$)$\u2019 and \u2018$]$\u2019;\ncreates an element of class CLOSE\n\nclass CLOSE\n\n\\mathclose #1",
    "examples": [
      "a + \\lt b\\gt + c",
      "a + \\mathopen\\lt b\\mathclose\\gt + c"
    ],
    "see_also": [
      "\\mathopen"
    ],
    "snippet": ""
  },
  {
    "name": "\\mathfrak",
    "description": "fraktur font for uppercase and lowercase letters and digits\n(and a few other characters)\n\nclass ORD\n\n\\mathfrak #1",
    "examples": [
      "\\mathfrak{ABCDEFGHIJKLMNOPQRSTUVWXYZ}",
      "\\mathfrak{0123456789}",
      "\\mathfrak{abcdefghijklmnopqrstuvwxyz}",
      "\\mathfrak{AB}AB"
    ],
    "see_also": [
      "\\frak"
    ],
    "snippet": ""
  },
  {
    "name": "\\mathinner",
    "description": "some constructions are meant to appear \u2018inside\u2019 other formulas,\nand should be surrounded by additional space in certain circumstances;\nthis classification is forced on the argument by using \\mathinner\n\nclass INNER\n\n\\mathinner #1",
    "examples": [
      "ab\\text{inside}cd",
      "ab\\mathinner{\\text{inside}}cd"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\mathit",
    "description": "math italic mode\n\nclass ORD\n\n\\mathit #1",
    "examples": [
      "\\rm abc \\mathit{def} ghi"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\mathop",
    "description": "forces the argument to be treated in the \u2018large operator\u2019 class; \xA0 for example, like \u2018$\\sum$\u2019;\ncreates an element of class OP\n\nclass OP\n\n\\mathop #1",
    "examples": [
      "atbtc",
      "a\\mathop{t}b\\mathop{t}c",
      "\\star_a^b",
      "\\mathop{\\star}_a^b"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\mathopen",
    "description": "forces the argument to be treated in the \u2018opening\u2019 class; \xA0 for example, like \u2018$($\u2019 and \u2018$[$\u2019;\ncreates an element of class OPEN\n\nclass OPEN\n\n\\mathopen #1",
    "examples": [
      "a + \\lt b\\gt + c",
      "a + \\mathopen\\lt b\\mathclose\\gt + c"
    ],
    "see_also": [
      "\\mathclose"
    ],
    "snippet": ""
  },
  {
    "name": "\\mathord",
    "description": "forces the argument to be treated in the \u2018ordinary\u2019 class; \xA0 for example, like \u2018$/$\u2019;\nspacing is determined by pairs of tokens;\nthere is no extra spacing between adjacent ORD's (as in the second example below);\nthere is extra spacing between an \xA0ORD\xA0 and a \xA0BIN\xA0 (as in the first example below);\ncreates an element of class ORD\n\nclass ORD\n\n\\mathord #1",
    "examples": [
      "a+b+c",
      "a\\mathord{+}b\\mathord{+}c",
      "1,234,567",
      "1\\mathord{,}234{,}567"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\mathpunct",
    "description": "forces the argument to be treated in the \u2018punctuation\u2019 class; \xA0 for example, like \u2018$,$\u2019;\npunctuation tends to have some extra space after the symbol;\nreturns an element of class PUNCT\n\nclass PUNCT\n\n\\mathpunct #1",
    "examples": [
      "1.234",
      "1\\mathpunct{.}234"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\mathrel",
    "description": "forces the argument to be treated in the \u2018relation\u2019 class; \xA0 for example, like \u2018$=$\u2019 and \u2018$\\gt$\u2019;\nrelations have a bit more space on both sides than binary operators;\nreturns an element of class REL\n\nclass REL\n\n\\mathrel #1",
    "examples": [
      "a \\# b",
      "a \\mathrel{\\#} b"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\mathring",
    "description": "&#x2DA;\n\n\\mathring #1",
    "examples": [
      "\\mathring A",
      "\\mathring{AB}C"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\mathrm",
    "description": "roman typestyle for uppercase and lowercase letters\n\nclass ORD\n\n\\mathrm #1",
    "examples": [
      "\\mathrm{AaBb\\alpha\\beta123}",
      "\\mathrm ZR",
      "\\mathrm{uvw}xyz"
    ],
    "see_also": [
      "\\rm"
    ],
    "snippet": ""
  },
  {
    "name": "\\mathscr",
    "description": "script typestyle for uppercase letters;\nif lowercase script letters are not available, then they are typeset in a roman typestyle\n\nclass ORD\n\n\\mathscr #1\nWhether lower-case letters are displayed in script, or not, depends on the fonts being used.\nThe MathJax web-based fonts don't have lowercase script, but the STIX fonts do;\nso users with the STIX fonts installed will be able to display lowercase script letters.",
    "examples": [
      "\\mathscr{ABCDEFGHIJKLMNOPQRSTUVWXYZ}",
      "\\mathscr{0123456789}",
      "\\mathscr{abcdefghijklmnopqrstuvwxyz}",
      "abcdefghijklmnopqrstuvwxyz",
      "\\mathscr{AB}AB"
    ],
    "see_also": [
      "\\scr"
    ],
    "snippet": ""
  },
  {
    "name": "\\mathsf",
    "description": "sans serif typestyle for uppercase and lowercase letters and digits;\nalso affects uppercase greek (as do the other font switches,\nlike \\rm,\n\\it,\n\\bf,\n\\mathrm,\n\\mathit,\n\\mathbf, etc).\n\nclass ORD\n\n\\mathsf #1",
    "examples": [
      "\\mathsf{ABCDEFGHIJKLMNOPQRSTUVWXYZ}",
      "\\mathsf{0123456789}",
      "\\mathsf{abcdefghijklmnopqrstuvwxyz}",
      "\\Delta\\Gamma\\Lambda\\mathsf{\\Delta\\Gamma\\Lambda}",
      "abcdefghijklmnopqrstuvwxyz",
      "\\mathsf{AB}AB"
    ],
    "see_also": [
      "\\sf"
    ],
    "snippet": ""
  },
  {
    "name": "\\mathstrut",
    "description": "an invisible box whose width is zero;\nits height and depth are the same as a parenthesis \u2018$($\u2019;\ncan be used to achieve more uniform appearance in adjacent formulas\n\nclass ORD",
    "examples": [
      "\\sqrt3 + \\sqrt\\alpha",
      "\\sqrt{\\mathstrut 3} + \\sqrt{\\mathstrut\\alpha}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\mathtt",
    "description": "typewriter typestyle for uppercase and lowercase letters and digits;\nalso affects uppercase Greek\n\nclass ORD\n\n\\mathtt #1",
    "examples": [
      "\\mathtt{ABCDEFGHIJKLMNOPQRSTUVWXYZ}",
      "\\mathtt{0123456789}",
      "\\mathtt{abcdefghijklmnopqrstuvwxyz}",
      "abcdefghijklmnopqrstuvwxyz",
      "\\Delta\\Gamma\\Lambda\\mathtt{\\Delta\\Gamma\\Lambda}",
      "\\mathtt{AB}AB"
    ],
    "see_also": [
      "\\tt"
    ],
    "snippet": ""
  },
  {
    "name": "\\matrix",
    "description": "matrix (without any delimiters)\n\\matrix{ <math> & <math> ... \\cr <repeat as needed> }\nalignment occurs at the ampersands;\na double-backslash can be used in place of the \xA0\\cr\xA0;\nthe final \xA0 \\\\ \xA0 or \xA0 \\cr \xA0 is optional",
    "examples": [
      "\n\\matrix{ a & b \\cr c & d }\n"
    ],
    "see_also": [
      "\\array"
    ],
    "snippet": ""
  },
  {
    "name": "\\max",
    "description": "maximum;\ndoes not change size;\ncan change limit placement using \xA0\\limits\xA0 and\n\xA0\\nolimits;\nsee the Big Operators Table for examples\n\nclass OP",
    "examples": [
      "\\max_{\\rm sub}",
      "\\max_{\\rm sub}"
    ],
    "see_also": [
      "\\min"
    ],
    "snippet": ""
  },
  {
    "name": "\\mbox",
    "description": "creates a box just wide enough to hold the text in its argument;\nno linebreaks are allowed in the text;\ntext appears in \xA0\\rm\xA0\n\nclass ORD\n\n\\mbox <text argument>",
    "examples": [
      "a + b \\mbox{ (are you paying attention?) } = c",
      "a + b \\text{ (are you paying attention?) } = c"
    ],
    "see_also": [
      "\\rm"
    ],
    "snippet": ""
  },
  {
    "name": "\\measuredangle",
    "description": "&#x2221; \xA0\nclass ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\mho",
    "description": "&#x2127; \xA0\nclass ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\mid",
    "description": "the spacing is perfect for use in set-builder notation\n\n&#x2223; \xA0\nclass REL",
    "examples": [
      "\\{x | x\\gt 1\\}",
      "\\{x \\mid x\\gt 1\\}"
    ],
    "see_also": [
      "\\nmid",
      "\\shortmid",
      "\\nshortmid"
    ],
    "snippet": ""
  },
  {
    "name": "\\min",
    "description": "minimum;\ndoes not change size;\ncan change limit placement using \xA0\\limits\xA0 and\n\xA0\\nolimits;\nsee the Big Operators Table for examples\n\nclass OP",
    "examples": [
      "\\min_{\\rm sub}",
      "\\min_{\\rm sub}"
    ],
    "see_also": [
      "\\max"
    ],
    "snippet": ""
  },
  {
    "name": "\\mit",
    "description": "math italic typestyle\n\nclass ORD\n\n\\mit #1",
    "examples": [
      "\\mit{\\Gamma\\Delta\\Theta\\Omega}",
      "\\mathit{\\Gamma\\Delta\\Theta\\Omega}",
      "\\Gamma\\Delta\\Theta\\Omega"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\mkern",
    "description": "\\mkern <dimen>\ngives horizontal space",
    "examples": [
      "ab",
      "a\\mkern18mu b",
      "a\\mkern18pt b"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\mod",
    "description": "modulus operator; modulo;\nthe leading space depends on the style: \xA0 displaystyle has 18 mu,\nothers 12 mu;\n2 thinspaces of following space;\nfor things like equations modulo a number\n\\mod #1",
    "examples": [
      "3\\equiv 5 \\mod 2"
    ],
    "see_also": [
      "\\pmod",
      "\\bmod"
    ],
    "snippet": ""
  },
  {
    "name": "\\models",
    "description": "&#x22A8; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\moveleft",
    "description": "shifts boxes to the left or right\n\n\\moveleft <dimen> <box>\n\\moveright <dimen> <box>\n\nIn actual $\\rm\\TeX$, these require an \xA0\\hbox\xA0 (or some\nbox) as an argument, and can only appear in vertical mode;\nMathJax is less picky: you don't need an actual box, and MathJax\ndoesn't have a vertical mode;\nthese are not really designed as user-level macros, but instead allow existing macros to work;\nthe box takes up its original space (unlike something like\n\xA0\\llap\xA0 or \xA0\\rlap\xA0),\nbut its contents are shifted (without affecting its\nbounding box)",
    "examples": [
      "\\rm tight",
      "\\rm t\\moveleft3pt ight",
      "\\rm t\\moveleft3pt i\\moveleft3pt g\\moveleft3pt h\\moveleft3pt t",
      "\\rm t\\moveleft3pt i\\moveleft6pt g\\moveleft9pt h\\moveleft12pt t",
      "\\square\\square\\moveleft 2em {\\diamond\\diamond}",
      "\\square\\square\\moveright 2em {\\diamond\\diamond}"
    ],
    "see_also": [
      "\\raise",
      "\\lower"
    ],
    "snippet": ""
  },
  {
    "name": "\\mp",
    "description": "minus plus\n\n&#x2213; \xA0\nclass BIN",
    "examples": "",
    "see_also": [
      "\\pm"
    ],
    "snippet": ""
  },
  {
    "name": "\\mskip",
    "description": "\\mskip <dimen>\ngives horizontal space",
    "examples": [
      "ab",
      "a\\mskip18mu b",
      "a\\mskip18pt b"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\mspace",
    "description": "\\mspace <dimen>\ngives horizontal space",
    "examples": [
      "ab",
      "a\\mspace18mu b",
      "a\\mspace18pt b"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\mu",
    "description": "lowercase Greek letter mu\n\n&#x03BC; \xA0\nclass ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\multimap",
    "description": "&#x22B8; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\nabla",
    "description": "&#x2207; \xA0\nclass ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\natural",
    "description": "",
    "examples": "",
    "see_also": [
      "\\flat",
      "\\sharp",
      "ORD"
    ],
    "snippet": ""
  },
  {
    "name": "\\ncong",
    "description": "not congruent\n\n&#x2246; \xA0\nclass REL",
    "examples": "",
    "see_also": [
      "\\cong"
    ],
    "snippet": ""
  },
  {
    "name": "\\ne",
    "description": "not equal\n\n&#x2260; \xA0\nclass REL",
    "examples": "",
    "see_also": [
      "equals",
      "\\neq"
    ],
    "snippet": ""
  },
  {
    "name": "\\nearrow",
    "description": "northeast arrow; non-stretchy\n\n&#x2197; \xA0\nclass REL",
    "examples": "",
    "see_also": [
      "\\nwarrow",
      "\\searrow",
      "\\swarrow"
    ],
    "snippet": ""
  },
  {
    "name": "\\neg",
    "description": "negate; negation\n\n&#x00AC; \xA0\nclass ORD",
    "examples": "",
    "see_also": [
      "\\lnot"
    ],
    "snippet": ""
  },
  {
    "name": "\\negthinspace",
    "description": "negative thin space\nnegative medium space\nnegative thick space",
    "examples": [
      "ab",
      "a\\negthinspace b",
      "a\\negmedspace b",
      "a\\negthickspace b"
    ],
    "see_also": [
      "\\thinspace"
    ],
    "snippet": ""
  },
  {
    "name": "\\neq",
    "description": "",
    "examples": "",
    "see_also": [
      "equals",
      "\\ne",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\newcommand",
    "description": "for defining your own commands (control sequences, macros, definitions);\n\\newcommand\xA0 must appear (within math delimiters) before it is used;\nif desired, you can use the \xA0TeX.Macros\xA0\nproperty of the configuration to define\nmacros in the head\n\n\\newcommand\\myCommandName\n[ <optional # of arguments, from 1 to 9> ]\n{ <replacement text> }\n\nThe bracketed # of arguments is omitted when there are no arguments.\n\nExample (no arguments):\n\n\\newcommand\\myHearts\n{\\color{purple}{\\heartsuit}\\kern-2.5pt\\color{green}{\\heartsuit}}\n\n\\myHearts\\myHearts\n\nyields:\n$\n\\newcommand\\myHearts\n{\\color{purple}{\\heartsuit}\\kern-2.5pt\\color{green}{\\heartsuit}}\n\n\\myHearts\\myHearts\n$\n\nA definition may take one or more arguments:\n\nExample (two arguments):\n\n\\newcommand\\myHearts[2]\n{\\color{#1}{\\heartsuit}\\kern-2.5pt\\color{#2}{\\heartsuit}}\n\n\\myHearts{red}{blue}\n\nyields:\n$\n\\newcommand\\myHearts[2]\n{\\color{#1}{\\heartsuit}\\kern-2.5pt\\color{#2}{\\heartsuit}}\n\n\\myHearts{red}{blue}\n$",
    "examples": "",
    "see_also": [
      "\\def",
      "\\newenvironment"
    ],
    "snippet": ""
  },
  {
    "name": "\\newenvironment",
    "description": "for defining your own environments;\n\\newenvironment\xA0 must appear (within math delimiters) before it is used\n\n\\newenvironment{myEnvironmentName}\n[ <optional # of arguments, from 1 to 9> ]\n{ <replacement text for each occurrence of \\begin{myEnvironmentName}> }\n{ <replacement text for each occurrence of \\end{myEnvironmentName}> }\n\nThe bracketed # of arguments is omitted when there are no arguments.\nThere must not be a command having the same name as the environment:\nfor example, to use \xA0 \\begin{myHeart}...\\end{myHeart} \xA0 there may not be a command \\myHeart.\n\nExample (no arguments):\n\n\\newenvironment{myHeartEnv}\n{\\color{purple}{\\heartsuit}\\kern-2.5pt\\color{green}{\\heartsuit}}\n{\\text{ forever}}\n\n\\begin{myHeartEnv}\n\\end{myHeartEnv}\n\nyields:\n$\n\\newenvironment{myHeartEnv}\n{\\color{purple}{\\heartsuit}\\kern-2.5pt\\color{green}{\\heartsuit}}\n{\\text{ forever}}\n\n\\begin{myHeartEnv}\n\\end{myHeartEnv}\n$\n\nAn environment may take one or more arguments:\n\nExample (two arguments):\n\n\\newenvironment{myHeartEnv}[2]\n{\\color{#1}{\\heartsuit}\\kern-2.5pt\\color{#2}{\\heartsuit}}\n{\\text{ forever}}\n\n\\begin{myHeartEnv}{red}{blue}\n\\end{myHeartEnv}\n\nyields:\n$\n\\newenvironment{myHeartEnv}[2]\n{\\color{#1}{\\heartsuit}\\kern-2.5pt\\color{#2}{\\heartsuit}}\n{\\text{ forever}}\n\n\\begin{myHeartEnv}{red}{blue}\n\\end{myHeartEnv}\n$",
    "examples": "",
    "see_also": [
      "\\def",
      "\\newcommand"
    ],
    "snippet": ""
  },
  {
    "name": "\\newline",
    "description": "line separator in alignment modes and environments\n\nin MathJax, these are essentially the same: \xA0 \\cr,\n\xA0 \\\\",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\nexists",
    "description": "",
    "examples": "",
    "see_also": [
      "\\exists",
      "ORD"
    ],
    "snippet": ""
  },
  {
    "name": "\\ngeq",
    "description": "not greater than or equal to&#x2271; \xA0 class REL\nnot greater than or equal to&#x2271; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\geq",
      "\\geqq"
    ],
    "snippet": ""
  },
  {
    "name": "\\ngeqslant",
    "description": "slanted not greater than or equal to\n\n&#x2A88; \xA0\nclass REL",
    "examples": "",
    "see_also": [
      "\\geqslant"
    ],
    "snippet": ""
  },
  {
    "name": "\\ngtr",
    "description": "not greater than\n\n&#x226F; \xA0\nclass REL",
    "examples": "",
    "see_also": [
      "\\gt"
    ],
    "snippet": ""
  },
  {
    "name": "\\ni",
    "description": "backwards \u2018in\u2019; contains\n\n&#x220B; \xA0\nclass REL",
    "examples": "",
    "see_also": [
      "\\in"
    ],
    "snippet": ""
  },
  {
    "name": "\\nleftarrow",
    "description": "&#x219A; \xA0 class REL\n&#x21CD; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\leftarrow",
      "\\Leftarrow"
    ],
    "snippet": ""
  },
  {
    "name": "\\nleftrightarrow",
    "description": "&#x21AE; \xA0 class REL\n&#x21CE; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\leftrightarrow",
      "\\Leftrightarrow"
    ],
    "snippet": ""
  },
  {
    "name": "\\nleq",
    "description": "not less than or equal to&#x2270; \xA0 class REL\nnot less than or equal to&#x2270; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\leq",
      "\\leqq"
    ],
    "snippet": ""
  },
  {
    "name": "\\nleqslant",
    "description": "slanted not less than or equal to\n\n&#x2A87; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\leqslant"
    ],
    "snippet": ""
  },
  {
    "name": "\\nless",
    "description": "",
    "examples": "",
    "see_also": [
      "\\lt",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\nmid",
    "description": "",
    "examples": "",
    "see_also": [
      "\\mid",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\nobreakspace",
    "description": "",
    "examples": [
      "a\\nobreakspace b"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\nolimits",
    "description": "used to change the default placement of limits;\nonly allowed on items of class \xA0OP",
    "examples": [
      "\\sum_{k=1}^n a_k",
      "\\sum\\nolimits_{k=1}^n a_k"
    ],
    "see_also": [
      "\\limits"
    ],
    "snippet": ""
  },
  {
    "name": "\\normalsize",
    "description": "turns on normal size\n\nclass ORD\n\n{\\normalsize ... }",
    "examples": [
      "\\rm \\scriptsize script \\normalsize normal \\large large"
    ],
    "see_also": [
      "\\scriptsize"
    ],
    "snippet": ""
  },
  {
    "name": "\\not",
    "description": "used to negate relations\n\n&#x002F; \xA0\nclass REL",
    "examples": [
      "\\not\\gt",
      "\\ngtr"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\notag",
    "description": "used in AMS math environments that do automatic equation numbering,\nto suppress the equation number;\nsince MathJax doesn't implement auto-numbering (as of version 1.1a), it is basically a no-op,\nalthough it will cancel an explicit \xA0\\tag\xA0;\nwhen auto-numbering is added, then this will work as expected;\n\\notag\xA0 is included now for compatibility with existing TeX code (to\nprevent throwing an error, even though it has no effect)\n\nclass ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\notin",
    "description": "",
    "examples": "",
    "see_also": [
      "\\in",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\nparallel",
    "description": "not parallel\n\n&#x2226; \xA0\nclass REL",
    "examples": "",
    "see_also": [
      "\\parallel"
    ],
    "snippet": ""
  },
  {
    "name": "\\nprec",
    "description": "",
    "examples": "",
    "see_also": [
      "\\prec",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\npreceq",
    "description": "",
    "examples": "",
    "see_also": [
      "\\preceq",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\nrightarrow",
    "description": "&#x219B; \xA0 class REL\n&#x21CF; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\rightarrow",
      "\\Rightarrow"
    ],
    "snippet": ""
  },
  {
    "name": "\\nshortmid",
    "description": "",
    "examples": "",
    "see_also": [
      "\\mid",
      "\\shortmid",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\nshortparallel",
    "description": "",
    "examples": "",
    "see_also": [
      "\\parallel",
      "\\shortparallel",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\nsim",
    "description": "",
    "examples": "",
    "see_also": [
      "\\sim",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\nsubseteq",
    "description": "&#x2288; \xA0 class REL\n&#x2288; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\subseteq",
      "\\subseteqq"
    ],
    "snippet": ""
  },
  {
    "name": "\\nsucc",
    "description": "&#x2281; \xA0 class REL\n&#x22E1; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\succ",
      "\\succeq"
    ],
    "snippet": ""
  },
  {
    "name": "\\nsupseteq",
    "description": "&#x2289; \xA0 class REL\n&#x2289; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\supseteq",
      "\\supseteqq"
    ],
    "snippet": ""
  },
  {
    "name": "\\ntriangleleft",
    "description": "&#x22EA; \xA0 class REL\n&#x22EC; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\triangleleft",
      "\\trianglelefteq"
    ],
    "snippet": ""
  },
  {
    "name": "\\ntriangleright",
    "description": "&#x22EB; \xA0  class REL\n&#x22ED; \xA0  class REL",
    "examples": "",
    "see_also": [
      "\\triangleright",
      "\\trianglerighteq"
    ],
    "snippet": ""
  },
  {
    "name": "\\nu",
    "description": "lowercase Greek letter nu\n\n&#x03BD; \xA0\nclass ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\nVDash",
    "description": "&#x22AF; \xA0 class REL\n&#x22AE; \xA0 class REL\n&#x22AD; \xA0 class REL\n&#x22AC; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\Vdash",
      "\\vDash",
      "\\vdash"
    ],
    "snippet": ""
  },
  {
    "name": "\\nwarrow",
    "description": "northwest arrow; non-stretchy\n\n&#x2196; \xA0\nclass REL",
    "examples": "",
    "see_also": [
      "\\nearrow",
      "\\searrow",
      "\\swarrow"
    ],
    "snippet": ""
  },
  {
    "name": "\\odot",
    "description": "&#x2299; \xA0 class BIN\n&#x2296; \xA0 class BIN\n&#x2295; \xA0 class BIN\n&#x2298; \xA0 class BIN\n&#x2297; \xA0 class BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\oint",
    "description": "changes size;\ncan change limit placement using \\limits;\nsee the Big Operators Table for examples\n\n&#x222E; \xA0\nclass OP",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\oldstyle",
    "description": "this is intended for oldstyle numbers;\nit is a switch that turns on oldstyle mode;\nthe way it works in $\\rm\\TeX$ is to select the caligraphic font\n(which is where the oldstyle\nnumbers are stored),\nso it has the side effect of selecting\ncaligraphic upper-case letters;\nMathJax does the same for compatibility\n\nclass ORD\n\n{\\oldstyle ... }",
    "examples": [
      "\\oldstyle 0123456789",
      "\\oldstyle ABCDEFGHIJKLMNOPQRSTUVWXYZ",
      "\\oldstyle abcdefghijklmnopqrstuvwxyz",
      "abcdefghijklmnopqrstuvwxyz",
      "{\\oldstyle AB}AB",
      "\\oldstyle AB \\rm AB",
      "\\oldstyle{AB}CD"
    ],
    "see_also": [
      "\\cal",
      "\\mathcal"
    ],
    "snippet": ""
  },
  {
    "name": "\\omega",
    "description": "lowercase Greek letter omega&#x03C9; \xA0 class ORD\nuppercase Greek letter omega&#x03A9; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\varOmega"
    ],
    "snippet": ""
  },
  {
    "name": "\\omicron",
    "description": "lowercase Greek letter omicron\n\n&#x03BF; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\operatorname",
    "description": "This is similar to \xA0\\DeclareMathOperator,\nbut rather than defining a\nmacro, it produces an instance of an operator like \xA0\\lim\xA0.\n\nFor example,\n\\operatorname{myOp}\n\nis equivalent to the use of \xA0\\myOp\xA0, after having defined\n\n\\DeclareMathOperator{\\myOp}{myOp}\n\nIf displaystyle limits are desired in both inline and display modes,\nthen use \xA0operatorname*\xA0  instead of \xA0operatorname\n\nclass OP",
    "examples": [
      "\\operatorname{myFct}(x)",
      "\\operatorname*{myFct}_a^b(x)"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\over",
    "description": "general command for making fractions\n{ <subformula1> \\over <subformula2> }\nCreates a fraction:\nnumerator: \xA0 subformula1\ndenominator: \xA0 subformula2",
    "examples": [
      "a \\over b",
      "a+1 \\over b+2",
      "{a+1 \\over b+2}+c"
    ],
    "see_also": [
      "\\above",
      "\\abovewithdelims",
      "\\atop",
      "\\atopwithdelims",
      "\\cfrac",
      "\\dfrac",
      "\\frac",
      "\\genfrac",
      "\\overwithdelims"
    ],
    "snippet": ""
  },
  {
    "name": "\\overbrace",
    "description": "puts a (stretchy) over-brace over the argument;\ncan use \u2018^\u2019 to place an optional superscript over the overbrace;\ncan use \u2018_\u2019 to place an optional subscript below the argument\n\\overbrace #1",
    "examples": [
      "\\overbrace{x + \\cdots + x}^{n\\rm\\ times}_{\\text{(note here)}"
    ],
    "see_also": [
      "\\underbrace"
    ],
    "snippet": ""
  },
  {
    "name": "\\overleftarrow",
    "description": "&#x2190;stretchy over left arrow\n&#x2192;stretchy over right arrow\n&#x2194;stretchy over left right arrow\n\n\\overleftarrow #1\n\\overrightarrow #1\n\\overleftrightarrow #1",
    "examples": [
      "\\overleftarrow{\\text{the argument}}",
      "\\overrightarrow{AB}",
      "\\overrightarrow{AB\\strut}",
      "\\overleftrightarrow{\\hspace1in}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\overline",
    "description": "stretchy overline\n\n&#x203E;\n\n\\overline #1",
    "examples": [
      "\\overline{AB}",
      "\\overline a",
      "\\overline{\\text{a long argument}}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\overparen",
    "description": "puts a (stretchy) over-parenthesis (over-arc, frown) over the argument (new in MathJax 2.6)\n\\overparen #1",
    "examples": [
      "\n\\overparen a \\quad\n\\overparen ab \\quad \n\\overparen{ab} \\quad\n\\overparen{abc} \\quad\n\\overparen{abcdef} \\quad\n\\overparen{\\underparen{abcd}}\n"
    ],
    "see_also": [
      "\\underparen",
      "\\smallfrown",
      "\\frown",
      "\\smallsmile",
      "\\smile"
    ],
    "snippet": ""
  },
  {
    "name": "\\overset",
    "description": "\\overset #1 #2\noversets argument #1 (in scriptstyle) over argument #2",
    "examples": [
      "\\overset{\\rm top}{\\rm bottom}",
      "\\overset ab",
      "a\\,\\overset{?}{=}\\,b"
    ],
    "see_also": [
      "\\atop",
      "\\underset"
    ],
    "snippet": "\\overset{@1@}{@2@}"
  },
  {
    "name": "\\overwithdelims",
    "description": "general command for making fractions;\nuses default thickness for fraction bar for current size\nspecifies left and right enclosing delimiters\n\n{ <subformula1> \\overwithdelims <delim1> <delim2> <subformula2> }\n\nCreates a fraction:\nnumerator \xA0 subformula1\ndenominator \xA0 subformula2\ndelim1 \xA0 is put before the fraction\ndelim2 \xA0 is put after the fraction\nFor an empty delimiter, use \u2018.\u2019 in place of the delimiter.",
    "examples": [
      "a \\overwithdelims [ ] b",
      "a+1 \\overwithdelims . | b+2",
      "{a+1 \\overwithdelims \\{ \\} b+2}+c"
    ],
    "see_also": [
      "\\above",
      "\\abovewithdelims",
      "\\atop",
      "\\atopwithdelims",
      "\\cfrac",
      "\\dfrac",
      "\\frac",
      "\\genfrac",
      "\\over"
    ],
    "snippet": ""
  },
  {
    "name": "\\owns",
    "description": "",
    "examples": "",
    "see_also": [
      "\\ni",
      "\\in",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\parallel",
    "description": "",
    "examples": "",
    "see_also": [
      "\\nparallel",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\partial",
    "description": "",
    "examples": [
      "\\frac{\\partial f}{\\partial x}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\perp",
    "description": "perpendicular to\n\n&#x22A5; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\phantom",
    "description": "phantom (both horizontal and vertical)\n\nclass ORD\n\nSometimes you want to pretend that something is there, for spacing reasons,\nbut you don't want it to appear\u2014you want it to be invisible\u2014you want it to be a phantom.\n\nThe box created by \xA0 \\phantom \xA0 has width, height and depth equal to its argument.\nIn other words, \\phantom \xA0 creates horizontal and vertical space equal to that of its argument,\neven though the argument isn't visible.\n\\phantom #1",
    "examples": [
      "\n\\sqrt{\\frac ab}\n\\sqrt{\\phantom{\\frac ab}}\n",
      "\n\\frac{2x+3y-\\phantom{5}z}\n  {\\phantom{2}x+\\phantom{3}y+5z}\n",
      "\n\\Gamma^{\\phantom{i}j}_{i\\phantom{j}k}\n",
      "\n\\matrix{1&-1\\cr 2&\\phantom{-}3}\n"
    ],
    "see_also": [
      "\\hphantom",
      "\\vphantom"
    ],
    "snippet": ""
  },
  {
    "name": "\\phi",
    "description": "lowercase Greek letter phi\n&##x03D5; \xA0 class ORD\n\nuppercase Greek letter phi\n&#x03A6; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\varphi",
      "\\varPhi"
    ],
    "snippet": ""
  },
  {
    "name": "\\pi",
    "description": "lowercase Greek letter pi\n&#x03C0; \xA0 class ORD\n\nuppercase Greek letter Pi\n&#x03A0; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\varpi",
      "\\varPi"
    ],
    "snippet": ""
  },
  {
    "name": "\\pitchfork",
    "description": "&#x22D4; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\pm",
    "description": "plus or minus\n\n&x00B1; \xA0\nclass BIN",
    "examples": "",
    "see_also": [
      "\\mp"
    ],
    "snippet": ""
  },
  {
    "name": "\\pmatrix",
    "description": "matrix enclosed in parentheses\n\nclass OPEN\n\n\\pmatrix{ <math> & <math> ... \\cr <repeat as needed> }\nalignment occurs at the ampersands;\na double-backslash can be used in place of the \xA0\\cr\xA0;\nthe final \xA0 \\\\ \xA0 or \xA0 \\cr \xA0 is optional",
    "examples": [
      "\nA = \\pmatrix{\na_{11} & a_{12} & \\ldots & a_{1n} \\cr\na_{21} & a_{22} & \\ldots & a_{2n} \\cr\n\\vdots & \\vdots & \\ddots & \\vdots \\cr\na_{m1} & a_{m2} & \\ldots & a_{mn} \\cr\n}\n"
    ],
    "see_also": [
      "\\matrix"
    ],
    "snippet": "\\begin{pmatrix}\n	@1@\n\\end{pmatrix}"
  },
  {
    "name": "\\pmb",
    "description": "poor man's bold;\nit works by duplicating its argument slightly offset,\ngiving a bold effect (at least in the horizontal direction);\ndoesn't work well for horizontal lines, like $\\,-\\,$ or $\\,+\\,$\n\nclass ORD\n\n\\pmb #1",
    "examples": [
      "a \\pmb a \\boldsymbol a",
      "\\pmb{a+b-c}\\ \\ a+b-c"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\pmod",
    "description": "parenthesized modulus operator; parenthesized modulo;\n18 mu of leading space before the opening parenthesis in display style;\n8 mu of leading space before the opening parenthesis in other styles;\n6 mu of space after the word \xA0mod\n\\pmod #1",
    "examples": [
      "5\\equiv 8 \\pmod 3",
      "\\pmod{n+m}"
    ],
    "see_also": [
      "\\mod",
      "\\bmod"
    ],
    "snippet": ""
  },
  {
    "name": "\\pod",
    "description": "parenthesized argument with leading space;\n18 mu of leading space before the opening parenthesis in display style;\n8 mu of leading space before the opening parenthesis in other styles\n\\pod #1",
    "examples": [
      "x=y\\pod{\\text{inline mode}}",
      "x=y\\pod{\\text{display mode}}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\Pr",
    "description": "does not change size;\ndefault limit placement can be changed using \xA0\\limits\xA0 and  \xA0\\nolimits;\ndoes not change size;\nsee the Big Operators Table for more examples\n\nclass OP",
    "examples": [
      "\\Pr_{\\rm sub}",
      "\\Pr_{\\rm sub}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\prec",
    "description": "",
    "examples": "",
    "see_also": [
      "\\nprec",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\precapprox",
    "description": "&#x2AB7; \xA0 class REL\n&#x2AB9; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\preccurlyeq",
    "description": "&#x227C; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\preceq",
    "description": "&#x2AAF; \xA0 class REL\n&#x2AB5; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\npreceq"
    ],
    "snippet": ""
  },
  {
    "name": "\\precsim",
    "description": "&#x227E; \xA0 class REL\n&#x22E8; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\prime",
    "description": "prime character\n\n&#x2032; \xA0\nclass ORD",
    "examples": [
      "f'",
      "f\\prime",
      "f^\\prime",
      "f^{\\prime\\prime}",
      "f''"
    ],
    "see_also": [
      "\\backprime",
      "prime symbol"
    ],
    "snippet": ""
  },
  {
    "name": "\\prod",
    "description": "changes size;\ncan change limit placement using \\limits and\n\\nolimits;\nsee the Big Operators Table for more examples\n\n&#x220F; \xA0\nclass OP",
    "examples": [
      "\\prod_{j=1}^n",
      "\\prod_{j=1}^n"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\projlim",
    "description": "projective limit;\ndoes not change size;\ncan change limit placement using \\limits and\n\\nolimits;\nsee the Big Operators Table for examples\n\nclass OP",
    "examples": "",
    "see_also": [
      "\\varprojlim"
    ],
    "snippet": ""
  },
  {
    "name": "\\propto",
    "description": "",
    "examples": "",
    "see_also": [
      "\\varpropto",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\psi",
    "description": "lowercase Greek letter psi\n&#x03C9; \xA0 class ORD\n\nuppercase Greek letter psi\n&#x03A9; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\varPsi"
    ],
    "snippet": ""
  },
  {
    "name": "\\quad",
    "description": "\\quad \xA0 is a 1em space\n\\qquad \xA0 is a 2em space",
    "examples": [
      "|\\quad|\\quad|",
      "|\\qquad\\hphantom{|}|"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\raise",
    "description": "\\raise <dimen> #1\nraises the argument by the amount specified in <dimen>;\nin actual $\\rm\\TeX$, the argument to \xA0\\raise\xA0 (and \xA0\\lower\xA0) must be an\n\xA0\\hbox\xA0,\nbut in MathJax it can be any expression (using an \\hbox is allowed, but not required)",
    "examples": [
      "h\\raise 2pt {ighe} r"
    ],
    "see_also": [
      "\\lower"
    ],
    "snippet": ""
  },
  {
    "name": "\\rangle",
    "description": "right angle bracket;\nnon-stretchy when used alone;\nstretchy when used with \xA0 \\left \xA0 or \xA0 \\right \xA0 (see below)\n\n&#x27E9; \xA0 class CLOSE",
    "examples": [
      "\n\\left\\langle\n\\matrix{a & b\\cr c & d}\n\\right\\rangle\n"
    ],
    "see_also": [
      "\\langle"
    ],
    "snippet": ""
  },
  {
    "name": "\\rbrace",
    "description": "right brace;\nnon-stretchy when used alone;\nstretchy when used with \xA0 \\left \xA0 or \xA0 \\right \xA0 (see below)\n\nclass CLOSE",
    "examples": [
      "\n\\left\\lbrace\n\\matrix{a & b\\cr c & d}\n\\right\\rbrace\n"
    ],
    "see_also": [
      "\\lbrace"
    ],
    "snippet": ""
  },
  {
    "name": "\\rbrack",
    "description": "right bracket;\nnon-stretchy when used alone;\nstretchy when used with \xA0 \\left \xA0 or \xA0 \\right \xA0 (see below)\n\nclass CLOSE",
    "examples": [
      "\\lbrack \\frac ab, c \\rbrack",
      "\\left\\lbrack \\frac ab, c \\right\\rbrack"
    ],
    "see_also": [
      "\\lbrack",
      "[\xA0]"
    ],
    "snippet": ""
  },
  {
    "name": "\\rceil",
    "description": "right ceiling;\nnon-stretchy when used alone;\nstretchy when used with \xA0 \\left \xA0 or \xA0 \\right \xA0 (see below)\n\n&#x2309; \xA0 class CLOSE",
    "examples": [
      "\n\\left\\lceil\n\\matrix{a & b\\cr c & d}\n\\right\\rceil\n"
    ],
    "see_also": [
      "\\lceil",
      "\\lfloor",
      "\\rfloor"
    ],
    "snippet": ""
  },
  {
    "name": "\\Re",
    "description": "&#x211C; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\renewcommand",
    "description": "equivalent to \\newcommand;\nfor clarity of code, you may choose to use \xA0 \\renewcommand \xA0\nwhen re-defining a macro;\nthis is different from actual $\\,\\rm\\TeX\\,$,\nwhere \xA0\\renewcommand\xA0 only allows redefining of an existing command",
    "examples": "",
    "see_also": [
      "\\def",
      "\\newcommand",
      "\\newenvironment"
    ],
    "snippet": ""
  },
  {
    "name": "\\require",
    "description": "This is a MathJax-specific macro that can be used to load MathJax $\\rm\\TeX$ extensions (like the AMSmath extension)\nfrom within math mode, rather than having to include it in the configuration.\nFor example,\n\n$\\require{AMSsymbols}$\n\nwould cause MathJax to load the\n\xA0extensions/TeX/AMSsymbols.js\xA0 file at that point.\n\nSince many people use MathJax in blogs and wikis that may not have all the extensions loaded,\nthis makes it possible to load a lesser-used extension on a particular page,\nwithout having to include it in every page.",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\restriction",
    "description": "&#x21BE; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\rfloor",
    "description": "right floor;\nnon-stretchy when used alone;\nstretchy when used with \xA0 \\left \xA0 or \xA0 \\right\n\n&#x230B; \xA0 class CLOSE",
    "examples": "",
    "see_also": [
      "\\lfloor",
      "\\lceil",
      "\\rceil"
    ],
    "snippet": ""
  },
  {
    "name": "\\rgroup",
    "description": "right group;\nnon-stretchy when used alone;\nstretchy when used with \xA0 \\left \xA0 or \xA0 \\right\n\n&#x27EE; \xA0 class CLOSE",
    "examples": [
      "\n\\left\\lgroup\n\\matrix{a & b\\cr c & d}\n\\right\\rgroup\n"
    ],
    "see_also": [
      "\\lgroup"
    ],
    "snippet": ""
  },
  {
    "name": "\\rhd",
    "description": "right-hand diamond\n\n&#x22B3; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\lhd"
    ],
    "snippet": ""
  },
  {
    "name": "\\rho",
    "description": "lowercase Greek letter rho\n\n&#x0000; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\varrho"
    ],
    "snippet": ""
  },
  {
    "name": "\\right",
    "description": "used for stretchy delimiters;\nsee the Variable-Sized Delimiters Table for details\n\nCan be followed by:\n\ndelimiter:\nsample code:\nyields:\n\n( \xA0 )\n\\left( \\frac12 \\right)\n$\\left( \\frac12 \\right)$\n\n\\updownarrow\\Updownarrow\n\\left\\updownarrow \\phantom{\\frac12} \\right\\Updownarrow\n$\\left\\updownarrow \\phantom{\\frac12} \\right\\Updownarrow$",
    "examples": [
      "( \xA0 )",
      "\\left( \\frac12 \\right)",
      "\\updownarrow\\Updownarrow",
      "\\left\\updownarrow \\phantom{\\frac12} \\right\\Updownarrow"
    ],
    "see_also": [
      "\\left"
    ],
    "snippet": ""
  },
  {
    "name": "\\rightarrow",
    "description": "non-stretchy&#x2192; \xA0 class REL\nnon-stretchy&#x21D2; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\nrightarrow",
      "\\nRightarrow",
      "\\to"
    ],
    "snippet": ""
  },
  {
    "name": "\\rightarrowtail",
    "description": "right arrow tail; non-stretchy\n\n&#x21A3; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\leftarrowtail"
    ],
    "snippet": ""
  },
  {
    "name": "\\rightharpoondown",
    "description": "non-stretchy&#x21C1; \xA0 class REL\nnon-stretchy&#x21C0; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\leftharpoondown",
      "\\rightharpoondown"
    ],
    "snippet": ""
  },
  {
    "name": "\\rightleftarrows",
    "description": "right left arrows; non-stretchy\n\n&#x21C4; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\rightleftharpoons",
    "description": "right left harpoons; non-stretchy\n\n&#x21CC; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\rightrightarrows",
    "description": "right right arrows; non-stretchy\n\n&#x21C9; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\rightsquigarrow",
    "description": "right squiggle arrow; non-stretchy\n\n&#x21DD; \xA0class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\rightthreetimes",
    "description": "right three times\n\n&#x22CC; \xA0 class BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\risingdotseq",
    "description": "rising dot sequence\n\n&#x2253; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\fallingdotseq"
    ],
    "snippet": ""
  },
  {
    "name": "\\rlap",
    "description": "right overlap\n\nclass ORD\n\n\\rlap #1\n\ncreates a box of width zero;\nthe argument is then placed just to the right of this zero-width box\n(and hence will overlap whatever lies to the right)",
    "examples": [
      "a\\mathrel{\\rlap{\\;/}{=}}b"
    ],
    "see_also": [
      "\\llap"
    ],
    "snippet": ""
  },
  {
    "name": "\\rm",
    "description": "turns on roman; \xA0affects uppercase and lowercase letters, and digits;\nalso affects uppercase Greek\n\nclass ORD\n\n{\\rm ... }",
    "examples": [
      "\\rm AaBb\\alpha\\beta123",
      "{\\rm A B} A B",
      "\\Delta\\Gamma\\Lambda{\\rm\\Delta\\Gamma\\Lambda}",
      "\\rm AB \\bf CD",
      "\\rm{AB}CD"
    ],
    "see_also": [
      "\\text",
      "\\hbox",
      "\\mathrm"
    ],
    "snippet": ""
  },
  {
    "name": "\\rmoustache",
    "description": "right moustache;\nnon-stretchy when used alone;\nstretchy when used with \xA0 \\left \xA0 or \xA0 \\right \xA0 (see below)\n\n&#x23B1; \xA0 class CLOSE",
    "examples": [
      "\n\\left\\lmoustache\n\\phantom{\\matrix{a & b\\cr c & d}}\n\\right\\rmoustache\n"
    ],
    "see_also": [
      "\\lmoustache"
    ],
    "snippet": ""
  },
  {
    "name": "\\root ... \\of",
    "description": "\\root <index> \\of #1",
    "examples": [
      "\\root 3 \\of x",
      "\\root 13 \\of {\\frac 12}",
      "\\root n+1 \\of x + 2"
    ],
    "see_also": [
      "\\sqrt",
      "\\leftroot",
      "\\uproot"
    ],
    "snippet": ""
  },
  {
    "name": "\\Rrightarrow",
    "description": "non-stretchy\n\n&#x21DB; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\Rsh",
    "description": "right shift; non-stretchy\n\n&#x21B1; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\Lsh"
    ],
    "snippet": ""
  },
  {
    "name": "\\rtimes",
    "description": "",
    "examples": "",
    "see_also": [
      "\\ltimes",
      "BIN"
    ],
    "snippet": ""
  },
  {
    "name": "\\Rule",
    "description": "a MathJax-specific macro giving a rule with\na specified width, height, and depth\n\n\\Rule <dimenWidth> <dimenHeight> <dimenDepth>\n\nwhere each argument is a\ndimension",
    "examples": [
      "x\\Rule{3px}{1ex}{2ex}x",
      "x\\Rule{3px}{2ex}{1ex}x"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\rvert",
    "description": "&#x2223; \xA0 class CLOSE\n\n&#x2225; \xA0 class CLOSE\n\nboth non-stretchy when used alone;\nstretchy when used with \xA0 \\left \xA0 or \xA0 \\right",
    "examples": [
      "\\left\\lvert\\frac{\\frac ab}{\\frac cd}\\right\\rvert"
    ],
    "see_also": [
      "\\lvert",
      "\\lVert",
      "|",
      "\\|"
    ],
    "snippet": ""
  },
  {
    "name": "\\S",
    "description": "section symbol\n\n&#xA700; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\scr",
    "description": "turns on script typestyle for uppercase letters;\nlowercase letters are in a roman typestyle\n\nclass ORD\n\n{ \\scr ... }",
    "examples": [
      "\\scr ABCDEFGHIJKLMNOPQRSTUVWXYZ",
      "\\scr 0123456789abcdefghijklmnopqrstuvwxyz",
      "0123456789abcdefghijklmnopqrstuvwxyz",
      "{\\scr AB}AB",
      "\\scr AB \\rm AB",
      "\\scr{AB}CD"
    ],
    "see_also": [
      "\\mathscr"
    ],
    "snippet": ""
  },
  {
    "name": "\\scriptscriptstyle",
    "description": "used to over-ride automatic style rules and force scriptscript style;\nstays in force until the end of math mode or the braced group, or until another style is selected\n\nclass ORD\n\n{ \\scriptscriptstyle ... }",
    "examples": "",
    "see_also": [
      "\\displaystyle",
      "\\scriptstyle",
      "\\textstyle"
    ],
    "snippet": ""
  },
  {
    "name": "\\scriptsize",
    "description": "turns on script size\n\nclass ORD\n\n{ \\scriptsize ... }",
    "examples": [
      "\\rm  \\scriptsize script \\normalsize normal \\large large"
    ],
    "see_also": [
      "\\normalsize"
    ],
    "snippet": ""
  },
  {
    "name": "\\scriptstyle",
    "description": "used to over-ride automatic style rules and force script style;\nstays in force until the end of math mode or the braced group, or until another style is selected\n\nclass ORD\n\n{ \\scriptstyle ... }",
    "examples": "",
    "see_also": [
      "\\displaystyle",
      "\\scriptscriptstyle",
      "\\textstyle"
    ],
    "snippet": ""
  },
  {
    "name": "\\searrow",
    "description": "southeast arrow; non-stretchy\n\n&#x2198; \xA0\nclass ORD",
    "examples": "",
    "see_also": [
      "\\nearrow",
      "\\nwarrow",
      "\\swarrow"
    ],
    "snippet": ""
  },
  {
    "name": "\\sec",
    "description": "secant;\ndoes not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for more examples\n\nclass OP",
    "examples": [
      "\\sec x",
      "\\sec(2x-1)"
    ],
    "see_also": [
      "\\csc"
    ],
    "snippet": ""
  },
  {
    "name": "\\setminus",
    "description": "set minus\n\n&#x2216; \xA0\nclass BIN",
    "examples": [
      "A\\setminus B",
      "A\\backslash B"
    ],
    "see_also": [
      "\\backslash"
    ],
    "snippet": ""
  },
  {
    "name": "\\sf",
    "description": "turns on sans serif mode for uppercase and lowercase letters and digits,\nand for uppercase Greek\n\nclass ORD\n\n{ \\sf ... }",
    "examples": [
      "\\sf ABCDEFGHIJKLMNOPQRSTUVWXYZ",
      "\\sf 0123456789",
      "\\sf abcdefghijklmnopqrstuvwxyz",
      "ABCDE 01234 abcde",
      "{\\sf AB\\Delta\\Gamma\\Lambda}\\ AB\\Delta\\Gamma\\Lambda",
      "\\sf AB \\rm AB",
      "\\sf{AB}CD"
    ],
    "see_also": [
      "\\mathsf"
    ],
    "snippet": ""
  },
  {
    "name": "\\sharp",
    "description": "musical sharp symbol\n\n&#x266F; \xA0\nclass ORD",
    "examples": "",
    "see_also": [
      "\\flat",
      "\\natural"
    ],
    "snippet": ""
  },
  {
    "name": "\\shortmid",
    "description": "",
    "examples": "",
    "see_also": [
      "\\nshortmid",
      "\\mid",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\shortparallel",
    "description": "",
    "examples": "",
    "see_also": [
      "\\nshortparallel",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\shoveleft",
    "description": "forces flush left or flush right typesetting in a \xA0 \\multline \xA0 or \xA0 \\multline* \xA0 environment (see examples)",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\sideset",
    "description": "used for putting symbols at the four \u2018corners\u2019 of a large operator\n(like $\\displaystyle\\sum$ or $\\displaystyle\\prod$ )\n\n\\sideset{_#1^#2}{_#3^#4} <large operator>\n\nwhere:\n\n#1 = lower left\n#2 = upper left\n#3 = lower right\n#4 = upper right",
    "examples": [
      "\\sideset{_1^2}{_3^4}\\sum"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\sigma",
    "description": "lowercase Greek letter sigma\n&#x03C3; \xA0 class ORD\n\nuppercase Greek letter sigma\n&#x03A3; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\sum",
      "\\varsigma",
      "\\varSigma"
    ],
    "snippet": ""
  },
  {
    "name": "\\sim",
    "description": "&#x223C; \xA0 class REL\n&#x2243; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\nsim"
    ],
    "snippet": ""
  },
  {
    "name": "\\sin",
    "description": "sine;\ndoes not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for more examples\n\nclass OP",
    "examples": [
      "\\sin x",
      "\\sin(2x-1)"
    ],
    "see_also": [
      "\\cos"
    ],
    "snippet": ""
  },
  {
    "name": "\\sinh",
    "description": "hyperbolic sine;\ndoes not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for more examples\n\nclass OP",
    "examples": [
      "\\sinh x",
      "\\sinh(2x-1)"
    ],
    "see_also": [
      "\\cosh"
    ],
    "snippet": ""
  },
  {
    "name": "\\skew",
    "description": "used to finely adjust the positioning on accents;\nparticularly useful for adjusting superaccents (accents on accents);\nusually requires trial-and-error adjustment for proper positioning\n\\skew #1 <accent>\nwhere #1 is a positive integer (the skew amount)",
    "examples": [
      "\\hat A",
      "\\skew7\\hat A",
      "\\tilde M",
      "\\skew{8}\\tilde M",
      "\\hat{\\hat A}",
      "\\skew4\\hat{\\hat A}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\small",
    "description": "turns on small size; affects all math\n\nclass ORD\n\n{\\small ... }",
    "examples": [
      "ab{\\small cd} cd",
      "ab\\small{cd} cd"
    ],
    "see_also": [
      "\\tiny",
      "\\Tiny",
      "\\normalsize",
      "\\large",
      "\\Large",
      "\\LARGE",
      "\\huge",
      "\\Huge"
    ],
    "snippet": ""
  },
  {
    "name": "\\smallfrown",
    "description": "small frown\n\n&#x2322; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\frown",
      "\\smile",
      "\\smallsmile"
    ],
    "snippet": ""
  },
  {
    "name": "\\smallint",
    "description": "small integral\n\n&#x222B; \xA0 class OP",
    "examples": "",
    "see_also": [
      "\\int"
    ],
    "snippet": ""
  },
  {
    "name": "\\smallsetminus",
    "description": "small set minus\n\n&#x2216; \xA0 class BIN",
    "examples": "",
    "see_also": [
      "\\setminus"
    ],
    "snippet": ""
  },
  {
    "name": "\\smallsmile",
    "description": "small smile\n\n&#x2323; \xA0\nclass REL",
    "examples": "",
    "see_also": [
      "\\smile",
      "\\frown",
      "\\smallfrown"
    ],
    "snippet": ""
  },
  {
    "name": "\\smash",
    "description": "By using  \\smash, \\phantom,\n\\hphantom,\n\\vphantom,\n\\rlap,\n\\llap,\nyou can typeset any mathematics,\nyet give it the width and/or height and/or depth of any other mathematics.\n\\smash #1\nTypesets the argument in a box with the same width as the argument,\nbut with height and depth equal to zero.\nIn other words: the argument of \xA0 \\smash \xA0 is visible, and has its natural width,\nbut does not contribute any height or depth to the surrounding mathematics\n(hence leaving the surrounding mathematics to dictate height and depth).\n\nclass ORD\n\nHere are some scenarios:\n\nto vertically \xA0 \\smash \xA0 the box containing \xA0 this \xA0 and make it instead behave vertically like \xA0 that \xA0:\n\\smash{this}\\vphantom{that}",
    "examples": [
      "\n\\sqrt{\\frac ab}\n\\sqrt{\\smash{7}\\vphantom{\\frac ab}}\n",
      "\n\\sqrt{\\frac{\\frac ab}{\\frac cd}}\n\\sqrt{\\smash{\\frac ef}\\vphantom{\\frac{\\frac ab}{\\frac cd}}}\n"
    ],
    "see_also": [
      "\\hphantom",
      "\\vphantom",
      "\\phantom",
      "\\llap",
      "\\rlap"
    ],
    "snippet": ""
  },
  {
    "name": "\\smile",
    "description": "smile\n\n&#x2323; \xA0\nclass REL",
    "examples": "",
    "see_also": [
      "\\smallsmile",
      "\\frown",
      "\\smallfrown"
    ],
    "snippet": ""
  },
  {
    "name": "\\space",
    "description": "",
    "examples": [
      "a\\space b"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\Space",
    "description": "a MathJax-specific macro giving space with\na specified width, height, and depth\n\n\\Space <dimenWidth> <dimenHeight> <dimenDepth>\n\nwhere each argument is a\ndimension\n\nCompare:\n\na\\Rule{5px}{4ex}{2ex}^b_c d\nyields\n$a\\Rule{5px}{4ex}{2ex}^b_c d$\n\na\\Space{5px}{4ex}{2ex}^b_c d\nyields\n$a\\Space{5px}{4ex}{2ex}^b_c d$",
    "examples": [
      "a\\Rule{5px}{4ex}{2ex}^b_c d",
      "a\\Space{5px}{4ex}{2ex}^b_c d"
    ],
    "see_also": [
      "\\Rule"
    ],
    "snippet": ""
  },
  {
    "name": "\\spadesuit",
    "description": "",
    "examples": "",
    "see_also": [
      "\\clubsuit",
      "\\diamondsuit",
      "\\heartsuit",
      "ORD"
    ],
    "snippet": ""
  },
  {
    "name": "\\sphericalangle",
    "description": "&#x2222; \xA0\nclass ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\sqcap",
    "description": "square cap&#x2293; \xA0 class BIN\nsquare cup&#x2294; \xA0 class BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\sqrt",
    "description": "square root (and other roots)\n\nclass ORD\n\n\\sqrt #1\n\\sqrt[n]{op} \xA0 is equivalent to \xA0 \\root n \\of {op}",
    "examples": [
      "\\sqrt x",
      "\\sqrt xy",
      "\\sqrt{xy}",
      "\\sqrt[3]{x+1}"
    ],
    "see_also": [
      "\\root"
    ],
    "snippet": ""
  },
  {
    "name": "\\sqsubset",
    "description": "square subset&#x228F; \xA0 class REL\nsquare superset&#x2290; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\sqsubseteq",
    "description": "&#x2291; \xA0 class REL\n&#x2292; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\square",
    "description": "&#x25A1; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\stackrel",
    "description": "stack relations;\nyou can stack anything (not just relations) but it creates\nan item of class \xA0REL\xA0\n(and usually the bottom is a \xA0REL\xA0 to start with,\nbut doesn't have to be)\n\\stackrel #1 #2\nwhere #1 (in superscript style) is stacked on top of #2",
    "examples": [
      "\\stackrel{\\rm def}{=}",
      "\\stackrel{\\rm top}{\\rm bottom}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\star",
    "description": "&#x22C6; \xA0 class BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\strut",
    "description": "an invisible box with no width, height 8.6pt and depth 3pt;\nnote that \xA0 \\mathstrut \xA0 changes with the current size, but\n\xA0 \\strut \xA0 does not",
    "examples": [
      "\n\\sqrt{(\\ )}\n\\sqrt{\\mathstrut\\rm mathstrut}\n\\sqrt{\\strut\\rm strut}\n",
      "\n\\Tiny\n\\sqrt{(\\ )}\n\\sqrt{\\mathstrut\\rm mathstrut}\n\\sqrt{\\strut\\rm strut}\n",
      "\n\\Large\n\\sqrt{(\\ )}\n\\sqrt{\\mathstrut\\rm mathstrut}\n\\sqrt{\\strut\\rm strut}\n"
    ],
    "see_also": [
      "\\mathstrut"
    ],
    "snippet": ""
  },
  {
    "name": "\\style ",
    "description": "[HTML] non-standard;\nused to apply CSS styling to mathematics\n\\style #1 #2\nwhere:\n\n#1\xA0 is a (single) CSS style declaration\n#2\xA0 is the mathematics to be styled",
    "examples": [
      "\\frac{\\style{color:red}{x+1}}{y+2}\n",
      "\\style{background-color:yellow}{\\frac{x+1}{y+2}}\n"
    ],
    "see_also": [
      "\\class",
      "\\cssId"
    ],
    "snippet": ""
  },
  {
    "name": "\\subset",
    "description": "&#x2282; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\Subset",
    "description": "&#x22D0; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\subseteq",
    "description": "&#x2286; \xA0 class REL\n&#x228A; \xA0 class REL\n&#x2AC5; \xA0 class REL\n&#x2ACB; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\nsubseteq",
      "\\nsubseteqq",
      "\\varsubsetneq",
      "\\varsubsetneqq"
    ],
    "snippet": ""
  },
  {
    "name": "\\substack",
    "description": "use for multi-line subscripts or superscripts",
    "examples": [
      "\n\\sum_{\n\\substack{\n1\\lt i\\lt 3 \\\\\n1\\le j\\lt 5\n}}\na_{ij}\n",
      "\n^{\\substack{\\text{a very} \\\\\n\\text{contrived} \\\\\n\\text{example}\n}}\n{\\frac ab}_{\\substack{\n\\text{isn't} \\\\\n\\text{it?}\n}}\n"
    ],
    "see_also": [
      "\\begin{subarray}"
    ],
    "snippet": ""
  },
  {
    "name": "\\succ",
    "description": "",
    "examples": "",
    "see_also": [
      "\\nsucc",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\succapprox",
    "description": "&#x2AB8; \xA0 class REL\n&#x2ABA; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\succcurlyeq",
    "description": "&#x227D; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\succeq",
    "description": "&#x2AB0; \xA0 class REL\n&#x2AB6; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\nsucceq"
    ],
    "snippet": ""
  },
  {
    "name": "\\succsim",
    "description": "&#x227F; \xA0 class REL\n&#x22E9; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\sum",
    "description": "summation notation;\nchanges size;\ncan change limit placement using \\limits and  \\nolimits;\nsee the Big Operators Table for examples\n\n&#x2211; \xA0 class OP",
    "examples": "",
    "see_also": [
      "\\Sigma"
    ],
    "snippet": ""
  },
  {
    "name": "\\sup",
    "description": "supremum;\nleast upper bound;\ndoes not change size;\ncan change limit placement using \\limits and  \\nolimits;\nsee the Big Operators Table for examples\n\nclass OP",
    "examples": [
      "\\sup_{\\rm limit}",
      "\\sup_{\\rm limit}"
    ],
    "see_also": [
      "\\inf"
    ],
    "snippet": ""
  },
  {
    "name": "\\supset",
    "description": "&#x2283; \xA0\nclass REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\Supset",
    "description": "&#x22D1; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\supseteq",
    "description": "&#x2287; \xA0 class REL\n&#x228B; \xA0 class REL\n&#x2AC6; \xA0 class REL\n&#x2ACC; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\nsupseteq",
      "\\nsupseteqq",
      "\\varsupsetneq",
      "\\varsupsetneqq"
    ],
    "snippet": ""
  },
  {
    "name": "\\surd",
    "description": "&#x221A; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\swarrow",
    "description": "southwest arrow; non-stretchy\n\n&#x2199; \xA0\nclass REL",
    "examples": "",
    "see_also": [
      "\\nearrow",
      "\\nwarrow",
      "\\searrow"
    ],
    "snippet": ""
  },
  {
    "name": "\\tag",
    "description": "used primarily in AMS math environments to\nget tags (equation numbers, labels);\ncan, however, be used on any equation;\nthe argument of \xA0\\tag\xA0 is typeset in text mode, but\nmath mode can be used within the text:\nfor example, \xA0\\tag{\\$\\bullet\\$}\xA0\nYou can use dollar signs in text-mode regardless of the settings of the \xA0inlineMath\xA0 delimiters in the\ntex2jax preprocessor.\n\\tag #1",
    "examples": [
      "\n\\eqalign{\n3x - 4y &= 5\\cr\nx + 7 &= -2y\n} \n\\tag{3.1c}\n"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\tan",
    "description": "tangent;\ndoes not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for more examples\n\nclass OP",
    "examples": [
      "\\tan x",
      "\\tan(2x-1)"
    ],
    "see_also": [
      "\\cot"
    ],
    "snippet": ""
  },
  {
    "name": "\\tanh",
    "description": "hyperbolic tangent;\ndoes not change size;\ndefault limit placement is the same in both inline and display modes;\ncan change limit placement using \\limits;\nsee the Big Operators Table for more examples\n\nclass OP",
    "examples": [
      "\\tanh x",
      "\\tanh(2x-1)"
    ],
    "see_also": [
      "\\cosh",
      "\\sinh"
    ],
    "snippet": ""
  },
  {
    "name": "\\tau",
    "description": "lowercase Greek letter tau\n\n&#x03C4; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\tbinom",
    "description": "notation commonly used for binomial coefficients; in textstyle\n\\tbinom #1 #2",
    "examples": [
      "\\tbinom n k",
      "\\tbinom n k",
      "\\binom n k",
      "\\tbinom{n-1}k-1",
      "\\tbinom{n-1}{k-1}"
    ],
    "see_also": [
      "\\binom",
      "\\choose",
      "\\dbinom"
    ],
    "snippet": ""
  },
  {
    "name": "\\TeX",
    "description": "the TeX logo\n\nclass ORD",
    "examples": [
      "\\TeX",
      "\\rm\\TeX"
    ],
    "see_also": [
      "\\LaTeX"
    ],
    "snippet": ""
  },
  {
    "name": "\\text",
    "description": "\\text: \xA0 text\n\\textbf: \xA0 boldface text\n\\textit: \xA0 italic text\n\\textrm: \xA0 roman text\n\\textsf: \xA0 sans serif text (added in MathJax 2.4)\n\\texttt: \xA0 typewriter text (added in MathJax 2.4)\n\nused to produce text-mode material (in a given font) within a mathematical expression;\nMathJax does not process any macros within the text (unlike $\\rm\\TeX$ itself);\nyou can get math mode within the text using \xA0\\(...\\)\xA0 delimiters\n\nclass ORD\n\n\\text #1\n\\textbf #1\n\\textit #1\n\\textrm #1\n\\textsf #1\n\\texttt #1",
    "examples": [
      "|x| = x \\text{ for all \\(x \\ge 0\\)}",
      "\\text{\\alpha in text mode }\\alpha",
      "\\textbf{\\alpha in textbf mode }\\alpha",
      "\\textit{\\alpha in textit mode }\\alpha",
      "\\textrm{\\alpha in textrm mode }\\alpha",
      "\\textsf{\\alpha in textsf mode }\\alpha",
      "\\texttt{\\alpha in texttt mode }\\alpha"
    ],
    "see_also": [
      "\\bf",
      "\\mathbf",
      "\\it",
      "\\mathit",
      "\\rm",
      "\\mathrm",
      "\\sf",
      "\\mathsf",
      "\\tt",
      "\\mathtt"
    ],
    "snippet": ""
  },
  {
    "name": "\\textstyle",
    "description": "used to over-ride automatic style rules and force text (inline) style;\nstays in force until the end of math mode or the braced group, or until another style is selected\n\nclass ORD\n\n{ \\textstyle ... }",
    "examples": "",
    "see_also": [
      "\\displaystyle",
      "\\scriptstyle",
      "\\scriptscriptstyle"
    ],
    "snippet": ""
  },
  {
    "name": "\\tfrac",
    "description": "textstyle fraction\n\\tfrac #1 #2",
    "examples": [
      "\\tfrac ab \\frac ab",
      "\\tfrac ab \\frac ab"
    ],
    "see_also": [
      "\\frac",
      "\\dfrac"
    ],
    "snippet": ""
  },
  {
    "name": "\\therefore",
    "description": "&#x2234 \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\theta",
    "description": "lowercase Greek letter theta&#x03B8; \xA0 class ORD\nuppercase Greek letter theta&#x0398; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\vartheta",
      "\\varTheta"
    ],
    "snippet": ""
  },
  {
    "name": "\\thickapprox",
    "description": "",
    "examples": "",
    "see_also": [
      "\\approx"
    ],
    "snippet": ""
  },
  {
    "name": "\\thicksim",
    "description": "",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\thinspace",
    "description": "thin space; normally $\\frac 16$ of a quad",
    "examples": "",
    "see_also": [
      "symbols for spaces",
      "\\negthinspace"
    ],
    "snippet": ""
  },
  {
    "name": "\\tilde",
    "description": "non-stretchy tilde accent\n\n&#x02DC;\n\n\\tilde #1\nUsually, #1 is a single letter; \xA0otherwise, accent is centered over argument.",
    "examples": [
      "\\tilde e",
      "\\tilde E",
      "\\tilde eu",
      "\\tilde{eu}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\times",
    "description": "&#x00D7; \xA0 class BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\tiny",
    "description": "turns on tiny; a bit smaller than \\Tiny\n\nclass ORD\n\n{\\tiny ... }",
    "examples": [
      "\\tiny AaBb\\alpha\\beta123",
      "{\\tiny A B} A B",
      "\\tiny AB \\Tiny CD",
      "\\tiny{AB}CD"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\Tiny",
    "description": "turns on Tiny; a bit bigger than \\tiny\n\nclass ORD\n\n{\\Tiny ... }",
    "examples": [
      "\\Tiny AaBb\\alpha\\beta123",
      "{\\Tiny A B} A B",
      "\\Tiny AB \\tiny CD",
      "\\Tiny{AB}CD"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\to",
    "description": "non-stretchy\n\n&#x2192; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\rightarrow"
    ],
    "snippet": ""
  },
  {
    "name": "tool tips",
    "description": "Tool tips are not built into MathJax,\nbut you can click here to benefit from\na posting by Davide P. Cervone (April 2011) at the\nMathJax Users Group.",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\top",
    "description": "&#x22A4; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\triangle",
    "description": "&#x25B3; \xA0 class ORD\n&#x25BD; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\ntriangleleft",
      "\\ntriangleright",
      "\\vartriangle",
      "\\vartriangleleft",
      "\\vartriangleright"
    ],
    "snippet": ""
  },
  {
    "name": "\\triangleleft",
    "description": "&#x25C3; \xA0 class BIN\n&#x25B9; \xA0 class BIN",
    "examples": "",
    "see_also": [
      "\\ntriangleleft",
      "\\ntriangleright",
      "\\vartriangle",
      "\\vartriangleleft",
      "\\vartriangleright"
    ],
    "snippet": ""
  },
  {
    "name": "\\trianglelefteq",
    "description": "&#x22B4; \xA0 class REL\n&#x22B5 \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\ntrianglelefteq",
      "\\ntrianglerighteq"
    ],
    "snippet": ""
  },
  {
    "name": "\\triangleq",
    "description": "&#x225C; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\tt",
    "description": "turns on typewriter type\n\nclass ORD\n\n{\\tt ... }",
    "examples": [
      "\\tt AaBb\\alpha\\beta123",
      "{\\tt A B} A B",
      "\\tt AB \\rm CD",
      "\\tt{AB}CD"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\twoheadleftarrow",
    "description": "non-stretchy &#x219E; \xA0 class REL\nnon-stretchy&#x21A0; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\ulcorner",
    "description": "upper left corner\n&#x250C; \xA0 class REL\n\nupper right corner\n&#x2510; \xA0 class REL\n\nThese are technically delimiters, but MathJax\ndoesn't stretch them.\nThey are valid after \xA0\\left,\n\xA0\\right, and the various \xA0\\big\xA0 commands.",
    "examples": "",
    "see_also": [
      "\\llcorner",
      "\\lrcorner"
    ],
    "snippet": ""
  },
  {
    "name": "\\underbrace",
    "description": "puts a (stretchy) under-brace under the argument;\ncan use \u2018^\u2019 to place an optional superscript over the argument;\ncan use \u2018_\u2019 to place an optional subscript below the underbrace\n\\underbrace #1",
    "examples": [
      "\\underbrace{x + \\cdots + x}_{n\\rm\\ times}^{\\text{(note here)}"
    ],
    "see_also": [
      "\\overbrace"
    ],
    "snippet": ""
  },
  {
    "name": "\\underleftarrow",
    "description": "stretchy under left arrow\n&#x2190;\n\nstretchy under right arrow\n&#x2192;\n\nstretchy under left right arrow\n&#x2194;\n\n\\underleftarrow #1\n\\underrightarrow #1\n\\underleftrightarrow #1",
    "examples": [
      "\\underleftarrow{\\text{the argument}}",
      "\\underrightarrow{AB}",
      "\\underrightarrow{AB\\strut}",
      "\\underleftrightarrow{\\hspace1in}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\underline",
    "description": "stretchy underline\n\n&#x005F;\n\n\\underline #1",
    "examples": [
      "\\underline{AB}",
      "\\underline a",
      "\\underline{\\text{a long argument}}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\underparen",
    "description": "puts a (stretchy) under-parenthesis (under-arc, smile) under the argument (new in MathJax 2.6)\n\\underparen #1",
    "examples": [
      "\n\\underparen a \\quad\n\\underparen ab \\quad \n\\underparen{ab} \\quad\n\\underparen{abc} \\quad\n\\underparen{abcdef} \\quad\n\\underparen{\\overparen{abcd}}\n"
    ],
    "see_also": [
      "\\overparen",
      "\\smallfrown",
      "\\frown",
      "\\smallsmile",
      "\\smile"
    ],
    "snippet": ""
  },
  {
    "name": "\\underset",
    "description": "\\underset #1 #2\nundersets argument #1 (in scriptstyle) under argument #2;\nthe top item is properly aligned with the surrounding text (their baselines match)",
    "examples": [
      "\\underset{\\rm bottom}{\\rm top}",
      "\\underset ab"
    ],
    "see_also": [
      "\\overset"
    ],
    "snippet": "\\underset{@1@}{@2@}"
  },
  {
    "name": "\\unicode",
    "description": "implements a \xA0\\unicode{}\xA0 extension to $\\rm\\TeX$\nthat allows arbitrary unicode code points to be entered in mathematics;\ncan optionally specify height and depth of character (width is determined by browser);\ncan optionally specify the default font from which to take the character;\nonce a size and font are provided for a given unicode point, they need not be specified again in subsequent\n\xA0\\unicode{}\xA0 calls for that character\n\nclass ORD\n\n\\unicode[optHeight,optDepth][optFont]#1",
    "examples": [
      "\\unicode{x263a}",
      "&#x263a;",
      "\\unicode[.55,0.05]{x22D6}",
      "\\unicode[.55,0.05][Geramond]{x22D6}",
      "\\unicode[Geramond]{x22D6}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\unlhd",
    "description": "underlined left-hand (left-pointing) diamond\n&#x22B4; \xA0 class REL\n\nunderlined right-hand (right-pointing) diamond\n&#x22B5; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\uparrow",
    "description": "non-stretchy\n&#x2191; \xA0 class REL\n\nnon-stretchy\n&#x21D1; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\updownarrow",
    "description": "non-stretchy\n&#x2195; \xA0 class REL\n\nnon-stretchy\n&#x21D5; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\upharpoonleft",
    "description": "non-stretchy\n&#x21BF; \xA0 class REL\n\nnon-stretchy\n&#x21BE; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\uplus",
    "description": "&#x228E; \xA0 class BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\uproot",
    "description": "used to fine-tune the placement of the index inside\n\xA0 \\sqrt \xA0 or \xA0 \\root \xA0 (see examples)\n\n\\sqrt[... \\uproot #1 ...]{...}\n\\root ... \\uproot #1 ... \\of {...}\n\nwhere the argument is a small integer:\na positive integer moves the index up;\na negative integer moves the index down\n\nIn actual TeX, \xA0\\uproot\xA0 is not allowed in\n\xA0\\root\xA0,\nso this is a difference between MathJax and $\\rm\\TeX$.",
    "examples": [
      "\\sqrt[3]{x}",
      "\\sqrt[3\\uproot2]{x}",
      "\\root 3 \\of x",
      "\\root 3\\uproot{-2} \\of x"
    ],
    "see_also": [
      "\\leftroot",
      "\\root"
    ],
    "snippet": ""
  },
  {
    "name": "\\upsilon",
    "description": "lowercase Greek letter upsilon\n&#x03C5; \xA0 class ORD\n\nuppercase Greek letter upsilon\n&#x03A5; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\varupsilon",
      "\\varUpsilon"
    ],
    "snippet": ""
  },
  {
    "name": "\\upuparrows",
    "description": "non-stretchy\n\n&#x21C8; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\varDelta",
    "description": "uppercase Greek letter delta; variant\n\n&#x0394; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\Delta"
    ],
    "snippet": ""
  },
  {
    "name": "\\varepsilon",
    "description": "lowercase Greek letter epsilon; variant\n\n&#x03B5; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\epsilon"
    ],
    "snippet": ""
  },
  {
    "name": "\\varGamma",
    "description": "uppercase Greek letter gamma; variant\n\n&#x0393; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\Gamma"
    ],
    "snippet": ""
  },
  {
    "name": "\\varinjlim",
    "description": "injective limit; variant;\ndoes not change size;\ncan change limit placement using \\limits and  \\nolimits;\nsee the Big Operators Table for examples\n\nclass OP",
    "examples": "",
    "see_also": [
      "\\injlim"
    ],
    "snippet": ""
  },
  {
    "name": "\\varkappa",
    "description": "lowercase Greek letter kappa; variant\n\n&#x03F0; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\kappa"
    ],
    "snippet": ""
  },
  {
    "name": "\\varLambda",
    "description": "uppercase Greek letter lambda; variant\n\n&#x039B; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\Lambda"
    ],
    "snippet": ""
  },
  {
    "name": "\\varlimsup",
    "description": "limit superior; variant\nclass OP\n\nlimit inferior; variant\nclass OP\n\ndo not change size;\ncan change limit placement using \xA0\\limits\xA0 and\n\xA0\\nolimits;\nsee the Big Operators Table for examples",
    "examples": "",
    "see_also": [
      "\\limsup",
      "\\liminf"
    ],
    "snippet": ""
  },
  {
    "name": "\\varnothing",
    "description": "",
    "examples": "",
    "see_also": [
      "\\emptyset",
      "ORD"
    ],
    "snippet": ""
  },
  {
    "name": "\\varOmega",
    "description": "uppercase Greek letter omega; variant\n\n&#x03A9; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\Omega"
    ],
    "snippet": ""
  },
  {
    "name": "\\varphi",
    "description": "lowercase Greek letter phi; variant\n\n&#x03C6; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\phi"
    ],
    "snippet": ""
  },
  {
    "name": "\\varPhi",
    "description": "uppercase Greek letter phi; variant\n\n&#x03A6; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\Phi"
    ],
    "snippet": ""
  },
  {
    "name": "\\varpi",
    "description": "lowercase Greek letter pi; variant\n\n&#x03D6; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\pi"
    ],
    "snippet": ""
  },
  {
    "name": "\\varPi",
    "description": "uppercase Greek letter pi; variant\n\n&#x03A0; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\Pi"
    ],
    "snippet": ""
  },
  {
    "name": "\\varprojlim",
    "description": "projective limit; variant;\ndoes not change size;\ncan change limit placement using \\limits and\n\\nolimits;\nsee the Big Operators Table for examples",
    "examples": "",
    "see_also": [
      "\\projlim"
    ],
    "snippet": ""
  },
  {
    "name": "\\varpropto",
    "description": "proportional to; variant\n\n&#x221D; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\propto"
    ],
    "snippet": ""
  },
  {
    "name": "\\varPsi",
    "description": "uppercase Greek letter pi; variant\n\n&#x03A8; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\Psi"
    ],
    "snippet": ""
  },
  {
    "name": "\\varrho",
    "description": "lowercase Greek letter rho; variant\n\n&#x03F1; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\rho"
    ],
    "snippet": ""
  },
  {
    "name": "\\varsigma",
    "description": "lowercase Greek letter sigma; variant\n\n&#x03C2; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\sigma"
    ],
    "snippet": ""
  },
  {
    "name": "\\varSigma",
    "description": "uppercase Greek letter sigma; variant\n\n&#x03C2; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\Sigma"
    ],
    "snippet": ""
  },
  {
    "name": "\\varsubsetneq",
    "description": "&#x228A; \xA0 class REL\n&#x2ACB; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\subsetneq",
      "\\subsetneqq"
    ],
    "snippet": ""
  },
  {
    "name": "\\varsupsetneq",
    "description": "&#x228B; \xA0 class REL\n&#x2ACC; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\supsetneq",
      "\\supsetneqq"
    ],
    "snippet": ""
  },
  {
    "name": "\\vartheta",
    "description": "lowercase Greek letter theta; variant&#x03D1; \xA0 class ORD\nuppercase Greek letter theta; variant&#x0398; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\theta",
      "\\Theta"
    ],
    "snippet": ""
  },
  {
    "name": "\\vartriangle",
    "description": "&#x25B3; \xA0 class REL\n&#x22B2; \xA0 class REL\n&#x22B3; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\triangle",
      "\\triangleleft",
      "\\triangleright"
    ],
    "snippet": ""
  },
  {
    "name": "\\varUpsilon",
    "description": "uppercase Greek letter upsilon; variant\n\n&#x03A5; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\upsilon"
    ],
    "snippet": ""
  },
  {
    "name": "\\varXi",
    "description": "uppercase Greek letter xi; variant\n\n&#x039E; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\Xi"
    ],
    "snippet": ""
  },
  {
    "name": "\\vcenter",
    "description": "\\vcenter #1\ncenters the argument on the \u2018math axis\u2019,\nwhich is at\nhalf the height of an \u2018x\u2019, or about the position of a minus sign;\none of the reasons for \xA0\\vcenter\xA0 is to get stretchy delimiters to match the\ncontents better",
    "examples": [
      "\\left(\\Rule{1ex}{2em}{0pt}\\right)",
      "\\left(\\vcenter{\\Rule{1ex}{2em}{0pt}}\\right)",
      "\\left(\\frac{a+b}{\\dfrac{c}{d}}\\right)",
      "\\left(\\vcenter{\\frac{a+b}{\\dfrac{c}{d}}}\\right)"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\vdash",
    "description": "",
    "examples": "",
    "see_also": [
      "\\nvdash",
      "REL"
    ],
    "snippet": ""
  },
  {
    "name": "\\Vdash",
    "description": "&#x22A9; \xA0 class REL\n&#x22A8; \xA0 class REL",
    "examples": "",
    "see_also": [
      "\\nVdash",
      "\\nvDash"
    ],
    "snippet": ""
  },
  {
    "name": "\\vdots",
    "description": "vertical dots\n\n&#x22EE; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\vec",
    "description": "non-stretchy vector symbol\n\\vec #1",
    "examples": [
      "\\vec v",
      "\\vec{AB}"
    ],
    "see_also": [
      "\\overrightarrow"
    ],
    "snippet": ""
  },
  {
    "name": "\\vee",
    "description": "",
    "examples": "",
    "see_also": [
      "\\lor",
      "BIN"
    ],
    "snippet": ""
  },
  {
    "name": "\\veebar",
    "description": "&#x22BB; \xA0 class BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\verb",
    "description": "verbatim mode;\nuseful for code snippets and for displaying special characters \u2018as is\u2019 (i.e., not interpreted by MathJax).\nOnly works in display mode.\nUsually, verbatim content is typeset in a sans serif font.\n\\verb $\\diamond$ <non-interpreted material> $\\diamond$\nwhere \xA0 $\\diamond$ \xA0 denotes a non-letter character that does not appear in the <non-interpreted material>.\n\nTo use  \xA0\\verb \xA0:\n\nFirst look through the material that is to be typeset \u2018as is\u2019 (verbatim).\nChoose a non-letter character that does not appear in this material.\n\nThis chosen non-letter character will mark the beginning and end of the verbatim material,\nas illustrated in the",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\vert",
    "description": "class ORD\n&#x2225; \xA0 class ORD\n\nboth non-stretchy when used alone; stretchy when used with \xA0 \\left \xA0 or \xA0 \\right",
    "examples": "",
    "see_also": [
      "|",
      "\\|",
      "\\lvert",
      "\\lVert",
      "\\rvert",
      "\\rVert"
    ],
    "snippet": ""
  },
  {
    "name": "\\vphantom",
    "description": "vertical phantom\n\nSometimes you want to pretend that something is there, for spacing reasons,\nbut you don't want it to appear\u2014you want it to be invisible\u2014you want it to be a phantom.\n\nThe box created by \xA0 \\vphantom \xA0 has the height and depth of its argument,\nbut its width is zero (so it doesn't contribute to any horizontal spacing issues).\nIn other words, \\vphantom \xA0 creates vertical space equal to that produced by its argument,\nbut doesn't create any horizontal space.\n\\vphantom #1",
    "examples": [
      "\\binom{\\frac ab}c  \\binom{\\vphantom{\\frac ab}?}c"
    ],
    "see_also": [
      "\\phantom",
      "\\hphantom",
      "\\smash"
    ],
    "snippet": ""
  },
  {
    "name": "\\Vvdash",
    "description": "&#x22AA; \xA0 class REL",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\wedge",
    "description": "",
    "examples": "",
    "see_also": [
      "\\land",
      "BIN"
    ],
    "snippet": ""
  },
  {
    "name": "\\widehat",
    "description": "stretchy hat accent\n\n&#x02C6;\n\n\\widehat #1",
    "examples": [
      "\\widehat a",
      "\\widehat A",
      "\\widehat AB",
      "\\widehat{AB}"
    ],
    "see_also": [
      "\\hat"
    ],
    "snippet": ""
  },
  {
    "name": "\\widetilde",
    "description": "stretchy tilde accent\n\n&#x02DC;\n\n\\widetilde #1",
    "examples": [
      "\\widetilde a",
      "\\widetilde A",
      "\\widetilde AB",
      "\\widetilde{AB}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\wp",
    "description": "\u2018wriggly\u2019 letter p\n\n&#x2118; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\wr",
    "description": "\u2018wriggle\u2019 symbol;\n\n&#x2240; \xA0 class BIN",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\Xi",
    "description": "uppercase Greek letter xi\n\n&#x039E; \xA0 class ORD",
    "examples": "",
    "see_also": [
      "\\varXi"
    ],
    "snippet": ""
  },
  {
    "name": "\\xi",
    "description": "lowercase Greek letter xi\n\n&#x03BE; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\xleftarrow",
    "description": "stretchy arrows with mathematical overset and optional mathematical underset\n\nclass REL\n\n\\xleftarrow[optionalArgument] #1\n\\xrightarrow[optionalArgument] #1\n\nwhere the optional arguments (inside brackets, if desired) appear below the arrows (see examples).",
    "examples": [
      "\\xrightarrow a",
      "\\xrightarrow ab",
      "\\xrightarrow{ab}",
      "\\xleftarrow{\\text{see equation (1)}}",
      "\\xrightarrow[f]{\\text{see (1)}}"
    ],
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\yen",
    "description": "&#x00A5; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "\\zeta",
    "description": "lowercase Greek letter zeta\n\n&#x03B6; \xA0 class ORD",
    "examples": "",
    "see_also": [],
    "snippet": ""
  },
  {
    "name": "align",
    "description": "For vertical alignment of two or more lines at one or more places:\n\nampersand(s) \u2018&\u2019 are used to indicate desired alignments (see",
    "examples": "",
    "see_also": [
      "\\eqalign",
      "\\eqalignno",
      "\\leqalignno"
    ],
    "snippet": "\\begin{align}\n	@1@\n\\end{align}"
  },
  {
    "name": "align*",
    "description": "[May 2011] same as align",
    "examples": "",
    "see_also": [],
    "snippet": "\\begin{align*}\n	@1@\n\\end{align*}"
  },
  {
    "name": "alignat",
    "description": "For vertical alignment of two or more lines at one or more places;\nproduces a more horizontally-compressed display than align:\n\nthe alignat environment is started with \xA0 \\begin{alignat}{<num>}\xA0,\nwhere \xA0 num \xA0 is a positive integer ($1,2,3,\\ldots$) that indicates the number of places\nwhere alignment is desired\n\nampersand(s) \u2018&\u2019 are used to indicate desired alignments (see",
    "examples": "",
    "see_also": [
      "\\eqalignat",
      "\\eqalignatno",
      "\\leqalignatno"
    ],
    "snippet": "\\begin{alignat}\n	@1@\n\\end{alignat}"
  },
  {
    "name": "alignat*",
    "description": "[May 2011] same as alignat",
    "examples": "",
    "see_also": [],
    "snippet": "\\begin{alignat*}\n	@1@\n\\end{alignat*}"
  },
  {
    "name": "array",
    "description": "Used to create an array (matrix),\nwhere columns can be individually left-justified,\ncentered, or right-justified.\n\nsuppose that $n$ columns are desired in the array;\nthen, $n-1$ ampersands are used to separate the columns\n\nthe array environment is started with \xA0 \\begin{array}{<justification info>}\xA0,\nwhere \xA0 <justification info> \xA0 is a series of $n$ letters, one for each column:\n\n\u2018l\u2019 for left-justified\n\u2018c\u2019 for centered\n\u2018r\u2019 for right-justified\n\npipe character(s) \u2018|\u2019 can be used in the justification information to specify\noptional separating vertical line(s) (see example below)\n\na double backslash \u2018\\\\\u2019 or carriage return \u2018\\cr\u2019 separates rows\n\nCompare these scenarios:\n\nboth columns left-justified:\n\n\\begin{array}{ll}\naaa & b\\cr\nc   & ddd\n\\end{array}\n\nyields\n$$\n\\begin{array}{ll}\naaa & b\\cr\nc   & ddd\n\\end{array}\n$$\n\nboth columns right-justified:\n\n\\begin{array}{rr}\naaa & b\\cr\nc   & ddd\n\\end{array}\n\nyields\n$$\n\\begin{array}{rr}\naaa & b\\cr\nc   & ddd\n\\end{array}\n$$\n\nboth columns centered, with separating line:\n\n\\begin{array}{c|c}\naaa & b\\cr\nc   & ddd\n\\end{array}\n\nyields\n$$\n\\begin{array}{c|c}\naaa & b\\cr\nc   & ddd\n\\end{array}\n$$\n\nfirst column left-justified; second column right-justified:\n\n\\begin{array}{lr}\naaa & b\\cr\nc & ddd\n\\end{array}\n\nyields\n$$\n\\begin{array}{lr}\naaa & b\\cr\nc & ddd\n\\end{array}\n$$\n\nPutting a pipe character \u2018|\u2019 at the beginning or end of\nthe justification info encloses the entire structure,\nwhich is different from standard $\\,\\rm\\TeX\\,$:\n\n\\begin{array}{|lr}\naaa & b\\cr\nc & ddd\n\\end{array}\n\nyields\n$$\n\\begin{array}{|lr}\naaa & b\\cr\nc & ddd\n\\end{array}\n$$",
    "examples": "",
    "see_also": [
      "\\begin{matrix}",
      "\\begin{subarray}"
    ],
    "snippet": "\\begin{array}\n	@1@\n\\end{array}"
  },
  {
    "name": "Bmatrix",
    "description": "Used to create a matrix (an array) with braces $\\{\\,,\\,\\}$ as enclosing delimiters;\ncolumns are centered.\n\nsuppose that $n$ columns are desired in the array;\nthen, $n-1$ ampersands are used to separate the columns\n\na double backslash \u2018\\\\\u2019 or carriage return \u2018\\cr\u2019 separates rows",
    "examples": [
      "\n\\begin{Bmatrix}\naaa & b\\cr\nc   & ddd\n\\end{Bmatrix}\n"
    ],
    "see_also": [
      "\\begin{array}",
      "\\begin{matrix}"
    ],
    "snippet": "\\begin{Bmatrix}\n	@1@\n\\end{Bmatrix}"
  },
  {
    "name": "bmatrix",
    "description": "Used to create a matrix (an array) with brackets $[\\,,\\,]$ as enclosing delimiters;\ncolumns are centered.\n\nsuppose that $n$ columns are desired in the array;\nthen, $n-1$ ampersands are used to separate the columns\n\na double backslash \u2018\\\\\u2019 or carriage return \u2018\\cr\u2019 separates rows",
    "examples": [
      "\n\\begin{bmatrix}\naaa & b\\cr\nc   & ddd\n\\end{bmatrix}\n"
    ],
    "see_also": [
      "\\begin{array}",
      "\\begin{matrix}"
    ],
    "snippet": "\\begin{bmatrix}\n	@1@\n\\end{bmatrix}"
  },
  {
    "name": "cases",
    "description": "Used for piecewise-defined functions\n\nan ampersand \u2018&\u2019 is used to separate the function cases and their definitions\na double backslash \u2018\\\\\u2019 or carriage return \u2018\\cr\u2019 separates rows",
    "examples": [
      "\n|x| =\n\\begin{cases}\nx  & \\text{ if } x\\ge 0 \\\\\n-x & \\text{ if } x \\lt 0\n\\end{cases}\n"
    ],
    "see_also": [
      "\\cases"
    ],
    "snippet": "\\begin{cases}\n	@1@\n\\end{cases}"
  },
  {
    "name": "eqnarray",
    "description": "for \u2018equation arrays\u2019;\naligns at one or more places;\nsurround the character(s) to be aligned with ampersands, as shown below;\ncontent between alignment characters (or between alignment characters and end-of-line) is left-justified;\na double backslash \u2018\\\\\u2019 or carriage return \u2018\\cr\u2019 separates rows",
    "examples": "",
    "see_also": [],
    "snippet": "\\begin{eqnarray}\n	@1@\n\\end{eqnarray}"
  },
  {
    "name": "eqnarray*",
    "description": "[May 2011] same as equarray",
    "examples": "",
    "see_also": [],
    "snippet": "\\begin{eqnarray*}\n	@1@\n\\end{eqnarray*}"
  },
  {
    "name": "equation",
    "description": "[May 2011] ignored, until MathJax implements automatic numbering",
    "examples": "",
    "see_also": [],
    "snippet": "\\begin{equation}\n	@1@\n\\end{equation}"
  },
  {
    "name": "equation*",
    "description": "[May 2011] ignored",
    "examples": "",
    "see_also": [],
    "snippet": "\\begin{equation*}\n	@1@\n\\end{equation*}"
  },
  {
    "name": "gather",
    "description": "to display any number of centered formulas (without any alignment);\na double backslash \u2018\\\\\u2019 or carriage return \u2018\\cr\u2019 separates rows;\nindividual lines may be tagged using the \\tag{} command:\n\ndefault input for \xA0\\tag{}\xA0 is text\n\nyou may get mathematical content inside \xA0\\tag{}\xA0 by using math delimiters;\ne.g., \\tag{$\\alpha$}",
    "examples": "",
    "see_also": [
      "\\displaylines"
    ],
    "snippet": "\\begin{gather}\n	@1@\n\\end{gather}"
  },
  {
    "name": "gather*",
    "description": "[May 2011] same as gather",
    "examples": "",
    "see_also": [],
    "snippet": "\\begin{gather*}\n	@1@\n\\end{gather*}"
  },
  {
    "name": "matrix",
    "description": "Used to create a matrix (an array) without any enclosing delimiters;\ncolumns are centered.\n\nsuppose that $n$ columns are desired in the array;\nthen, $n-1$ ampersands are used to separate the columns\n\na double backslash \u2018\\\\\u2019 or carriage return \u2018\\cr\u2019 separates rows",
    "examples": [
      "\n\\begin{matrix}\naaa & b\\cr\nc   & ddd\n\\end{matrix}\n"
    ],
    "see_also": [
      "\\begin{array}"
    ],
    "snippet": "\\begin{matrix}\n	@1@\n\\end{matrix}"
  },
  {
    "name": "multline",
    "description": "a multi-line environment;\ntypically used for formulas/equations that don't fit on a single line\n\nthe first (or only) line is displayed left-justified\nthe last line is displayed right-justified\nany intermediate line(s) are centered\n\nThe justification of intermediate lines can be adjusted with\n\\shoveleft and \\shoveright.",
    "examples": "",
    "see_also": [
      "\\begin{split}"
    ],
    "snippet": "\\begin{multline}\n	@1@\n\\end{multline}"
  },
  {
    "name": "multline*",
    "description": "[May 2011] same as multline",
    "examples": "",
    "see_also": [
      "\\shoveleft",
      "\\shoveright"
    ],
    "snippet": "\\begin{multline*}\n	@1@\n\\end{multline*}"
  },
  {
    "name": "pmatrix",
    "description": "Used to create a matrix (an array) with parentheses $(\\,,\\,)$ as enclosing delimiters;\ncolumns are centered.\n\nsuppose that $n$ columns are desired in the array;\nthen, $n-1$ ampersands are used to separate the columns\n\na double backslash \u2018\\\\\u2019 or carriage return \u2018\\cr\u2019 separates rows",
    "examples": [
      "\n\\begin{pmatrix}\naaa & b\\cr\nc   & ddd\n\\end{pmatrix}\n"
    ],
    "see_also": [
      "\\begin{array}",
      "\\begin{matrix}"
    ],
    "snippet": "\\begin{pmatrix}\n	@1@\n\\end{pmatrix}"
  },
  {
    "name": "smallmatrix",
    "description": "Used to create a small matrix (an array);\nparticularly suited for use in text;\ncolumns are centered.\n\nsuppose that $n$ columns are desired in the array;\nthen, $n-1$ ampersands are used to separate the columns\n\na double backslash \u2018\\\\\u2019 or carriage return \u2018\\cr\u2019 separates rows",
    "examples": [
      "\nthe matrix\n$\\begin{smallmatrix}\naaa & b\\cr\nc   & ddd\n\\end{smallmatrix}$\nis...\n",
      "\n\\left[\n\\begin{smallmatrix}\naaa & b\\cr\nc   & ddd\n\\end{smallmatrix}\n\\right]\n",
      "\n\\left[\n\\begin{smallmatrix}\naaa & b\\cr\nc   & ddd\n\\end{smallmatrix}\n\\right]\n"
    ],
    "see_also": [
      "\\begin{array}",
      "\\begin{matrix}"
    ],
    "snippet": "\\begin{smallmatrix}\n	@1@\n\\end{smallmatrix}"
  },
  {
    "name": "split",
    "description": "for single equations that are too long to \uFB01t on one line, and hence must be split into multiple lines;\nallows for (optional) alignment at one or more places, using \u2018&\u2019 to mark alignment points",
    "examples": "",
    "see_also": [
      "\\begin{multline}"
    ],
    "snippet": "\\begin{split}\n	@1@\n\\end{split}"
  },
  {
    "name": "subarray",
    "description": "a more compact version of \\begin{array};\ncan be used for multi-subscripts and multi-superscripts on large operators;\ncolumns can be individually left-justified,\ncentered, or right-justified\n\nsuppose that $n$ columns are desired in the subarray;\nthen, $n-1$ ampersands are used to separate the columns\n\nthe subarray environment is started with \xA0 \\begin{subarray}{<justification info>}\xA0,\nwhere \xA0 <justification info> \xA0 is a series of $n$ letters, one for each column:\n\n\u2018l\u2019 for left-justified\n\u2018c\u2019 for centered\n\u2018r\u2019 for right-justified\n\na double backslash \u2018\\\\\u2019 or carriage return \u2018\\cr\u2019 separates rows",
    "examples": "",
    "see_also": [
      "\\substack",
      "\\begin{array}"
    ],
    "snippet": "\\begin{subarray}{@1@}\n	@2@\n\\end{subarray}"
  },
  {
    "name": "Vmatrix",
    "description": "Used to create a matrix (an array) with $\\|\\,,\\,\\|$ as enclosing delimiters;\ncolumns are centered.\n\nsuppose that $n$ columns are desired in the array;\nthen, $n-1$ ampersands are used to separate the columns\n\na double backslash \u2018\\\\\u2019 or carriage return \u2018\\cr\u2019 separates rows",
    "examples": [
      "\n\\begin{Vmatrix}\naaa & b\\cr\nc   & ddd\n\\end{Vmatrix}\n"
    ],
    "see_also": [
      "\\begin{array}",
      "\\begin{matrix}"
    ],
    "snippet": "\\begin{Vmatrix}\n	@1@\n\\end{Vmatrix}"
  },
  {
    "name": "vmatrix",
    "description": "Used to create a matrix (an array) with $|\\,,\\,|$ as enclosing delimiters;\ncolumns are centered.\n\nsuppose that $n$ columns are desired in the array;\nthen, $n-1$ ampersands are used to separate the columns\n\na double backslash \u2018\\\\\u2019 or carriage return \u2018\\cr\u2019 separates rows",
    "examples": [
      "\n\\begin{vmatrix}\naaa & b\\cr\nc   & ddd\n\\end{vmatrix}\n"
    ],
    "see_also": [
      "\\begin{array}",
      "\\begin{matrix}"
    ],
    "snippet": "\\begin{vmatrix}\n	@1@\n\\end{vmatrix}"
  }
];

// src/mathjax-helper.ts
var MathjaxHelperModal = class extends import_obsidian4.Modal {
  constructor(app, symbolPair, mathJaxHelper, settings) {
    super(app);
    this.app = app;
    this.symbolPair = symbolPair;
    this.settings = settings;
    this.mathJaxHelper = mathJaxHelper;
  }
  onOpen() {
    const { contentEl } = this;
    const symbol = getSymbolFromQuery(this.symbolPair);
    Logger.instance.info("Symbol: " + symbol);
    contentEl.createEl("h2", { text: symbol.name });
    Logger.instance.info("description: ");
    if (String.isString(symbol.description)) {
      contentEl.createEl("p", { text: symbol.description });
    } else if (Array.isArray(symbol.description)) {
      for (const description of symbol.description) {
        contentEl.createEl("p", { text: description });
      }
    }
    if (Array.isArray(symbol.examples) && symbol.examples.length > 0) {
      contentEl.createEl("h4", { text: "Examples" });
      for (const example of symbol.examples) {
        const p = contentEl.createEl("p", { text: example });
        const math = (0, import_obsidian4.renderMath)(example, false);
        (0, import_obsidian4.finishRenderMath)().then(() => {
        });
        p.addClass("better-mathjax-helper-example-entry");
        p.appendChild(math);
      }
    }
    if (Array.isArray(symbol.see_also) && symbol.see_also.length > 0) {
      const seeAlsoTitle = contentEl.createEl("h4", { text: "See also" });
      seeAlsoTitle.addClass("better-mathjax-helper-see-also-title");
      for (const see_also of symbol.see_also) {
        const p = contentEl.createEl("p", { text: see_also });
        p.addClass("better-mathjax-helper-see-also-entry");
      }
    }
    contentEl.createEl("h4", { text: "Your Snippet" });
    new import_obsidian4.Setting(contentEl).setName("Content").addTextArea((text) => {
      text.setValue(symbol.snippet);
      text.onChange((value) => {
        const newSymbol = {
          name: symbol.name,
          snippet: value,
          description: "",
          examples: "",
          see_also: []
        };
        if (this.settings.userDefinedSymbols.get(symbol.name) === void 0) {
          this.settings.userDefinedSymbols.set(symbol.name, newSymbol);
        } else {
          this.settings.userDefinedSymbols.set(symbol.name, newSymbol);
        }
      });
    });
  }
  onClose() {
    this.contentEl.empty();
    this.mathJaxHelper.saveUserDefinedSymbols().then(() => {
      new import_obsidian4.Notice("User defined symbols saved");
    });
  }
};
var MathjaxHelper = class {
  constructor(app, settings) {
    this.app = app;
    this.settings = settings;
    this.fuzzySearch = new MathjaxSearch(settings);
    this.fuzzySearch.load(LATEX_SYMBOLS);
    if (this.settings.userDefinedSymbols == void 0 || !(this.settings.userDefinedSymbols instanceof Map)) {
      this.settings.userDefinedSymbols = /* @__PURE__ */ new Map();
    }
    this.readUserDefinedSymbols().then((status) => {
      Logger.instance.info("User Defined Symbols Loading:", status);
    });
  }
  search(query, limit = 5) {
    this.lastQuery = this.fuzzySearch.search(query, limit);
    return this.lastQuery;
  }
  showHelperBySelectedItemIndex(index) {
    const modal = new MathjaxHelperModal(this.app, this.lastQuery[index], this, this.settings);
    modal.open();
  }
  async readUserDefinedSymbols() {
    const file = this.app.vault.getAbstractFileByPath(this.settings.userDefineSymbolFilePath);
    if (file instanceof import_obsidian4.TFile) {
      const content = await this.app.vault.cachedRead(file);
      this.codeBlocks = [];
      this.settings.userDefinedSymbols.clear();
      let firstBlockLoaded = false;
      const regex = /```(\w+)\n([\s\S]*?)\n```/gm;
      let match;
      while ((match = regex.exec(content)) !== null) {
        const codeType = match[1];
        const codeContent = match[2];
        let json;
        try {
          if (codeType === "json" || codeType === "yaml") {
            if (firstBlockLoaded) {
              continue;
            }
            json = codeType === "json" ? JSON.parse(codeContent) : (0, import_obsidian4.parseYaml)(codeContent);
            this.loadSymbolArray(json);
            firstBlockLoaded = true;
            this.codeBlocks.push({ content: "", type: codeType });
          } else {
            this.codeBlocks.push({ content: codeContent, type: codeType });
          }
        } catch (TypeError2) {
          Logger.instance.error(`Unsupported code block type: ${codeType}`);
          return false;
        }
      }
      return true;
    } else {
      new import_obsidian4.Notice("User defined symbols file not found");
      Logger.instance.error("User defined symbols file not found");
      return false;
    }
  }
  async saveUserDefinedSymbols() {
    const file = this.app.vault.getAbstractFileByPath(this.settings.userDefineSymbolFilePath);
    if (file === null) {
      new import_obsidian4.Notice("User defined symbols file not found");
      Logger.instance.error("User defined symbols file not found");
      return;
    }
    let content = "";
    if (this.codeBlocks.length === 0) {
      this.codeBlocks.push({ content: "", type: "json" });
    }
    for (const codeBlock of this.codeBlocks) {
      switch (codeBlock.type) {
        case "json":
          content += "```json\n" + JSON.stringify(Array.from(this.settings.userDefinedSymbols.values()), null, 2) + "\n```\n";
          break;
        case "yaml":
          content += "```yaml\n" + (0, import_obsidian4.stringifyYaml)(Array.from(this.settings.userDefinedSymbols.values())) + "\n```\n";
          break;
        default:
          content += "```" + codeBlock.type + "\n" + codeBlock.content + "\n```\n";
          break;
      }
    }
    await this.app.vault.modify(file, content);
  }
  loadSymbolArray(array) {
    if (Array.isArray(array)) {
      for (const symbol of array) {
        if (symbol.name === void 0 || symbol.name === "") {
          continue;
        }
        const newSymbol = {
          name: symbol.name,
          snippet: symbol.snippet,
          description: symbol.description,
          examples: symbol.examples,
          see_also: symbol.see_also
        };
        this.settings.userDefinedSymbols.set(newSymbol.name, newSymbol);
        this.fuzzySearch.update(this.settings.userDefinedSymbols);
        Logger.instance.info("New symbol loaded: ", newSymbol.name);
      }
    }
  }
};

// src/main.ts
var BetterMathjaxPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    await this.loadSettings();
    Logger.instance.setConsoleLogEnabled(this.settings.debugMode);
    this.addSettingTab(new BetterMathjaxSettingTab(this.app, this));
    await (0, import_obsidian5.loadMathJax)();
    this.mathjaxHelper = new MathjaxHelper(this.app, this.settings);
    this.mathjaxSuggest = new MathjaxSuggest(this, this.settings, this.mathjaxHelper);
    this.registerEditorSuggest(this.mathjaxSuggest);
    this.addCommand(selectNextSuggestCommand(this.mathjaxSuggest));
    this.addCommand(selectPreviousSuggestCommand(this.mathjaxSuggest));
    this.addCommand(selectNextPlaceholderCommand(this.mathjaxSuggest));
    this.addCommand(selectPreviousPlaceholderCommand(this.mathjaxSuggest));
    this.addCommand(showMathjaxHelperOnCurrentSelection(this.mathjaxSuggest));
    this.addCommand(reloadUserDefinedFile(this.mathjaxHelper));
    this.registerEvent(this.app.vault.on("modify", userDefinedFileChanged, this));
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
/*! Bundled license information:

fz-search/dist/FuzzySearch.min.js:
  (**
   * @license FuzzySearch.js
   * Autocomplete suggestion engine using approximate string matching
   * https://github.com/jeancroy/FuzzySearch
   *
   * Copyright (c) 2015, Jean Christophe Roy
   * Licensed under The MIT License.
   * http://opensource.org/licenses/MIT
   *)
*/
//# sourceMappingURL=data:application/json;base64,
